{"version":3,"sources":["../src/index.ts","../src/utils.ts","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_isPlaceholder.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_curry1.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_curry2.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_isArray.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_has.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_isArguments.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/keys.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_toISOString.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_arrayReduce.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_isInteger.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/mapObjIndexed.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/trim.js","../src/clients/function-client.ts","../src/clients/workflow-client.ts","../src/clients/workflow-schemas.ts","../src/types/task-types.ts","../src/types/workflow-types.ts","../src/types/chat-types.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport { FunctionJson } from 'function-json-schema';\nexport * from 'function-json-schema';\n\nimport { deconstructedPromise, poll, setTimeoutPromise } from './utils.js';\nimport { ChatFunctionReturn, ChatText, ChatTurn } from './types/chat-types.js';\nimport { createFunctionClient } from './clients/function-client.js';\nimport { createWorkflowClient } from './clients/workflow-client.js';\nimport { Task, TaskSequenced, TaskStatus, TaskStatusesToType } from './types/task-types.js';\nexport * from './clients/function-client.js';\nexport * from './clients/workflow-client.js';\nexport * from './clients/workflow-schemas.js';\nexport * from './types/task-types.js';\nexport * from './types/workflow-types.js';\nexport * from './types/chat-types.js';\n\nexport const DEFAULT_BASE_URL = 'https://api.iudex.ai';\n\nexport type IudexMessage = ChatTurn;\n\nexport type ChatCompletionMessageWithIudex = OpenAI.ChatCompletionMessageParam & ({\n  tool_call_id?: string;\n  workflowId?: string;\n} | {\n  tool_call_id: string;\n  workflowId: string;\n});\n\nexport type ChatCompletionWithIudex = OpenAI.ChatCompletion & {\n  choices: Array<OpenAI.ChatCompletion.Choice & {\n    message: OpenAI.ChatCompletionMessage & { workflowId: string; };\n  }>\n};\n\nexport function createClient(baseUrl: string, apiKey: string) {\n  return {\n    ...createFunctionClient(baseUrl, apiKey),\n    ...createWorkflowClient(baseUrl, apiKey),\n  };\n}\n\n/**\n * Iudex api client.\n */\nexport class Iudex {\n  baseUrl: string;\n  apiKey: string;\n  maxTries: number;\n  client: ReturnType<typeof createClient>;\n  currentWorkflowId?: Promise<string>;\n\n  functionLinker?: (fnName: string) => (...args: any[]) => unknown;\n\n  constructor({\n    apiKey = process.env.IUDEX_API_KEY,\n    baseUrl = process.env.IUDEX_BASE_URL || DEFAULT_BASE_URL,\n    maxTries = process.env.IUDEX_MAX_TRIES ? parseInt(process.env.IUDEX_MAX_TRIES) : 60,\n  }: {\n    apiKey?: string;\n    baseUrl?: string;\n    maxTries?: number;\n  } = {}) {\n    if (!apiKey) {\n      throw Error(\n        `The IUDEX_API_KEY environment variable is missing or empty.` +\n        ` Provide IUDEX_API_KEY to the environment on load` +\n        ` OR instantiate the Iudex client with the apiKey option.` +\n        ` Example: \\`new Iudex({ apiKey: 'My API Key' })\\``,\n      );\n    }\n    this.apiKey = apiKey;\n    this.baseUrl = baseUrl;\n    this.maxTries = maxTries;\n    this.client = createClient(this.baseUrl, this.apiKey);\n\n    // Need it for generator function\n    this.streamCurrentTask = this.streamCurrentTask.bind(this);\n  }\n\n  uploadFunctions = (\n    jsons: Array<OpenAI.ChatCompletionCreateParams.Function | FunctionJson>,\n    modules?: string,\n  ): Promise<void> => {\n    return this.client.putFunctionJsons(jsons, modules);\n  };\n\n  linkFunctions = (functionLinker: (fnName: string) => (...args: any[]) => unknown): void => {\n    this.functionLinker = functionLinker;\n  };\n\n  /**\n   * @param message message to send\n   * @returns response as a chat object\n   */\n  sendChatTurn = async (\n    message: string,\n    opts: {\n      onChatTurn?: (c: ChatTurn) => void,\n      initAuth?: string,\n      modules?: string[],\n    } = {},\n  ): Promise<ChatText> => {\n    const { onChatTurn, modules } = opts;\n    const {\n      promise: currentWorkflowId,\n      resolve: setCurrentWorkflowId,\n      reject: rejectCurrentWorkflowId,\n    } = deconstructedPromise<string>();\n    this.currentWorkflowId = currentWorkflowId;\n\n    const userTurn: ChatText = {\n      id: 'msg_ephemeral_' + new Date().toISOString(),\n      type: 'text',\n      sender: 'you',\n      timestamp: new Date().toISOString(),\n      text: message,\n    };\n    onChatTurn?.(userTurn);\n    const { workflowId } = await this.client.startWorkflow(userTurn.text, modules)\n      .catch(e => {\n        rejectCurrentWorkflowId(e);\n        throw e;\n      });\n    setCurrentWorkflowId(workflowId);\n\n    let nextMessage = await poll(\n      this.client.nextMessage,\n      [workflowId],\n      { maxTries: 60, tries: 0, waitMs: 1000 },\n    );\n    onChatTurn?.(nextMessage);\n\n    while (nextMessage.type === 'functionCall') {\n      if (!this.functionLinker) {\n        throw Error(\n          'Establish a way to call functions using `.linkFunctions` before' +\n          ' sending a message that might require your functions to answer.',\n        );\n      }\n      const fn = this.functionLinker(nextMessage.functionName);\n      const fnReturn = await fn(nextMessage.functionArgs);\n\n      const fnReturnTurn: ChatFunctionReturn = {\n        id: 'msg_ephemeral_' + new Date().toISOString(),\n        type: 'functionReturn',\n        sender: nextMessage.functionName,\n        timestamp: new Date().toISOString(),\n        functionCallId: nextMessage.functionCallId,\n        functionReturn: JSON.stringify(fnReturn),\n      };\n      onChatTurn?.(fnReturnTurn);\n      await this.client.returnFunctionCall(\n        fnReturnTurn.functionCallId,\n        fnReturnTurn.functionReturn,\n      );\n\n      nextMessage = await poll(\n        this.client.nextMessage,\n        [workflowId],\n        { maxTries: 60, tries: 0, waitMs: 1000 },\n      );\n      onChatTurn?.(nextMessage);\n    }\n\n    return nextMessage;\n  };\n\n  /**\n   * @param message message to send\n   * @returns response message as a string\n   */\n  sendMessage = async (\n    message: string,\n    opts: {\n      onChatTurn?: (c: ChatTurn) => void,\n      initAuth?: string,\n      modules?: string[],\n    } = {},\n  ): Promise<string> => {\n    const chatTurn = await this.sendChatTurn(message, opts);\n    return chatTurn.text;\n  };\n\n  async *streamCurrentTask(): AsyncGenerator<Task> {\n    if (!this.currentWorkflowId) {\n      throw Error('No current workflow id. Send a message first.');\n    }\n    const workflowId = await this.currentWorkflowId;\n\n    // Start from root\n    let rootTask = await this.client.fetchGetWorkflowById({ workflowId }).then(r => r.workflow);\n    // Get processing task\n    let processingTask = getFirstTaskByStatus(rootTask, [\n      'Pending',\n      'Planning',\n      'Executing',\n      'Sequencing',\n    ]);\n    let oldProcessingTask: typeof processingTask;\n\n    while (processingTask) {\n      // Only yield when theres a new processing task\n      if (oldProcessingTask?.id !== processingTask.id\n        || oldProcessingTask?.status !== processingTask.status\n      ) {\n        yield processingTask;\n        oldProcessingTask = processingTask;\n      }\n      // Wait\n      await setTimeoutPromise(1000);\n      // Fetch\n      rootTask = await this.client.fetchGetWorkflowById({ workflowId }).then(r => r.workflow);\n      // Error escape hatch\n      const maybeErroredTask = getLastTaskByStatus(rootTask, 'Errored');\n      if (maybeErroredTask) {\n        yield maybeErroredTask;\n        return;\n      }\n      // Set\n      processingTask = getFirstTaskByStatus(rootTask, [\n        'Pending',\n        'Planning',\n        'Executing',\n        'Sequencing',\n      ]);\n    }\n\n    // Get the resolved task\n    const resolvedTask = getLastTaskByStatus(rootTask, 'Resolved');\n    if (!resolvedTask) {\n      throw Error('No processing nor resolved task found.');\n    }\n    yield resolvedTask;\n    return;\n  }\n\n  // ======================= OpenAI interface shim ======================\n  chatCompletionsCreate = (body: OpenAI.ChatCompletionCreateParamsNonStreaming & {\n    messages: Array<ChatCompletionMessageWithIudex>\n  }): Promise<ChatCompletionWithIudex>  => {\n    const lastMessage = body.messages[body.messages.length - 1];\n    if (!lastMessage) {\n      throw Error(`The messages array is empty.`);\n    }\n\n    // Expecting the last message to be the function result or a new query.\n    // So, the second to last message is the previous Iudex message with\n    // the function to call + callId or is undefined.\n    const penUltMessage = body.messages[body.messages.length - 2];\n\n    // If there is a tool_call_id, we use it to continue the execution in Iudex\n    if (lastMessage?.tool_call_id && penUltMessage?.workflowId) {\n      const workflowId = penUltMessage.workflowId;\n      const callId = lastMessage.tool_call_id;\n      const functionReturn = lastMessage.content || '';\n\n      // Put data\n      const functionCallRes =\n        this.client.returnFunctionCall(callId, String(functionReturn));\n\n      // Wait for new message\n      const nextMessageRes = functionCallRes.then(() => poll(\n        this.client.nextMessage,\n        [workflowId],\n        { maxTries: 60, tries: 0, waitMs: 1000 },\n      ));\n\n      // Return result as OpenAI.ChatCompletion\n      return nextMessageRes.then((r) => {\n        return {\n          model: body.model,\n          ...mapIudexToOpenAi(r, workflowId),\n        };\n      });\n    }\n\n    if (!lastMessage.content) {\n      throw Error(`The message content is empty.`);\n    }\n\n    // Else create new workflow\n    const {\n      promise: currentWorkflowId,\n      resolve: setCurrentWorkflowId,\n      reject: rejectCurrentWorkflowId,\n    } = deconstructedPromise<string>();\n    this.currentWorkflowId = currentWorkflowId;\n    const messageContent = extractMessageTextContent(lastMessage.content);\n    return this.client.startWorkflow(messageContent)\n      .then(({ workflowId }) => {\n        setCurrentWorkflowId(workflowId);\n        return poll(\n          this.client.nextMessage,\n          [workflowId],\n          { maxTries: 60, tries: 0, waitMs: 1000 },\n        ).then((r) => {\n          return {\n            model: body.model,\n            ...mapIudexToOpenAi(r, workflowId),\n          };\n        });\n      })\n      .catch(e => {\n        rejectCurrentWorkflowId(e);\n        throw e;\n      });\n  };\n\n  chat = {\n    completions: {\n      create: this.chatCompletionsCreate,\n    },\n  };\n}\n\n/**\n * Maps IudexMessage to OpenAI.ChatCompletion.\n */\nexport function mapIudexToOpenAi(\n  m: IudexMessage,\n  workflowId: string,\n): Omit<ChatCompletionWithIudex, 'model'> {\n  // If the result is a function_call, we return the function call\n  if (m.type === 'functionCall') {\n    const message = {\n      content: null,\n      role: 'assistant' as const,\n      tool_calls: [{\n        id: m.functionCallId,\n        function: { name: m.functionName, arguments: JSON.stringify(m.functionArgs) },\n        type: 'function' as const,\n      }],\n      workflowId,\n    };\n    return {\n      id: m.id,\n      choices: [{\n        index: 0,\n        finish_reason: 'tool_calls',\n        logprobs: null,\n        message,\n      }],\n      created: new Date(m.timestamp).valueOf(),\n      object: 'chat.completion',\n    };\n  }\n\n  // Else assume it's the final result\n  if (m.type === 'text') {\n    const message = {\n      content: m.text,\n      role: 'assistant' as const,\n      workflowId,\n    };\n    return {\n      id: m.id,\n      choices: [{\n        index: 0,\n        finish_reason: 'stop',\n        logprobs: null,\n        message,\n      }],\n      created: new Date(m.timestamp).valueOf(),\n      object: 'chat.completion',\n    };\n  }\n\n  throw Error('Unsupported message type: ' + m.type);\n}\n\n/**\n * Extracts OpenAI message content as a string.\n */\nexport function extractMessageTextContent(\n  content: OpenAI.ChatCompletionUserMessageParam['content'],\n): string {\n  if (typeof content === 'string') {\n    return content;\n  }\n  // Else content is array containing PartImage or PartText\n  return content.map(c => c.type === 'text' ? c.text : '').join('');\n}\n\n// ======================= Task traversal ======================\nexport function getLastTaskByStatus<Statuses extends TaskStatus | TaskStatus[]>(\n  root: Task,\n  status: Statuses,\n): TaskStatusesToType<Statuses> | undefined {\n  const arrayStatus = !Array.isArray(status) ? [status] : status;\n\n  const traverse = reversePreOrderTraversal<Task>(\n    t => (t as TaskSequenced).subtasks || [],\n    t => (arrayStatus as TaskStatus[]).includes(t.status),\n  );\n\n  return traverse(root) as TaskStatusesToType<Statuses> | undefined;\n}\n\n\nexport function getFirstTaskByStatus<S extends TaskStatus | TaskStatus[]>(\n  root: Task,\n  status: S | S[],\n): TaskStatusesToType<S | S[]> | undefined {\n  const arrayStatus = !Array.isArray(status) ? [status] : status;\n\n  const traverse = preOrderTraversal<Task>(\n    t => (t as TaskSequenced).subtasks || [],\n    t => (arrayStatus as TaskStatus[]).includes(t.status),\n  );\n\n  return traverse(root) as TaskStatusesToType<S | S[]> | undefined;\n}\n\n\nexport function reversePreOrderTraversal<T>(\n  // Gets children from node\n  getChildren: (node: T) => T[],\n  // If true, stops traversal and returns value\n  predicate: (node: T) => boolean,\n) {\n  return function traverse(node: T): T | undefined {\n    if (predicate(node)) {\n      return node;\n    }\n\n    const reversedChildren = getChildren(node).reverse();\n    for (const child of reversedChildren) {\n      const maybeFound = traverse(child);\n      if (maybeFound !== undefined) {\n        return maybeFound;\n      }\n    }\n\n    return undefined;\n  };\n}\n\nexport function preOrderTraversal<T>(\n  // Gets children from node\n  getChildren: (node: T) => T[],\n  // If true, stops traversal and returns value\n  predicate: (node: T) => boolean,\n) {\n  return function traverse(node: T): T | undefined {\n    if (predicate(node)) {\n      return node;\n    }\n\n    const children = getChildren(node);\n    for (const child of children) {\n      const maybeFound = traverse(child);\n      if (maybeFound !== undefined) {\n        return maybeFound;\n      }\n    }\n\n    return undefined;\n  };\n}\n","export function setTimeoutPromise(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function poll<Args extends any[], Ret>(\n  fn: (...args: Args) => Promise<Ret>,\n  args: Args,\n  {\n    maxTries,\n    tries,\n    waitMs,\n  }: {\n    maxTries: number;\n    tries: number;\n    waitMs: number;\n  } = { maxTries: 60, tries: 0, waitMs: 1000 },\n): Promise<NonNullable<Ret>> {\n  if (tries >= maxTries) {\n    throw Error(\n      `Polling failed after ${maxTries} tries for function ${fn.name}.`,\n    );\n  }\n  return fn(...args).then(res => {\n    if (res == null) {\n      return setTimeoutPromise(waitMs)\n        .then(() => poll(fn, args, { maxTries, tries: tries + 1, waitMs }));\n    }\n    return res;\n  });\n}\n\nexport type DeconstructedPromise<T> = {\n  promise: Promise<T>;\n  resolve: (value: T | PromiseLike<T>) => void;\n  reject: (reason?: any) => void;\n};\nexport function deconstructedPromise<T>(): DeconstructedPromise<T> {\n  // Need the ! because TS doesnt know that\n  // the function inside the promise immediately resolves.\n  let promiseResolve!: (value: T | PromiseLike<T>) => void;\n  let promiseReject!: (reason?: any) => void;\n  const promise = new Promise<T>((resolve, reject) => {\n    promiseResolve = resolve;\n    promiseReject = reject;\n  });\n  return {\n    promise,\n    resolve: promiseResolve,\n    reject: promiseReject,\n  };\n}","export default function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from \"./_isPlaceholder.js\";\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from \"./_curry1.js\";\nimport _isPlaceholder from \"./_isPlaceholder.js\";\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nexport default Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n};","export default function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","import _has from \"./_has.js\";\nvar toString = Object.prototype.toString;\n\nvar _isArguments =\n/*#__PURE__*/\nfunction () {\n  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n    return toString.call(x) === '[object Arguments]';\n  } : function _isArguments(x) {\n    return _has('callee', x);\n  };\n}();\n\nexport default _isArguments;","import _curry1 from \"./internal/_curry1.js\";\nimport _has from \"./internal/_has.js\";\nimport _isArguments from \"./internal/_isArguments.js\"; // cover IE < 9 keys issues\n\nvar hasEnumBug = !\n/*#__PURE__*/\n{\n  toString: null\n}.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug\n\nvar hasArgsEnumBug =\n/*#__PURE__*/\nfunction () {\n  'use strict';\n\n  return arguments.propertyIsEnumerable('length');\n}();\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n};\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values, R.toPairs\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\n\n\nvar keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?\n/*#__PURE__*/\n_curry1(function keys(obj) {\n  return Object(obj) !== obj ? [] : Object.keys(obj);\n}) :\n/*#__PURE__*/\n_curry1(function keys(obj) {\n  if (Object(obj) !== obj) {\n    return [];\n  }\n\n  var prop, nIdx;\n  var ks = [];\n\n  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n\n  for (prop in obj) {\n    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n      ks[ks.length] = prop;\n    }\n  }\n\n  if (hasEnumBug) {\n    nIdx = nonEnumerableProps.length - 1;\n\n    while (nIdx >= 0) {\n      prop = nonEnumerableProps[nIdx];\n\n      if (_has(prop, obj) && !contains(ks, prop)) {\n        ks[ks.length] = prop;\n      }\n\n      nIdx -= 1;\n    }\n  }\n\n  return ks;\n});\nexport default keys;","/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) {\n  return (n < 10 ? '0' : '') + n;\n};\n\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n  return d.toISOString();\n} : function _toISOString(d) {\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n};\n\nexport default _toISOString;","export default function _arrayReduce(reducer, acc, list) {\n  var index = 0;\n  var length = list.length;\n\n  while (index < length) {\n    acc = reducer(acc, list[index]);\n    index += 1;\n  }\n\n  return acc;\n}","/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nexport default Number.isInteger || function _isInteger(n) {\n  return n << 0 === n;\n};","import _arrayReduce from \"./internal/_arrayReduce.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport keys from \"./keys.js\";\n/**\n * An Object-specific version of [`map`](#map). The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * [`map`](#map) instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      const xyz = { x: 1, y: 2, z: 3 };\n *      const prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, xyz); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */\n\nvar mapObjIndexed =\n/*#__PURE__*/\n_curry2(function mapObjIndexed(fn, obj) {\n  return _arrayReduce(function (acc, key) {\n    acc[key] = fn(obj[key], key, obj);\n    return acc;\n  }, {}, keys(obj));\n});\n\nexport default mapObjIndexed;","import _curry1 from \"./internal/_curry1.js\";\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar hasProtoTrim = typeof String.prototype.trim === 'function';\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\n\nvar trim = !hasProtoTrim ||\n/*#__PURE__*/\nws.trim() || !\n/*#__PURE__*/\nzeroWidth.trim() ?\n/*#__PURE__*/\n_curry1(function trim(str) {\n  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n  return str.replace(beginRx, '').replace(endRx, '');\n}) :\n/*#__PURE__*/\n_curry1(function trim(str) {\n  return str.trim();\n});\nexport default trim;","import * as R from 'ramda';\nimport { ChatFunctionCall, ChatText, ChatFunctionReturn } from '../types/chat-types.js';\n\nfunction checkResponse(r: Response): Promise<unknown> {\n  if (!r.ok) {\n    throw Error(`Request ${r.url} failed with ${r.status}: ${r.statusText}`);\n  }\n  if (r.status === 204) {\n    return Promise.resolve();\n  }\n  return r.json();\n}\n\nfunction throwOnApiError<T>(json: T): T {\n  // Check service unavailable message\n  if ((json as any)?.message === 'Service Unavailable') {\n    throw Error((json as any).message);\n  }\n  // Pass through otherwise\n  return json;\n}\n\nfunction unwrapApi(json: any): unknown {\n  // If there is a body, return that instead\n  if (json?.body\n    && typeof json.body === 'string'\n    && json.body.startsWith('{')\n    && json.body.endsWith('}')\n  ) {\n    return JSON.parse(json.body);\n  }\n  return json;\n}\n\nfunction parseIudexResponse(r: Response): Promise<any> {\n  return checkResponse(r)\n    .then(throwOnApiError)\n    .then(unwrapApi)\n    .then(v => {\n      if (process.env.DEBUG_MODE) {\n        console.log(new Date().toISOString(), 'Response:', v);\n      }\n      return v;\n    })\n    .catch((e) => {\n      throw Error(`Request ${r.url} failed with ${r.status}: ${e.message}`);\n    });\n}\n\nexport function createFunctionClient(baseUrl: string, apiKey: string) {\n  const fns = {\n    returnFunctionCall,\n    nextMessage,\n    startWorkflow,\n    putFunctionJsons,\n  };\n  return R.mapObjIndexed((fn) => fn(baseUrl, apiKey), fns) as MappedReturnType<\n    typeof fns\n  >;\n}\n\n// TODO change to putFunctionCallReturn to better match api def name\nexport type ReturnFunctionCallBody = Pick<ChatFunctionReturn, 'functionCallId'|'functionReturn'>;\nexport type ReturnFunctionCallRes = { workflowId: string; message: string; };\nexport function returnFunctionCall(baseUrl: string, apiKey: string) {\n  return function (functionCallId: string, functionReturn: string): Promise<void> {\n    const bodyJson: ReturnFunctionCallBody = {\n      functionCallId,\n      functionReturn,\n    };\n    return fetch(baseUrl + '/function_calls/' + functionCallId + '/return', {\n      method: 'PUT',\n      headers: { 'x-api-key': `${apiKey}` },\n      body: JSON.stringify(bodyJson),\n    }).then(parseIudexResponse);\n  };\n}\n\nexport type NextMessageRes = ChatFunctionCall | ChatText | undefined;\nexport function nextMessage(baseUrl: string, apiKey: string) {\n  return function (workflowId: string): Promise<NextMessageRes> {\n    return fetch(baseUrl + '/workflows/' + workflowId + '/next_message', {\n      method: 'GET',\n      headers: { 'x-api-key': `${apiKey}` },\n    }).then(parseIudexResponse);\n  };\n}\n\n// TODO change to postWorkflows to better match api def name\nexport type StartWorkflowRes = { workflowId: string; message: string; };\nexport function startWorkflow(baseUrl: string, apiKey: string) {\n  return function (query: string, modules?: string[]): Promise<StartWorkflowRes> {\n    return fetch(baseUrl + '/workflows', {\n      method: 'POST',\n      headers: { 'x-api-key': `${apiKey}` },\n      body: JSON.stringify({ query, modules }),\n    }).then(parseIudexResponse);\n  };\n}\n\n\ntype FunctionJson = {\n  name: string;\n  description?: string;\n  parameters?: Record<string, any>;\n  returns?: Record<string, any>;\n  usageExample?: string;\n  returnsExample?: string;\n};\nexport type putFunctionJsonsReq = { jsons: FunctionJson[]; module?: string; };\nexport function putFunctionJsons(baseUrl: string, apiKey: string) {\n  return function (jsons: FunctionJson[], module?: string): Promise<void> {\n    const bodyJson: putFunctionJsonsReq = { jsons, module };\n    return fetch(baseUrl + '/function_jsons', {\n      method: 'PUT',\n      headers: { 'x-api-key': `${apiKey}` },\n      body: JSON.stringify(bodyJson),\n    }).then(parseIudexResponse);\n  };\n}\n","import * as R from 'ramda';\n\nimport {\n  GetWorkflowsRes,\n  GetWorkflowByIdReq,\n  GetWorkflowByIdRes,\n  PostWorkflowsReq,\n  PostWorkflowsRes,\n} from './workflow-schemas.js';\n\n/**\n * Main client\n */\nexport function createWorkflowClient(baseUrl: string, apiKey: string) {\n  const fns = {\n    fetchGetWorkflows,\n    fetchGetWorkflowById,\n    fetchPostWorkflows,\n  };\n  return R.mapObjIndexed((fn) => fn(baseUrl, apiKey), fns) as MappedReturnType<\n    typeof fns\n  >;\n}\n\nexport type WorkflowClient = ReturnType<typeof createWorkflowClient>;\n\nasync function checkResponseStatus(res: Response) {\n  const body = await res.json();\n  if (!res.ok) {\n    // Unwrap error\n    const error = body.error || res.statusText;\n    throw new Error(`Request failed with: ${error}`);\n  }\n  return body;\n}\n\nexport function fetchGetWorkflows(baseUrl: string, apiKey: string) {\n  return function (): Promise<GetWorkflowsRes> {\n    return fetch(`${baseUrl}/workflows`, {\n      method: 'GET',\n      headers: { 'x-api-key': apiKey },\n    }).then(checkResponseStatus);\n  };\n}\n\nexport function fetchGetWorkflowById(baseUrl: string, apiKey: string) {\n  return function (req: GetWorkflowByIdReq): Promise<GetWorkflowByIdRes> {\n    return fetch(`${baseUrl}/workflows/${req.workflowId}`, {\n      method: 'GET',\n      headers: { 'x-api-key': apiKey },\n    }).then(checkResponseStatus);\n  };\n}\n\nexport function fetchPostWorkflows(baseUrl: string, apiKey: string) {\n  return function (req: PostWorkflowsReq): Promise<PostWorkflowsRes> {\n    return fetch(`${baseUrl}/workflows`, {\n      method: 'POST',\n      body: JSON.stringify(req),\n      headers: { 'x-api-key': apiKey },\n    }).then(checkResponseStatus);\n  };\n}\n","import z from 'zod';\n\nimport { taskSchema } from '../types/task-types.js';\nimport { workflowInfoSchema } from '../types/workflow-types.js';\n\nexport const getWorkflowsResSchema = z.object({\n  workflowInfos: z.array(workflowInfoSchema),\n});\nexport type GetWorkflowsRes = z.infer<typeof getWorkflowsResSchema>;\n\nexport const getWorkflowByIdReqSchema = z.object({\n  workflowId: z.string(),\n});\nexport const getWorkflowByIdResSchema = z.object({\n  workflow: taskSchema, // root task\n});\nexport type GetWorkflowByIdReq = z.infer<typeof getWorkflowByIdReqSchema>;\nexport type GetWorkflowByIdRes = z.infer<typeof getWorkflowByIdResSchema>;\n\nexport const postWorkflowsReqSchema = z.object({\n  query: z.string(),\n  // Undefined means use all org modules. [] means use all modules.\n  modules: z.array(z.string()).optional(),\n  opts: z.object({\n    maxFunctionMatches: z.number().optional(),\n  }).optional(),\n});\nexport const postWorkflowsResSchema = z.object({\n  message: z.string(),\n  workflowId: z.string(),\n});\nexport type PostWorkflowsReq = z.infer<typeof postWorkflowsReqSchema>;\nexport type PostWorkflowsRes = z.infer<typeof postWorkflowsResSchema>;\n","import z from 'zod';\n\nexport const TaskStatus = {\n  // Queued state\n  Pending: 'Pending', // awaiting processing\n  // Processing states\n  Planning: 'Planning', // in programmer\n  Executing: 'Executing', // in executor\n  Sequencing: 'Sequencing', // in sequencer\n  // Terminal states\n  Resolved: 'Resolved', // execution resolved task\n  Sequenced: 'Sequenced', // no resolution; sequuencer created subtasks\n  Errored: 'Errored', // unrecoverable error during processing\n} as const;\nexport type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus];\n\nexport const TerminalTaskStatuses = [\n  TaskStatus.Resolved,\n  TaskStatus.Sequenced,\n  TaskStatus.Errored,\n] as const;\n\nexport const baseTaskSchema = z.object({\n  id: z.string(),\n  description: z.string(),\n  status: z.nativeEnum(TaskStatus),\n  stepIndex: z.number(),\n  depth: z.number(),\n  numRewrites: z.number(),\n});\nexport type BaseTask = z.infer<typeof baseTaskSchema>;\n\n// Task judgement types\n\nexport const Feasibility = {\n  Feasible: 'Feasible',\n  Rewritable: 'Rewritable',\n  Infeasible: 'Infeasible',\n} as const;\nexport type Feasibility = (typeof Feasibility)[keyof typeof Feasibility];\n\nexport const feasibilityCheckSchema = z.object({\n  feasibility: z.nativeEnum(Feasibility),\n  reason: z.coerce.string(),\n  fix: z.string().optional(),\n});\nexport type FeasibilityCheck = z.infer<typeof feasibilityCheckSchema>;\n\nexport const Resolution = {\n  Resolved: 'Resolved',\n  Rewritable: 'Rewritable',\n  Infeasible: 'Infeasible',\n} as const;\nexport type Resolution = (typeof Resolution)[keyof typeof Resolution];\n\nexport const resolutionCheckSchema = z.object({\n  resolution: z.nativeEnum(Resolution),\n  reason: z.coerce.string(),\n  fix: z.string().optional(),\n});\nexport type ResolutionCheck = z.infer<typeof resolutionCheckSchema>;\n\n// Disambiguation of task statuses and required data\n\nexport const taskPendingSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Pending),\n});\nexport type TaskPending = z.infer<typeof taskPendingSchema>;\n\nexport const taskPlanningSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Planning),\n  // present if rewriting\n  program: z.string().optional(),\n  feasibilityCheck: feasibilityCheckSchema.optional(),\n  // present if rewriting from executor\n  resolutionCheck: resolutionCheckSchema.optional(),\n});\nexport type TaskPlanning = z.infer<typeof taskPlanningSchema>;\n\nexport const taskExecutingSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Executing),\n  program: z.string(),\n  usedFunctionNames: z.array(z.string()),\n  feasibilityCheck: feasibilityCheckSchema,\n});\nexport type TaskExecuting = z.infer<typeof taskExecutingSchema>;\n\nexport const taskResolvedSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Resolved),\n  program: z.string(),\n  usedFunctionNames: z.array(z.string()),\n  feasibilityCheck: feasibilityCheckSchema,\n  resolutionCheck: resolutionCheckSchema,\n});\nexport type TaskResolved = z.infer<typeof taskResolvedSchema>;\n\nexport const taskSequencingSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Sequencing),\n  program: z.string(),\n  feasibilityCheck: feasibilityCheckSchema,\n  // present if sequencing from executor\n  usedFunctionNames: z.array(z.string()).optional(),\n  resolutionCheck: resolutionCheckSchema.optional(),\n});\nexport type TaskSequencing = z.infer<typeof taskSequencingSchema>;\n\nexport type TaskSequenced = z.infer<typeof baseTaskSchema> & {\n  status: 'Sequenced'; // NOTE: should use TaskStatus but compiler thinks it's the type\n  program: string;\n  subtasks: Task[];\n  feasibilityCheck: FeasibilityCheck;\n  usedFunctionNames?: string[];\n  resolutionCheck?: ResolutionCheck;\n};\nexport const taskSequencedSchema: z.ZodType<TaskSequenced> = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Sequenced),\n  program: z.string(),\n  subtasks: z.lazy(() => taskSchema.array()),\n  feasibilityCheck: feasibilityCheckSchema,\n  usedFunctionNames: z.array(z.string()).optional(),\n  resolutionCheck: resolutionCheckSchema.optional(),\n});\n\nexport const taskErroredSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Errored),\n  errorMsg: z.string(),\n  errorName: z.string(),\n  errorStack: z.string().optional(),\n});\nexport type TaskErrored = z.infer<typeof taskErroredSchema>;\n\n// Task union types\n\nexport type Task =\n  | TaskPending\n  | TaskPlanning\n  | TaskExecuting\n  | TaskSequencing\n  | TaskSequenced\n  | TaskResolved\n  | TaskErrored;\nexport const taskSchema: z.ZodType<Task> = z.union([\n  taskPendingSchema,\n  taskPlanningSchema,\n  taskExecutingSchema,\n  taskResolvedSchema,\n  taskSequencingSchema,\n  taskSequencedSchema,\n  taskErroredSchema,\n]);\n\nexport type TaskStatusToType = {\n  [TaskStatus.Pending]: TaskPending;\n  [TaskStatus.Planning]: TaskPlanning;\n  [TaskStatus.Executing]: TaskExecuting;\n  [TaskStatus.Sequencing]: TaskSequencing;\n  [TaskStatus.Sequenced]: TaskSequenced;\n  [TaskStatus.Resolved]: TaskResolved;\n  [TaskStatus.Errored]: TaskErrored;\n};\n\nexport type TaskStatusesToType<Statuses> =\n  Statuses extends TaskStatus[]\n    ? Statuses[number] extends TaskStatus\n      ? TaskStatusToType[Statuses[number]]\n      : never\n    : Statuses extends TaskStatus\n      ? TaskStatusToType[Statuses]\n      : never;\n","import z from 'zod';\nimport { taskSchema } from './task-types.js';\n\nexport const WorkflowStatus = {\n  Running: 'Running',\n  Completed: 'Completed',\n  Failed: 'Failed',\n  Paused: 'Paused',\n  TimedOut: 'TimedOut',\n} as const;\nexport type WorkflowStatus = (typeof WorkflowStatus)[keyof typeof WorkflowStatus];\n\nexport const workflowMetadataSchema = z.object({\n  maxFunctionMatches: z.number().optional(),\n});\nexport type WorkflowMetadata = z.infer<typeof workflowMetadataSchema>;\n\nexport const workflowSchema = z.object({\n  workflowId: z.string(),\n  root: taskSchema,\n  modules: z.array(z.string()).optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  metadata: workflowMetadataSchema.optional(),\n  orgId: z.string(),\n});\nexport type Workflow = z.infer<typeof workflowSchema>;\n\nexport const workflowInfoSchema = z.object({\n  workflowId: z.string(),\n  modules: z.array(z.string()).optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  // Task summary\n  description: z.string(),\n  status: z.nativeEnum(WorkflowStatus),\n  numLeafTasks: z.number(),\n});\nexport type WorkflowInfo = z.infer<typeof workflowInfoSchema>;\n","import { z } from 'zod';\n\nconst chatTurnBaseSchema = z.object({\n  id: z.string(),\n  type: z.string(),\n  sender: z.string(),\n  timestamp: z.string(),\n});\ntype ChatTurnBase = z.infer<typeof chatTurnBaseSchema>;\n\n/**\n * For simple text responses\n */\nexport const chatTextSchema = chatTurnBaseSchema.extend({\n  type: z.literal('text'),\n  text: z.string(),\n});\nexport type ChatText = z.infer<typeof chatTextSchema>;\n\nexport const chatErrorSchema = chatTurnBaseSchema.extend({\n  type: z.literal('error'),\n  name: z.string(),\n  message: z.string(),\n  cause: z.string().optional(),\n  stack: z.string().optional(),\n});\nexport type ChatError = z.infer<typeof chatErrorSchema>;\n\n/**\n * For image message.\n * Inspired by https://ogp.me/\n */\nexport const chatImageSchema = chatTurnBaseSchema.extend({\n  type: z.literal('image'),\n  image: z.string(),\n  description: z.string(),\n});\nexport type ChatImage = z.infer<typeof chatImageSchema>;\n\n\nexport const chatListSchema = chatTurnBaseSchema.extend({\n  type: z.literal('list'),\n  list: z.array(z.string()),\n});\nexport type ChatList = z.infer<typeof chatListSchema>;\n\n// TODO: add more types for documents, graphs, etc\n\nexport const chatFunctionCallSchema = chatTurnBaseSchema.extend({\n  type: z.literal('functionCall'),\n  functionCallId: z.string(),\n  functionName: z.string(),\n  functionArgs: z.record(z.unknown()),\n});\nexport type ChatFunctionCall = z.infer<typeof chatFunctionCallSchema>;\n\n\nexport const chatFunctionReturnSchema = chatTurnBaseSchema.extend({\n  type: z.literal('functionReturn'),\n  functionCallId: z.string(),\n  functionReturn: z.string(),\n});\nexport type ChatFunctionReturn = z.infer<typeof chatFunctionReturnSchema>;\n\n/**\n * All chat turn types. Put new chat turn types here.\n */\nexport const chatTurnSchema = z.discriminatedUnion('type', [\n  chatTextSchema,\n  chatErrorSchema,\n  chatImageSchema,\n  chatListSchema,\n  chatFunctionCallSchema,\n  chatFunctionReturnSchema,\n]);\nexport type ChatTurn = z.infer<typeof chatTurnSchema>;\n\n/**\n * String union for all chat turn types.\n */\nexport type ChatTurnType = ChatTurn['type'];\n\n/**\n * ChatTurn base type with unioned type field. The most generic, \"all\" type.\n */\nexport type ChatTurnUnion = ChatTurnBase & { type: ChatTurnType };\n"],"mappings":"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","names":["_isArguments","contains","keys","pad","_toISOString","mapObjIndexed","z","z","z","z","z","nextMessage"]}