{"version":3,"sources":["../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/trace/suppress-tracing.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/baggage/constants.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/baggage/utils.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/baggage/propagation/W3CBaggagePropagator.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/common/anchored-clock.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/common/attributes.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/common/logging-error-handler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/common/global-error-handler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/utils/sampling.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/utils/environment.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/platform/node/environment.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/platform/node/globalThis.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/common/hex-to-binary.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/platform/node/hex-to-base64.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/platform/node/RandomIdGenerator.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/platform/node/performance.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/version.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/platform/node/sdk-info.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/platform/node/timer-util.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/platform/node/index.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/platform/index.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/common/time.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/common/types.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/ExportResult.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/propagation/composite.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/internal/validators.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/trace/TraceState.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/trace/W3CTraceContextPropagator.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/trace/IdGenerator.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/trace/rpc-metadata.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOffSampler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOnSampler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/trace/sampler/ParentBasedSampler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/trace/sampler/TraceIdRatioBasedSampler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/utils/merge.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/utils/timeout.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/utils/wrap.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/utils/promise.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/utils/callback.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.24.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/core/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-exporter-base/src/util.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-exporter-base/src/OTLPExporterBase.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/types.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-exporter-base/src/types.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/util.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/OTLPExporterNodeBase.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-exporter-base/src/index.ts","../../../node_modules/.pnpm/@protobufjs+aspromise@1.1.2/node_modules/@protobufjs/aspromise/index.js","../../../node_modules/.pnpm/@protobufjs+base64@1.1.2/node_modules/@protobufjs/base64/index.js","../../../node_modules/.pnpm/@protobufjs+eventemitter@1.1.0/node_modules/@protobufjs/eventemitter/index.js","../../../node_modules/.pnpm/@protobufjs+float@1.0.2/node_modules/@protobufjs/float/index.js","../../../node_modules/.pnpm/@protobufjs+inquire@1.1.0/node_modules/@protobufjs/inquire/index.js","../../../node_modules/.pnpm/@protobufjs+utf8@1.1.0/node_modules/@protobufjs/utf8/index.js","../../../node_modules/.pnpm/@protobufjs+pool@1.1.0/node_modules/@protobufjs/pool/index.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/util/longbits.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/util/minimal.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/writer.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/writer_buffer.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/reader.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/reader_buffer.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/rpc/service.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/rpc.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/roots.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/src/index-minimal.js","../../../node_modules/.pnpm/protobufjs@7.2.6/node_modules/protobufjs/minimal.js","../../../node_modules/.pnpm/@opentelemetry+otlp-proto-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-proto-exporter-base/src/generated/root.js","../../../node_modules/.pnpm/@opentelemetry+otlp-proto-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-proto-exporter-base/src/platform/types.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-proto-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-proto-exporter-base/src/platform/util.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-proto-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-proto-exporter-base/src/platform/node/util.ts","../node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err-helpers.js","../node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err-proto.js","../node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err.js","../node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err-with-cause.js","../node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/req.js","../node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/res.js","../node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/index.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/caller.js","../node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/validator.js","../node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/rx.js","../node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/parse.js","../node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/redactor.js","../node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/modifiers.js","../node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/restorer.js","../node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/state.js","../node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/index.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/symbols.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/redaction.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/time.js","../node_modules/.pnpm/quick-format-unescaped@4.0.4/node_modules/quick-format-unescaped/index.js","../node_modules/.pnpm/atomic-sleep@1.0.0/node_modules/atomic-sleep/index.js","../node_modules/.pnpm/sonic-boom@4.0.1/node_modules/sonic-boom/index.js","../node_modules/.pnpm/on-exit-leak-free@2.1.2/node_modules/on-exit-leak-free/index.js","../node_modules/.pnpm/thread-stream@3.0.0/node_modules/thread-stream/package.json","../node_modules/.pnpm/thread-stream@3.0.0/node_modules/thread-stream/lib/wait.js","../node_modules/.pnpm/thread-stream@3.0.0/node_modules/thread-stream/lib/indexes.js","../node_modules/.pnpm/thread-stream@3.0.0/node_modules/thread-stream/index.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/transport.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/tools.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/constants.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/levels.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/meta.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/proto.js","../node_modules/.pnpm/safe-stable-stringify@2.4.3/node_modules/safe-stable-stringify/index.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/lib/multistream.js","../node_modules/.pnpm/pino@9.1.0/node_modules/pino/pino.js","../src/index.ts","../src/utils.ts","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_isPlaceholder.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_curry1.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_curry2.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_isArray.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_has.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_isArguments.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/keys.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_toISOString.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_arrayReduce.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_isInteger.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/internal/_objectAssign.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/mapObjIndexed.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/mergeAll.js","../../../node_modules/.pnpm/ramda@0.29.0/node_modules/ramda/es/trim.js","../src/clients/function-client.ts","../src/clients/workflow-client.ts","../src/clients/workflow-schemas.ts","../src/types/task-types.ts","../src/types/workflow-types.ts","../src/types/chat-types.ts","../src/instrumentation/index.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-logs-otlp-proto@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/exporter-logs-otlp-proto/src/platform/node/OTLPLogExporter.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-proto-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-proto-exporter-base/src/platform/node/OTLPProtoExporterNodeBase.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-proto-exporter-base@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-proto-exporter-base/src/platform/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-transformer/src/common/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-transformer/src/common/internal.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-transformer/src/resource/internal.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/otlp-transformer/src/logs/index.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-logs-otlp-proto@0.51.1_@opentelemetry+api@1.8.0/node_modules/@opentelemetry/exporter-logs-otlp-proto/src/version.ts","../src/instrumentation/utils.ts","../src/instrumentation/console.ts","../src/instrumentation/traceloop.ts","../src/instrumentation/trace.ts","../src/instrumentation/pino.ts","../src/instrumentation/pino-http.ts","../src/instrumentation/trpc.ts","../src/instrumentation/fastify.ts","../src/instrumentation/aws-api-gateway.ts","../src/instrumentation/aws-lambda.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey } from '@opentelemetry/api';\n\nconst SUPPRESS_TRACING_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key SUPPRESS_TRACING'\n);\n\nexport function suppressTracing(context: Context): Context {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\n\nexport function unsuppressTracing(context: Context): Context {\n  return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\n\nexport function isTracingSuppressed(context: Context): boolean {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Baggage,\n  BaggageEntryMetadata,\n  baggageEntryMetadataFromString,\n} from '@opentelemetry/api';\nimport {\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_PROPERTIES_SEPARATOR,\n  BAGGAGE_KEY_PAIR_SEPARATOR,\n  BAGGAGE_MAX_TOTAL_LENGTH,\n} from './constants';\n\ntype ParsedBaggageKeyValue = {\n  key: string;\n  value: string;\n  metadata: BaggageEntryMetadata | undefined;\n};\n\nexport function serializeKeyPairs(keyPairs: string[]): string {\n  return keyPairs.reduce((hValue: string, current: string) => {\n    const value = `${hValue}${\n      hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''\n    }${current}`;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\n\nexport function getKeyPairs(baggage: Baggage): string[] {\n  return baggage.getAllEntries().map(([key, value]) => {\n    let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n\n    return entry;\n  });\n}\n\nexport function parsePairKeyValue(\n  entry: string\n): ParsedBaggageKeyValue | undefined {\n  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  const keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0) return;\n  const key = decodeURIComponent(\n    keyPairPart.substring(0, separatorIndex).trim()\n  );\n  const value = decodeURIComponent(\n    keyPairPart.substring(separatorIndex + 1).trim()\n  );\n  let metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(\n      valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR)\n    );\n  }\n  return { key, value, metadata };\n}\n\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(\n  value?: string\n): Record<string, string> {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value\n    .split(BAGGAGE_ITEMS_SEPARATOR)\n    .map(entry => {\n      return parsePairKeyValue(entry);\n    })\n    .filter(keyPair => keyPair !== undefined && keyPair.value.length > 0)\n    .reduce<Record<string, string>>((headers, keyPair) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      headers[keyPair!.key] = keyPair!.value;\n      return headers;\n    }, {});\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Clock {\n  /**\n   * Return the current time in milliseconds from some epoch such as the Unix epoch or process start\n   */\n  now(): number;\n}\n\n/**\n * A utility for returning wall times anchored to a given point in time. Wall time measurements will\n * not be taken from the system, but instead are computed by adding a monotonic clock time\n * to the anchor point.\n *\n * This is needed because the system time can change and result in unexpected situations like\n * spans ending before they are started. Creating an anchored clock for each local root span\n * ensures that span timings and durations are accurate while preventing span times from drifting\n * too far from the system clock.\n *\n * Only creating an anchored clock once per local trace ensures span times are correct relative\n * to each other. For example, a child span will never have a start time before its parent even\n * if the system clock is corrected during the local trace.\n *\n * Heavily inspired by the OTel Java anchored clock\n * https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/AnchoredClock.java\n */\nexport class AnchoredClock implements Clock {\n  private _monotonicClock: Clock;\n  private _epochMillis: number;\n  private _performanceMillis: number;\n\n  /**\n   * Create a new AnchoredClock anchored to the current time returned by systemClock.\n   *\n   * @param systemClock should be a clock that returns the number of milliseconds since January 1 1970 such as Date\n   * @param monotonicClock should be a clock that counts milliseconds monotonically such as window.performance or perf_hooks.performance\n   */\n  public constructor(systemClock: Clock, monotonicClock: Clock) {\n    this._monotonicClock = monotonicClock;\n    this._epochMillis = systemClock.now();\n    this._performanceMillis = monotonicClock.now();\n  }\n\n  /**\n   * Returns the current time by adding the number of milliseconds since the\n   * AnchoredClock was created to the creation epoch time\n   */\n  public now(): number {\n    const delta = this._monotonicClock.now() - this._performanceMillis;\n    return this._epochMillis + delta;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, SpanAttributeValue, SpanAttributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): SpanAttributes {\n  const out: SpanAttributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is SpanAttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Exception } from '@opentelemetry/api';\nimport { ErrorHandler } from './types';\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler(): ErrorHandler {\n  return (ex: Exception) => {\n    diag.error(stringifyException(ex));\n  };\n}\n\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex: Exception | string): string {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex: Exception): Record<string, string> {\n  const result = {} as Record<string, string>;\n  let current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(propertyName => {\n      if (result[propertyName]) return;\n      const value = current[propertyName as keyof typeof current];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\nimport { loggingErrorHandler } from './logging-error-handler';\nimport { ErrorHandler } from './types';\n\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler: ErrorHandler): void {\n  delegateHandler = handler;\n}\n\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex: Exception): void {\n  try {\n    delegateHandler(ex);\n  } catch {} // eslint-disable-line no-empty\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum TracesSamplerValues {\n  AlwaysOff = 'always_off',\n  AlwaysOn = 'always_on',\n  ParentBasedAlwaysOff = 'parentbased_always_off',\n  ParentBasedAlwaysOn = 'parentbased_always_on',\n  ParentBasedTraceIdRatio = 'parentbased_traceidratio',\n  TraceIdRatio = 'traceidratio',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\n\nconst DEFAULT_LIST_SEPARATOR = ',';\n\n/**\n * Environment interface to define all names\n */\n\nconst ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'] as const;\n\ntype ENVIRONMENT_BOOLEANS = {\n  [K in (typeof ENVIRONMENT_BOOLEAN_KEYS)[number]]?: boolean;\n};\n\nfunction isEnvVarABoolean(key: unknown): key is keyof ENVIRONMENT_BOOLEANS {\n  return (\n    ENVIRONMENT_BOOLEAN_KEYS.indexOf(key as keyof ENVIRONMENT_BOOLEANS) > -1\n  );\n}\n\nconst ENVIRONMENT_NUMBERS_KEYS = [\n  'OTEL_BSP_EXPORT_TIMEOUT',\n  'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BSP_MAX_QUEUE_SIZE',\n  'OTEL_BSP_SCHEDULE_DELAY',\n  'OTEL_BLRP_EXPORT_TIMEOUT',\n  'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BLRP_MAX_QUEUE_SIZE',\n  'OTEL_BLRP_SCHEDULE_DELAY',\n  'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_LINK_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n  'OTEL_EXPORTER_OTLP_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n  'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n] as const;\n\ntype ENVIRONMENT_NUMBERS = {\n  [K in (typeof ENVIRONMENT_NUMBERS_KEYS)[number]]?: number;\n};\n\nfunction isEnvVarANumber(key: unknown): key is keyof ENVIRONMENT_NUMBERS {\n  return (\n    ENVIRONMENT_NUMBERS_KEYS.indexOf(key as keyof ENVIRONMENT_NUMBERS) > -1\n  );\n}\n\nconst ENVIRONMENT_LISTS_KEYS = [\n  'OTEL_NO_PATCH_MODULES',\n  'OTEL_PROPAGATORS',\n] as const;\n\ntype ENVIRONMENT_LISTS = {\n  [K in (typeof ENVIRONMENT_LISTS_KEYS)[number]]?: string[];\n};\n\nfunction isEnvVarAList(key: unknown): key is keyof ENVIRONMENT_LISTS {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key as keyof ENVIRONMENT_LISTS) > -1;\n}\n\nexport type ENVIRONMENT = {\n  CONTAINER_NAME?: string;\n  ECS_CONTAINER_METADATA_URI_V4?: string;\n  ECS_CONTAINER_METADATA_URI?: string;\n  HOSTNAME?: string;\n  KUBERNETES_SERVICE_HOST?: string;\n  NAMESPACE?: string;\n  OTEL_EXPORTER_JAEGER_AGENT_HOST?: string;\n  OTEL_EXPORTER_JAEGER_ENDPOINT?: string;\n  OTEL_EXPORTER_JAEGER_PASSWORD?: string;\n  OTEL_EXPORTER_JAEGER_USER?: string;\n  OTEL_EXPORTER_OTLP_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS?: string;\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT?: string;\n  OTEL_LOG_LEVEL?: DiagLogLevel;\n  OTEL_RESOURCE_ATTRIBUTES?: string;\n  OTEL_SERVICE_NAME?: string;\n  OTEL_TRACES_EXPORTER?: string;\n  OTEL_TRACES_SAMPLER_ARG?: string;\n  OTEL_TRACES_SAMPLER?: string;\n  OTEL_LOGS_EXPORTER?: string;\n  OTEL_EXPORTER_OTLP_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE?: string;\n} & ENVIRONMENT_BOOLEANS &\n  ENVIRONMENT_NUMBERS &\n  ENVIRONMENT_LISTS;\n\nexport type RAW_ENVIRONMENT = {\n  [key: string]: string | number | undefined | string[];\n};\n\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n\n/**\n * Default environment variables\n */\nexport const DEFAULT_ENVIRONMENT: Required<ENVIRONMENT> = {\n  OTEL_SDK_DISABLED: false,\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n  OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BLRP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT:\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  OTEL_TRACES_EXPORTER: '',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_LOGS_EXPORTER: '',\n  OTEL_EXPORTER_OTLP_INSECURE: '',\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(\n  key: keyof ENVIRONMENT_BOOLEANS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  if (typeof values[key] === 'undefined') {\n    return;\n  }\n\n  const value = String(values[key]);\n  // support case-insensitive \"true\"\n  environment[key] = value.toLowerCase() === 'true';\n}\n\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(\n  name: keyof ENVIRONMENT_NUMBERS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT,\n  min = -Infinity,\n  max = Infinity\n) {\n  if (typeof values[name] !== 'undefined') {\n    const value = Number(values[name] as string);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(\n  name: keyof ENVIRONMENT_LISTS,\n  output: ENVIRONMENT,\n  input: RAW_ENVIRONMENT,\n  separator = DEFAULT_LIST_SEPARATOR\n) {\n  const givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(v => v.trim());\n  }\n}\n\n// The support string -> DiagLogLevel mappings\nconst logLevelMap: { [key: string]: DiagLogLevel } = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(\n  key: keyof ENVIRONMENT,\n  environment: RAW_ENVIRONMENT | ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  const value = values[key];\n  if (typeof value === 'string') {\n    const theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values: RAW_ENVIRONMENT): ENVIRONMENT {\n  const environment: ENVIRONMENT = {};\n\n  for (const env in DEFAULT_ENVIRONMENT) {\n    const key = env as keyof ENVIRONMENT;\n\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          const value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n\n  return environment;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_ENVIRONMENT,\n  ENVIRONMENT,\n  RAW_ENVIRONMENT,\n  parseEnvironment,\n} from '../../utils/environment';\n\n/**\n * Gets the environment variables\n */\nexport function getEnv(): Required<ENVIRONMENT> {\n  const processEnv = parseEnvironment(process.env as RAW_ENVIRONMENT);\n  return Object.assign({}, DEFAULT_ENVIRONMENT, processEnv);\n}\n\nexport function getEnvWithoutDefaults(): ENVIRONMENT {\n  return parseEnvironment(process.env as RAW_ENVIRONMENT);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction intValue(charCode: number): number {\n  // 0-9\n  if (charCode >= 48 && charCode <= 57) {\n    return charCode - 48;\n  }\n\n  // a-f\n  if (charCode >= 97 && charCode <= 102) {\n    return charCode - 87;\n  }\n\n  // A-F\n  return charCode - 55;\n}\n\nexport function hexToBinary(hexStr: string): Uint8Array {\n  const buf = new Uint8Array(hexStr.length / 2);\n  let offset = 0;\n\n  for (let i = 0; i < hexStr.length; i += 2) {\n    const hi = intValue(hexStr.charCodeAt(i));\n    const lo = intValue(hexStr.charCodeAt(i + 1));\n    buf[offset++] = (hi << 4) | lo;\n  }\n\n  return buf;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { hexToBinary } from '../../common/hex-to-binary';\n\nexport function hexToBase64(hexStr: string): string {\n  return Buffer.from(hexToBinary(hexStr)).toString('base64');\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../trace/IdGenerator';\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { performance } from 'perf_hooks';\n\nexport const otperformance = performance;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.24.1';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  TelemetrySdkLanguageValues,\n  SemanticResourceAttributes,\n} from '@opentelemetry/semantic-conventions';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [SemanticResourceAttributes.TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'node',\n  [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n    TelemetrySdkLanguageValues.NODEJS,\n  [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]: VERSION,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(timer: NodeJS.Timer): void {\n  timer.unref();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { getEnvWithoutDefaults, getEnv } from './environment';\nexport * from './globalThis';\nexport * from './hex-to-base64';\nexport * from './RandomIdGenerator';\nexport * from './performance';\nexport * from './sdk-info';\nexport * from './timer-util';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { otperformance as performance } from '../platform';\nimport { TimeOriginLegacy } from './types';\n\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis: number): api.HrTime {\n  const epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  const seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\n\nexport function getTimeOrigin(): number {\n  let timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    const perf: TimeOriginLegacy = performance as unknown as TimeOriginLegacy;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow?: number): api.HrTime {\n  const timeOrigin = millisToHrTime(getTimeOrigin());\n  const now = millisToHrTime(\n    typeof performanceNow === 'number' ? performanceNow : performance.now()\n  );\n\n  return addHrTimes(timeOrigin, now);\n}\n\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time: api.TimeInput): api.HrTime {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time as api.HrTime;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return millisToHrTime(time);\n    }\n  } else if (time instanceof Date) {\n    return millisToHrTime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(\n  startTime: api.HrTime,\n  endTime: api.HrTime\n): api.HrTime {\n  let seconds = endTime[0] - startTime[0];\n  let nanos = endTime[1] - startTime[1];\n\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n\n  return [seconds, nanos];\n}\n\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time: api.HrTime): string {\n  const precision = NANOSECOND_DIGITS;\n  const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n  const nanoString = tmp.substr(tmp.length - precision - 1);\n  const date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time: api.HrTime): number {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time: api.HrTime): number {\n  return time[0] * 1e3 + time[1] / 1e6;\n}\n\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time: api.HrTime): number {\n  return time[0] * 1e6 + time[1] / 1e3;\n}\n\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value: unknown): value is api.HrTime {\n  return (\n    Array.isArray(value) &&\n    value.length === 2 &&\n    typeof value[0] === 'number' &&\n    typeof value[1] === 'number'\n  );\n}\n\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(\n  value: unknown\n): value is api.HrTime | number | Date {\n  return (\n    isTimeInputHrTime(value) ||\n    typeof value === 'number' ||\n    value instanceof Date\n  );\n}\n\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1: api.HrTime, time2: api.HrTime): api.HrTime {\n  const out = [time1[0] + time2[0], time1[1] + time2[1]] as api.HrTime;\n\n  // Nanoseconds\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n\n  return out;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\n\n/**\n * This interface defines a fallback to read a timeOrigin when it is not available on performance.timeOrigin,\n * this happens for example on Safari Mac\n * then the timeOrigin is taken from fetchStart - which is the closest to timeOrigin\n */\nexport interface TimeOriginLegacy {\n  timing: {\n    fetchStart: number;\n  };\n}\n\n/**\n * This interface defines the params that are be added to the wrapped function\n * using the \"shimmer.wrap\"\n */\nexport interface ShimWrapped extends Function {\n  __wrapped: boolean;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  __unwrap: Function;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  __original: Function;\n}\n\n/**\n * An instrumentation library consists of the name and optional version\n * used to obtain a tracer or meter from a provider. This metadata is made\n * available on ReadableSpan and MetricRecord for use by the export pipeline.\n * @deprecated Use {@link InstrumentationScope} instead.\n */\nexport interface InstrumentationLibrary {\n  readonly name: string;\n  readonly version?: string;\n  readonly schemaUrl?: string;\n}\n\n/**\n * An instrumentation scope consists of the name and optional version\n * used to obtain a tracer or meter from a provider. This metadata is made\n * available on ReadableSpan and MetricRecord for use by the export pipeline.\n */\nexport interface InstrumentationScope {\n  readonly name: string;\n  readonly version?: string;\n  readonly schemaUrl?: string;\n}\n\n/** Defines an error handler function */\nexport type ErrorHandler = (ex: Exception) => void;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ExportResult {\n  code: ExportResultCode;\n  error?: Error;\n}\n\nexport enum ExportResultCode {\n  SUCCESS,\n  FAILED,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  diag,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\n/** Configuration object for composite propagator */\nexport interface CompositePropagatorConfig {\n  /**\n   * List of propagators to run. Propagators run in the\n   * list order. If a propagator later in the list writes the same context\n   * key as a propagator earlier in the list, the later on will \"win\".\n   */\n  propagators?: TextMapPropagator[];\n}\n\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator implements TextMapPropagator {\n  private readonly _propagators: TextMapPropagator[];\n  private readonly _fields: string[];\n\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  constructor(config: CompositePropagatorConfig = {}) {\n    this._propagators = config.propagators ?? [];\n\n    this._fields = Array.from(\n      new Set(\n        this._propagators\n          // older propagators may not have fields function, null check to be sure\n          .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n          .reduce((x, y) => x.concat(y), [])\n      )\n    );\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    for (const propagator of this._propagators) {\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    return this._propagators.reduce((ctx, propagator) => {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n      return ctx;\n    }, context);\n  }\n\n  fields(): string[] {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { validateKey, validateValue } from '../internal/validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState implements api.TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceState {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceState {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceState {\n    const traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\n\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\n\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(\n  `^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`\n);\n\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent: string): SpanContext | null {\n  const match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match) return null;\n\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (match[1] === '00' && match[5]) return null;\n\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16),\n  };\n}\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      isTracingSuppressed(context) ||\n      !isSpanContextValid(spanContext)\n    )\n      return;\n\n    const traceParent = `${VERSION}-${spanContext.traceId}-${\n      spanContext.spanId\n    }-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(\n        carrier,\n        TRACE_STATE_HEADER,\n        spanContext.traceState.serialize()\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    const traceParent = Array.isArray(traceParentHeader)\n      ? traceParentHeader[0]\n      : traceParentHeader;\n    if (typeof traceParent !== 'string') return context;\n    const spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n\n    spanContext.isRemote = true;\n\n    const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      const state = Array.isArray(traceStateHeader)\n        ? traceStateHeader.join(',')\n        : traceStateHeader;\n      spanContext.traceState = new TraceState(\n        typeof state === 'string' ? state : undefined\n      );\n    }\n    return trace.setSpanContext(context, spanContext);\n  }\n\n  fields(): string[] {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * IdGenerator provides an interface for generating Trace Id and Span Id.\n */\nexport interface IdGenerator {\n  /** Returns a trace ID composed of 32 lowercase hex characters. */\n  generateTraceId(): string;\n  /** Returns a span ID composed of 16 lowercase hex characters. */\n  generateSpanId(): string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey, Span } from '@opentelemetry/api';\n\nconst RPC_METADATA_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key RPC_METADATA'\n);\n\nexport enum RPCType {\n  HTTP = 'http',\n}\n\ntype HTTPMetadata = {\n  type: RPCType.HTTP;\n  route?: string;\n  span: Span;\n};\n\n/**\n * Allows for future rpc metadata to be used with this mechanism\n */\nexport type RPCMetadata = HTTPMetadata;\n\nexport function setRPCMetadata(context: Context, meta: RPCMetadata): Context {\n  return context.setValue(RPC_METADATA_KEY, meta);\n}\n\nexport function deleteRPCMetadata(context: Context): Context {\n  return context.deleteValue(RPC_METADATA_KEY);\n}\n\nexport function getRPCMetadata(context: Context): RPCMetadata | undefined {\n  return context.getValue(RPC_METADATA_KEY) as RPCMetadata | undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples no traces.\n */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples all traces.\n */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  Sampler,\n  SamplingResult,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sampler,\n  SamplingDecision,\n  SamplingResult,\n  isValidTraceId,\n} from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples a given fraction of traces based of trace id deterministically.\n */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { isPlainObject } from './lodash.merge';\n\nconst MAX_LEVEL = 20;\n\ninterface ObjectInto {\n  obj: any;\n  key: string;\n}\n\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args: any[]): any {\n  let result: any = args.shift();\n  const objects: WeakMap<any, ObjectInto[]> | undefined = new WeakMap<\n    any,\n    ObjectInto[]\n  >();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n\n  return result;\n}\n\nfunction takeValue(value: any): any {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\n\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(\n  one: any,\n  two: any,\n  level = 0,\n  objects: WeakMap<any, ObjectInto[]>\n): any {\n  let result: any;\n  if (level > MAX_LEVEL) {\n    return undefined;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (let i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      const keys = Object.keys(two);\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      const keys = Object.keys(two);\n\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        const twoValue = two[key];\n\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === 'undefined') {\n            delete result[key];\n          } else {\n            // result[key] = takeValue(twoValue);\n            result[key] = twoValue;\n          }\n        } else {\n          const obj1 = result[key];\n          const obj2 = twoValue;\n\n          if (\n            wasObjectReferenced(one, key, objects) ||\n            wasObjectReferenced(two, key, objects)\n          ) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              const arr1 = objects.get(obj1) || [];\n              const arr2 = objects.get(obj2) || [];\n              arr1.push({ obj: one, key });\n              arr2.push({ obj: two, key });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n\n            result[key] = mergeTwoObjects(\n              result[key],\n              twoValue,\n              level,\n              objects\n            );\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(\n  obj: any,\n  key: string,\n  objects: WeakMap<any, ObjectInto[]>\n): boolean {\n  const arr = objects.get(obj[key]) || [];\n  for (let i = 0, j = arr.length; i < j; i++) {\n    const info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value);\n}\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\nfunction isObject(value: any): boolean {\n  return (\n    !isPrimitive(value) &&\n    !isArray(value) &&\n    !isFunction(value) &&\n    typeof value === 'object'\n  );\n}\n\nfunction isPrimitive(value: any): boolean {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'undefined' ||\n    value instanceof Date ||\n    value instanceof RegExp ||\n    value === null\n  );\n}\n\nfunction shouldMerge(one: any, two: any): boolean {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n\n  return true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from '../common/types';\n\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve!: (val: T) => void;\n  private _reject!: (error: unknown) => void;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(val: T) {\n    this._resolve(val);\n  }\n\n  reject(err: unknown) {\n    this._reject(err);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './promise';\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture<\n  R,\n  This = unknown,\n  T extends (this: This, ...args: unknown[]) => R = () => R,\n> {\n  private _isCalled = false;\n  private _deferred = new Deferred<R>();\n  constructor(\n    private _callback: T,\n    private _that: This\n  ) {}\n\n  get isCalled() {\n    return this._isCalled;\n  }\n\n  get promise() {\n    return this._deferred.promise;\n  }\n\n  call(...args: Parameters<T>): Promise<R> {\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve(this._callback.call(this._that, ...args)).then(\n          val => this._deferred.resolve(val),\n          err => this._deferred.reject(err)\n        );\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './baggage/propagation/W3CBaggagePropagator';\nexport * from './common/anchored-clock';\nexport * from './common/attributes';\nexport * from './common/global-error-handler';\nexport * from './common/logging-error-handler';\nexport * from './common/time';\nexport * from './common/types';\nexport * from './common/hex-to-binary';\nexport * from './ExportResult';\nexport * as baggageUtils from './baggage/utils';\nexport * from './platform';\nexport * from './propagation/composite';\nexport * from './trace/W3CTraceContextPropagator';\nexport * from './trace/IdGenerator';\nexport * from './trace/rpc-metadata';\nexport * from './trace/sampler/AlwaysOffSampler';\nexport * from './trace/sampler/AlwaysOnSampler';\nexport * from './trace/sampler/ParentBasedSampler';\nexport * from './trace/sampler/TraceIdRatioBasedSampler';\nexport * from './trace/suppress-tracing';\nexport * from './trace/TraceState';\nexport * from './utils/environment';\nexport * from './utils/merge';\nexport * from './utils/sampling';\nexport * from './utils/timeout';\nexport * from './utils/url';\nexport * from './utils/wrap';\nexport * from './utils/callback';\nexport * from './version';\nimport { _export } from './internal/exporter';\nexport const internal = {\n  _export,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\n\nconst DEFAULT_TRACE_TIMEOUT = 10000;\nexport const DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport const DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport const DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport const DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(\n  partialHeaders: Partial<Record<string, unknown>> = {}\n): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(partialHeaders).forEach(([key, value]) => {\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(\n        `Header \"${key}\" has invalid value (${value}) and will be ignored`\n      );\n    }\n  });\n  return headers;\n}\n\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url: string, path: string): string {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch {\n    diag.warn(`Could not parse export URL: '${url}'`);\n    return url;\n  }\n}\n\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(\n  timeoutMillis: number | undefined\n): number {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\n\nfunction getExporterTimeoutFromEnv(): number {\n  const definedTimeout = Number(\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT ??\n      getEnv().OTEL_EXPORTER_OTLP_TIMEOUT\n  );\n\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(\n  timeout: number,\n  defaultTimeout: number\n): number {\n  diag.warn('Timeout must be greater than 0', timeout);\n\n  return defaultTimeout;\n}\n\nexport function isExportRetryable(statusCode: number): boolean {\n  const retryCodes = [429, 502, 503, 504];\n\n  return retryCodes.includes(statusCode);\n}\n\nexport function parseRetryAfterToMills(retryAfter?: string | null): number {\n  if (retryAfter == null) {\n    return -1;\n  }\n  const seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1000 : -1;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n  const delay = new Date(retryAfter).getTime() - Date.now();\n\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResult,\n  ExportResultCode,\n  BindOnceFuture,\n} from '@opentelemetry/core';\nimport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nimport { configureExporterTimeout } from './util';\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPExporterBase<\n  T extends OTLPExporterConfigBase,\n  ExportItem,\n  ServiceRequest,\n> {\n  public readonly url: string;\n  public readonly hostname: string | undefined;\n  public readonly timeoutMillis: number;\n  protected _concurrencyLimit: number;\n  protected _sendingPromises: Promise<unknown>[] = [];\n  protected _shutdownOnce: BindOnceFuture<void>;\n\n  /**\n   * @param config\n   */\n  constructor(config: T = {} as T) {\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    this._concurrencyLimit =\n      typeof config.concurrencyLimit === 'number'\n        ? config.concurrencyLimit\n        : 30;\n\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n\n    // platform dependent\n    this.onInit(config);\n  }\n\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  export(\n    items: ExportItem[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown'),\n      });\n      return;\n    }\n\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached'),\n      });\n      return;\n    }\n\n    this._export(items)\n      .then(() => {\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      })\n      .catch((error: ExportServiceError) => {\n        resultCallback({ code: ExportResultCode.FAILED, error });\n      });\n  }\n\n  private _export(items: ExportItem[]): Promise<unknown> {\n    return new Promise<void>((resolve, reject) => {\n      try {\n        diag.debug('items to be sent', items);\n        this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.all(this._sendingPromises).then(() => {\n      /** ignore resolved values */\n    });\n  }\n\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  private _shutdown(): Promise<void> {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return this.forceFlush();\n  }\n\n  abstract onShutdown(): void;\n  abstract onInit(config: T): void;\n  abstract send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void;\n  abstract getDefaultUrl(config: T): string;\n  abstract convert(objects: ExportItem[]): ServiceRequest;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type * as http from 'http';\nimport type * as https from 'https';\n\nimport { OTLPExporterConfigBase } from '../../types';\n\n/**\n * Collector Exporter node base config\n */\nexport interface OTLPExporterNodeConfigBase extends OTLPExporterConfigBase {\n  keepAlive?: boolean;\n  compression?: CompressionAlgorithm;\n  httpAgentOptions?: http.AgentOptions | https.AgentOptions;\n}\n\nexport enum CompressionAlgorithm {\n  NONE = 'none',\n  GZIP = 'gzip',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Interface for handling error\n */\nexport class OTLPExporterError extends Error {\n  readonly code?: number;\n  override readonly name: string = 'OTLPExporterError';\n  readonly data?: string;\n\n  constructor(message?: string, code?: number, data?: string) {\n    super(message);\n    this.data = data;\n    this.code = code;\n  }\n}\n\n/**\n * Interface for handling export service errors\n */\nexport interface ExportServiceError {\n  name: string;\n  code: number;\n  details: string;\n  metadata: { [key: string]: unknown };\n  message: string;\n  stack: string;\n}\n\n/**\n * Collector Exporter base config\n */\nexport interface OTLPExporterConfigBase {\n  headers?: Partial<Record<string, unknown>>;\n  hostname?: string;\n  url?: string;\n  concurrencyLimit?: number;\n  /** Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms. */\n  timeoutMillis?: number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as url from 'url';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as zlib from 'zlib';\nimport { Readable } from 'stream';\nimport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nimport { OTLPExporterNodeConfigBase } from '.';\nimport { diag } from '@opentelemetry/api';\nimport { CompressionAlgorithm } from './types';\nimport { getEnv } from '@opentelemetry/core';\nimport { OTLPExporterError } from '../../types';\nimport {\n  DEFAULT_EXPORT_MAX_ATTEMPTS,\n  DEFAULT_EXPORT_INITIAL_BACKOFF,\n  DEFAULT_EXPORT_BACKOFF_MULTIPLIER,\n  DEFAULT_EXPORT_MAX_BACKOFF,\n  isExportRetryable,\n  parseRetryAfterToMills,\n} from '../../util';\n\n/**\n * Sends data using http\n * @param collector\n * @param data\n * @param contentType\n * @param onSuccess\n * @param onError\n */\nexport function sendWithHttp<ExportItem, ServiceRequest>(\n  collector: OTLPExporterNodeBase<ExportItem, ServiceRequest>,\n  data: string | Buffer,\n  contentType: string,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  const exporterTimeout = collector.timeoutMillis;\n  const parsedUrl = new url.URL(collector.url);\n  const nodeVersion = Number(process.versions.node.split('.')[0]);\n  let retryTimer: ReturnType<typeof setTimeout>;\n  let req: http.ClientRequest;\n  let reqIsDestroyed = false;\n\n  const exporterTimer = setTimeout(() => {\n    clearTimeout(retryTimer);\n    reqIsDestroyed = true;\n\n    if (req.destroyed) {\n      const err = new OTLPExporterError('Request Timeout');\n      onError(err);\n    } else {\n      // req.abort() was deprecated since v14\n      nodeVersion >= 14 ? req.destroy() : req.abort();\n    }\n  }, exporterTimeout);\n\n  const options: http.RequestOptions | https.RequestOptions = {\n    hostname: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname,\n    method: 'POST',\n    headers: {\n      'Content-Type': contentType,\n      ...collector.headers,\n    },\n    agent: collector.agent,\n  };\n\n  const request = parsedUrl.protocol === 'http:' ? http.request : https.request;\n\n  const sendWithRetry = (\n    retries = DEFAULT_EXPORT_MAX_ATTEMPTS,\n    minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF\n  ) => {\n    req = request(options, (res: http.IncomingMessage) => {\n      let responseData = '';\n      res.on('data', chunk => (responseData += chunk));\n\n      res.on('aborted', () => {\n        if (reqIsDestroyed) {\n          const err = new OTLPExporterError('Request Timeout');\n          onError(err);\n        }\n      });\n\n      res.on('end', () => {\n        if (reqIsDestroyed === false) {\n          if (res.statusCode && res.statusCode < 299) {\n            diag.debug(`statusCode: ${res.statusCode}`, responseData);\n            onSuccess();\n            // clear all timers since request was completed and promise was resolved\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          } else if (\n            res.statusCode &&\n            isExportRetryable(res.statusCode) &&\n            retries > 0\n          ) {\n            let retryTime: number;\n            minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n\n            // retry after interval specified in Retry-After header\n            if (res.headers['retry-after']) {\n              retryTime = parseRetryAfterToMills(res.headers['retry-after']!);\n            } else {\n              // exponential backoff with jitter\n              retryTime = Math.round(\n                Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) +\n                  minDelay\n              );\n            }\n\n            retryTimer = setTimeout(() => {\n              sendWithRetry(retries - 1, minDelay);\n            }, retryTime);\n          } else {\n            const error = new OTLPExporterError(\n              res.statusMessage,\n              res.statusCode,\n              responseData\n            );\n            onError(error);\n            // clear all timers since request was completed and promise was resolved\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          }\n        }\n      });\n    });\n\n    req.on('error', (error: Error | any) => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout', error.code);\n        onError(err);\n      } else {\n        onError(error);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n\n    req.on('abort', () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n\n    switch (collector.compression) {\n      case CompressionAlgorithm.GZIP: {\n        req.setHeader('Content-Encoding', 'gzip');\n        const dataStream = readableFromBuffer(data);\n        dataStream\n          .on('error', onError)\n          .pipe(zlib.createGzip())\n          .on('error', onError)\n          .pipe(req);\n\n        break;\n      }\n      default:\n        req.end(data);\n        break;\n    }\n  };\n  sendWithRetry();\n}\n\nfunction readableFromBuffer(buff: string | Buffer): Readable {\n  const readable = new Readable();\n  readable.push(buff);\n  readable.push(null);\n\n  return readable;\n}\n\nexport function createHttpAgent(\n  config: OTLPExporterNodeConfigBase\n): http.Agent | https.Agent | undefined {\n  if (config.httpAgentOptions && config.keepAlive === false) {\n    diag.warn('httpAgentOptions is used only when keepAlive is true');\n    return undefined;\n  }\n\n  if (config.keepAlive === false || !config.url) return undefined;\n\n  try {\n    const parsedUrl = new url.URL(config.url as string);\n    const Agent = parsedUrl.protocol === 'http:' ? http.Agent : https.Agent;\n    return new Agent({ keepAlive: true, ...config.httpAgentOptions });\n  } catch (err) {\n    diag.error(\n      `collector exporter failed to create http agent. err: ${err.message}`\n    );\n    return undefined;\n  }\n}\n\nexport function configureCompression(\n  compression: CompressionAlgorithm | undefined\n): CompressionAlgorithm {\n  if (compression) {\n    return compression;\n  } else {\n    const definedCompression =\n      getEnv().OTEL_EXPORTER_OTLP_TRACES_COMPRESSION ||\n      getEnv().OTEL_EXPORTER_OTLP_COMPRESSION;\n    return definedCompression === CompressionAlgorithm.GZIP\n      ? CompressionAlgorithm.GZIP\n      : CompressionAlgorithm.NONE;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as http from 'http';\nimport type * as https from 'https';\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterNodeConfigBase, CompressionAlgorithm } from './types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { createHttpAgent, sendWithHttp, configureCompression } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterNodeBase<\n  ExportItem,\n  ServiceRequest,\n> extends OTLPExporterBase<\n  OTLPExporterNodeConfigBase,\n  ExportItem,\n  ServiceRequest\n> {\n  DEFAULT_HEADERS: Record<string, string> = {};\n  headers: Record<string, string>;\n  agent: http.Agent | https.Agent | undefined;\n  compression: CompressionAlgorithm;\n\n  constructor(config: OTLPExporterNodeConfigBase = {}) {\n    super(config);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if ((config as any).metadata) {\n      diag.warn('Metadata cannot be set when using http');\n    }\n    this.headers = Object.assign(\n      this.DEFAULT_HEADERS,\n      parseHeaders(config.headers),\n      baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_HEADERS)\n    );\n    this.agent = createHttpAgent(config);\n    this.compression = configureCompression(config.compression);\n  }\n\n  onInit(_config: OTLPExporterNodeConfigBase): void {}\n\n  send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    const serviceRequest = this.convert(objects);\n\n    const promise = new Promise<void>((resolve, reject) => {\n      sendWithHttp(\n        this,\n        JSON.stringify(serviceRequest),\n        'application/json',\n        resolve,\n        reject\n      );\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n\n  onShutdown(): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nexport { sendWithHttp, createHttpAgent, configureCompression } from './util';\nexport { OTLPExporterNodeConfigBase, CompressionAlgorithm } from './types';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  OTLPExporterNodeBase,\n  sendWithHttp,\n  createHttpAgent,\n  configureCompression,\n  OTLPExporterNodeConfigBase,\n  CompressionAlgorithm,\n} from './node';\nexport { OTLPExporterBrowserBase, sendWithXhr } from './browser';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './platform';\nexport { OTLPExporterBase } from './OTLPExporterBase';\nexport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nexport {\n  parseHeaders,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n  configureExporterTimeout,\n  invalidTimeout,\n} from './util';\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.opentelemetry = (function() {\n\n    /**\n     * Namespace opentelemetry.\n     * @exports opentelemetry\n     * @namespace\n     */\n    var opentelemetry = {};\n\n    opentelemetry.proto = (function() {\n\n        /**\n         * Namespace proto.\n         * @memberof opentelemetry\n         * @namespace\n         */\n        var proto = {};\n\n        proto.common = (function() {\n\n            /**\n             * Namespace common.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var common = {};\n\n            common.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.common\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.AnyValue = (function() {\n\n                    /**\n                     * Properties of an AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IAnyValue\n                     * @property {string|null} [stringValue] AnyValue stringValue\n                     * @property {boolean|null} [boolValue] AnyValue boolValue\n                     * @property {number|Long|null} [intValue] AnyValue intValue\n                     * @property {number|null} [doubleValue] AnyValue doubleValue\n                     * @property {opentelemetry.proto.common.v1.IArrayValue|null} [arrayValue] AnyValue arrayValue\n                     * @property {opentelemetry.proto.common.v1.IKeyValueList|null} [kvlistValue] AnyValue kvlistValue\n                     * @property {Uint8Array|null} [bytesValue] AnyValue bytesValue\n                     */\n\n                    /**\n                     * Constructs a new AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an AnyValue.\n                     * @implements IAnyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     */\n                    function AnyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * AnyValue stringValue.\n                     * @member {string|null|undefined} stringValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.stringValue = null;\n\n                    /**\n                     * AnyValue boolValue.\n                     * @member {boolean|null|undefined} boolValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.boolValue = null;\n\n                    /**\n                     * AnyValue intValue.\n                     * @member {number|Long|null|undefined} intValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.intValue = null;\n\n                    /**\n                     * AnyValue doubleValue.\n                     * @member {number|null|undefined} doubleValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.doubleValue = null;\n\n                    /**\n                     * AnyValue arrayValue.\n                     * @member {opentelemetry.proto.common.v1.IArrayValue|null|undefined} arrayValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.arrayValue = null;\n\n                    /**\n                     * AnyValue kvlistValue.\n                     * @member {opentelemetry.proto.common.v1.IKeyValueList|null|undefined} kvlistValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.kvlistValue = null;\n\n                    /**\n                     * AnyValue bytesValue.\n                     * @member {Uint8Array|null|undefined} bytesValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.bytesValue = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * AnyValue value.\n                     * @member {\"stringValue\"|\"boolValue\"|\"intValue\"|\"doubleValue\"|\"arrayValue\"|\"kvlistValue\"|\"bytesValue\"|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    Object.defineProperty(AnyValue.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"stringValue\", \"boolValue\", \"intValue\", \"doubleValue\", \"arrayValue\", \"kvlistValue\", \"bytesValue\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new AnyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue instance\n                     */\n                    AnyValue.create = function create(properties) {\n                        return new AnyValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified AnyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.stringValue != null && Object.hasOwnProperty.call(message, \"stringValue\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.stringValue);\n                        if (message.boolValue != null && Object.hasOwnProperty.call(message, \"boolValue\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.boolValue);\n                        if (message.intValue != null && Object.hasOwnProperty.call(message, \"intValue\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.intValue);\n                        if (message.doubleValue != null && Object.hasOwnProperty.call(message, \"doubleValue\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.doubleValue);\n                        if (message.arrayValue != null && Object.hasOwnProperty.call(message, \"arrayValue\"))\n                            $root.opentelemetry.proto.common.v1.ArrayValue.encode(message.arrayValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.kvlistValue != null && Object.hasOwnProperty.call(message, \"kvlistValue\"))\n                            $root.opentelemetry.proto.common.v1.KeyValueList.encode(message.kvlistValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.bytesValue != null && Object.hasOwnProperty.call(message, \"bytesValue\"))\n                            writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.bytesValue);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified AnyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.stringValue = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.boolValue = reader.bool();\n                                    break;\n                                }\n                            case 3: {\n                                    message.intValue = reader.int64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.doubleValue = reader.double();\n                                    break;\n                                }\n                            case 5: {\n                                    message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 6: {\n                                    message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 7: {\n                                    message.bytesValue = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an AnyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    AnyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            properties.value = 1;\n                            if (!$util.isString(message.stringValue))\n                                return \"stringValue: string expected\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.boolValue !== \"boolean\")\n                                return \"boolValue: boolean expected\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.intValue) && !(message.intValue && $util.isInteger(message.intValue.low) && $util.isInteger(message.intValue.high)))\n                                return \"intValue: integer|Long expected\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.doubleValue !== \"number\")\n                                return \"doubleValue: number expected\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.ArrayValue.verify(message.arrayValue);\n                                if (error)\n                                    return \"arrayValue.\" + error;\n                            }\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValueList.verify(message.kvlistValue);\n                                if (error)\n                                    return \"kvlistValue.\" + error;\n                            }\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!(message.bytesValue && typeof message.bytesValue.length === \"number\" || $util.isString(message.bytesValue)))\n                                return \"bytesValue: buffer expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an AnyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     */\n                    AnyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.AnyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        if (object.stringValue != null)\n                            message.stringValue = String(object.stringValue);\n                        if (object.boolValue != null)\n                            message.boolValue = Boolean(object.boolValue);\n                        if (object.intValue != null)\n                            if ($util.Long)\n                                (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;\n                            else if (typeof object.intValue === \"string\")\n                                message.intValue = parseInt(object.intValue, 10);\n                            else if (typeof object.intValue === \"number\")\n                                message.intValue = object.intValue;\n                            else if (typeof object.intValue === \"object\")\n                                message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();\n                        if (object.doubleValue != null)\n                            message.doubleValue = Number(object.doubleValue);\n                        if (object.arrayValue != null) {\n                            if (typeof object.arrayValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.arrayValue: object expected\");\n                            message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.fromObject(object.arrayValue);\n                        }\n                        if (object.kvlistValue != null) {\n                            if (typeof object.kvlistValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.kvlistValue: object expected\");\n                            message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.fromObject(object.kvlistValue);\n                        }\n                        if (object.bytesValue != null)\n                            if (typeof object.bytesValue === \"string\")\n                                $util.base64.decode(object.bytesValue, message.bytesValue = $util.newBuffer($util.base64.length(object.bytesValue)), 0);\n                            else if (object.bytesValue.length >= 0)\n                                message.bytesValue = object.bytesValue;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an AnyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.AnyValue} message AnyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    AnyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            object.stringValue = message.stringValue;\n                            if (options.oneofs)\n                                object.value = \"stringValue\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            object.boolValue = message.boolValue;\n                            if (options.oneofs)\n                                object.value = \"boolValue\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (typeof message.intValue === \"number\")\n                                object.intValue = options.longs === String ? String(message.intValue) : message.intValue;\n                            else\n                                object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;\n                            if (options.oneofs)\n                                object.value = \"intValue\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;\n                            if (options.oneofs)\n                                object.value = \"doubleValue\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            object.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.toObject(message.arrayValue, options);\n                            if (options.oneofs)\n                                object.value = \"arrayValue\";\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            object.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.toObject(message.kvlistValue, options);\n                            if (options.oneofs)\n                                object.value = \"kvlistValue\";\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            object.bytesValue = options.bytes === String ? $util.base64.encode(message.bytesValue, 0, message.bytesValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytesValue) : message.bytesValue;\n                            if (options.oneofs)\n                                object.value = \"bytesValue\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this AnyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    AnyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for AnyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    AnyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.AnyValue\";\n                    };\n\n                    return AnyValue;\n                })();\n\n                v1.ArrayValue = (function() {\n\n                    /**\n                     * Properties of an ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IArrayValue\n                     * @property {Array.<opentelemetry.proto.common.v1.IAnyValue>|null} [values] ArrayValue values\n                     */\n\n                    /**\n                     * Constructs a new ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an ArrayValue.\n                     * @implements IArrayValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     */\n                    function ArrayValue(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ArrayValue values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IAnyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     */\n                    ArrayValue.prototype.values = $util.emptyArray;\n\n                    /**\n                     * Creates a new ArrayValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue instance\n                     */\n                    ArrayValue.create = function create(properties) {\n                        return new ArrayValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ArrayValue message. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.AnyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ArrayValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ArrayValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ArrayValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ArrayValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     */\n                    ArrayValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.ArrayValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ArrayValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.ArrayValue} message ArrayValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ArrayValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ArrayValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ArrayValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ArrayValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ArrayValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.ArrayValue\";\n                    };\n\n                    return ArrayValue;\n                })();\n\n                v1.KeyValueList = (function() {\n\n                    /**\n                     * Properties of a KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValueList\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [values] KeyValueList values\n                     */\n\n                    /**\n                     * Constructs a new KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValueList.\n                     * @implements IKeyValueList\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     */\n                    function KeyValueList(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * KeyValueList values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     */\n                    KeyValueList.prototype.values = $util.emptyArray;\n\n                    /**\n                     * Creates a new KeyValueList instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList instance\n                     */\n                    KeyValueList.create = function create(properties) {\n                        return new KeyValueList(properties);\n                    };\n\n                    /**\n                     * Encodes the specified KeyValueList message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified KeyValueList message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a KeyValueList message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValueList.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a KeyValueList message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     */\n                    KeyValueList.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValueList)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a KeyValueList message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValueList} message KeyValueList\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValueList.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this KeyValueList to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValueList.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for KeyValueList\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValueList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValueList\";\n                    };\n\n                    return KeyValueList;\n                })();\n\n                v1.KeyValue = (function() {\n\n                    /**\n                     * Properties of a KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValue\n                     * @property {string|null} [key] KeyValue key\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [value] KeyValue value\n                     */\n\n                    /**\n                     * Constructs a new KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValue.\n                     * @implements IKeyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     */\n                    function KeyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * KeyValue key.\n                     * @member {string|null|undefined} key\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.key = null;\n\n                    /**\n                     * KeyValue value.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.value = null;\n\n                    /**\n                     * Creates a new KeyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue instance\n                     */\n                    KeyValue.create = function create(properties) {\n                        return new KeyValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified KeyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n                        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.key = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.value = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a KeyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            if (!$util.isString(message.key))\n                                return \"key: string expected\";\n                        if (message.value != null && message.hasOwnProperty(\"value\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.value);\n                            if (error)\n                                return \"value.\" + error;\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     */\n                    KeyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        if (object.key != null)\n                            message.key = String(object.key);\n                        if (object.value != null) {\n                            if (typeof object.value !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValue.value: object expected\");\n                            message.value = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.value);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a KeyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValue} message KeyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.key = \"\";\n                            object.value = null;\n                        }\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            object.key = message.key;\n                        if (message.value != null && message.hasOwnProperty(\"value\"))\n                            object.value = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.value, options);\n                        return object;\n                    };\n\n                    /**\n                     * Converts this KeyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for KeyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValue\";\n                    };\n\n                    return KeyValue;\n                })();\n\n                v1.InstrumentationScope = (function() {\n\n                    /**\n                     * Properties of an InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IInstrumentationScope\n                     * @property {string|null} [name] InstrumentationScope name\n                     * @property {string|null} [version] InstrumentationScope version\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] InstrumentationScope attributes\n                     * @property {number|null} [droppedAttributesCount] InstrumentationScope droppedAttributesCount\n                     */\n\n                    /**\n                     * Constructs a new InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an InstrumentationScope.\n                     * @implements IInstrumentationScope\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     */\n                    function InstrumentationScope(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * InstrumentationScope name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.name = null;\n\n                    /**\n                     * InstrumentationScope version.\n                     * @member {string|null|undefined} version\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.version = null;\n\n                    /**\n                     * InstrumentationScope attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * InstrumentationScope droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Creates a new InstrumentationScope instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope instance\n                     */\n                    InstrumentationScope.create = function create(properties) {\n                        return new InstrumentationScope(properties);\n                    };\n\n                    /**\n                     * Encodes the specified InstrumentationScope message. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                        if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified InstrumentationScope message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.version = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 4: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an InstrumentationScope message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    InstrumentationScope.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            if (!$util.isString(message.version))\n                                return \"version: string expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an InstrumentationScope message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     */\n                    InstrumentationScope.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.InstrumentationScope)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.version != null)\n                            message.version = String(object.version);\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an InstrumentationScope message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.InstrumentationScope} message InstrumentationScope\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    InstrumentationScope.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.version = \"\";\n                            object.droppedAttributesCount = 0;\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            object.version = message.version;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this InstrumentationScope to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    InstrumentationScope.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for InstrumentationScope\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    InstrumentationScope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.InstrumentationScope\";\n                    };\n\n                    return InstrumentationScope;\n                })();\n\n                return v1;\n            })();\n\n            return common;\n        })();\n\n        proto.resource = (function() {\n\n            /**\n             * Namespace resource.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var resource = {};\n\n            resource.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.resource\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.Resource = (function() {\n\n                    /**\n                     * Properties of a Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @interface IResource\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Resource attributes\n                     * @property {number|null} [droppedAttributesCount] Resource droppedAttributesCount\n                     */\n\n                    /**\n                     * Constructs a new Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @classdesc Represents a Resource.\n                     * @implements IResource\n                     * @constructor\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     */\n                    function Resource(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Resource attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * Resource droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Creates a new Resource instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource instance\n                     */\n                    Resource.create = function create(properties) {\n                        return new Resource(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Resource message. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Resource message, length delimited. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Resource message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Resource.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Resource message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     */\n                    Resource.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.resource.v1.Resource)\n                            return object;\n                        var message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Resource message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.Resource} message Resource\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Resource.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults)\n                            object.droppedAttributesCount = 0;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Resource to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Resource.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Resource\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.resource.v1.Resource\";\n                    };\n\n                    return Resource;\n                })();\n\n                return v1;\n            })();\n\n            return resource;\n        })();\n\n        proto.trace = (function() {\n\n            /**\n             * Namespace trace.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var trace = {};\n\n            trace.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.trace\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.TracesData = (function() {\n\n                    /**\n                     * Properties of a TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ITracesData\n                     * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] TracesData resourceSpans\n                     */\n\n                    /**\n                     * Constructs a new TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a TracesData.\n                     * @implements ITracesData\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     */\n                    function TracesData(properties) {\n                        this.resourceSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TracesData resourceSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     */\n                    TracesData.prototype.resourceSpans = $util.emptyArray;\n\n                    /**\n                     * Creates a new TracesData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData instance\n                     */\n                    TracesData.create = function create(properties) {\n                        return new TracesData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TracesData message. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceSpans != null && message.resourceSpans.length)\n                            for (var i = 0; i < message.resourceSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TracesData message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceSpans && message.resourceSpans.length))\n                                        message.resourceSpans = [];\n                                    message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TracesData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TracesData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                            if (!Array.isArray(message.resourceSpans))\n                                return \"resourceSpans: array expected\";\n                            for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                if (error)\n                                    return \"resourceSpans.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TracesData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     */\n                    TracesData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.TracesData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        if (object.resourceSpans) {\n                            if (!Array.isArray(object.resourceSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: array expected\");\n                            message.resourceSpans = [];\n                            for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                if (typeof object.resourceSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: object expected\");\n                                message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TracesData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.TracesData} message TracesData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TracesData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceSpans = [];\n                        if (message.resourceSpans && message.resourceSpans.length) {\n                            object.resourceSpans = [];\n                            for (var j = 0; j < message.resourceSpans.length; ++j)\n                                object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TracesData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TracesData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for TracesData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    TracesData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.TracesData\";\n                    };\n\n                    return TracesData;\n                })();\n\n                v1.ResourceSpans = (function() {\n\n                    /**\n                     * Properties of a ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IResourceSpans\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceSpans resource\n                     * @property {Array.<opentelemetry.proto.trace.v1.IScopeSpans>|null} [scopeSpans] ResourceSpans scopeSpans\n                     * @property {string|null} [schemaUrl] ResourceSpans schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ResourceSpans.\n                     * @implements IResourceSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     */\n                    function ResourceSpans(properties) {\n                        this.scopeSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceSpans resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.resource = null;\n\n                    /**\n                     * ResourceSpans scopeSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IScopeSpans>} scopeSpans\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.scopeSpans = $util.emptyArray;\n\n                    /**\n                     * ResourceSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans instance\n                     */\n                    ResourceSpans.create = function create(properties) {\n                        return new ResourceSpans(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeSpans != null && message.scopeSpans.length)\n                            for (var i = 0; i < message.scopeSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ScopeSpans.encode(message.scopeSpans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeSpans && message.scopeSpans.length))\n                                        message.scopeSpans = [];\n                                    message.scopeSpans.push($root.opentelemetry.proto.trace.v1.ScopeSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeSpans != null && message.hasOwnProperty(\"scopeSpans\")) {\n                            if (!Array.isArray(message.scopeSpans))\n                                return \"scopeSpans: array expected\";\n                            for (var i = 0; i < message.scopeSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ScopeSpans.verify(message.scopeSpans[i]);\n                                if (error)\n                                    return \"scopeSpans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     */\n                    ResourceSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ResourceSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeSpans) {\n                            if (!Array.isArray(object.scopeSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: array expected\");\n                            message.scopeSpans = [];\n                            for (var i = 0; i < object.scopeSpans.length; ++i) {\n                                if (typeof object.scopeSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: object expected\");\n                                message.scopeSpans[i] = $root.opentelemetry.proto.trace.v1.ScopeSpans.fromObject(object.scopeSpans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ResourceSpans} message ResourceSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeSpans = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeSpans && message.scopeSpans.length) {\n                            object.scopeSpans = [];\n                            for (var j = 0; j < message.scopeSpans.length; ++j)\n                                object.scopeSpans[j] = $root.opentelemetry.proto.trace.v1.ScopeSpans.toObject(message.scopeSpans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ResourceSpans\";\n                    };\n\n                    return ResourceSpans;\n                })();\n\n                v1.ScopeSpans = (function() {\n\n                    /**\n                     * Properties of a ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IScopeSpans\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeSpans scope\n                     * @property {Array.<opentelemetry.proto.trace.v1.ISpan>|null} [spans] ScopeSpans spans\n                     * @property {string|null} [schemaUrl] ScopeSpans schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ScopeSpans.\n                     * @implements IScopeSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     */\n                    function ScopeSpans(properties) {\n                        this.spans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeSpans scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.scope = null;\n\n                    /**\n                     * ScopeSpans spans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.ISpan>} spans\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.spans = $util.emptyArray;\n\n                    /**\n                     * ScopeSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans instance\n                     */\n                    ScopeSpans.create = function create(properties) {\n                        return new ScopeSpans(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.spans != null && message.spans.length)\n                            for (var i = 0; i < message.spans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.encode(message.spans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.spans && message.spans.length))\n                                        message.spans = [];\n                                    message.spans.push($root.opentelemetry.proto.trace.v1.Span.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.spans != null && message.hasOwnProperty(\"spans\")) {\n                            if (!Array.isArray(message.spans))\n                                return \"spans: array expected\";\n                            for (var i = 0; i < message.spans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.verify(message.spans[i]);\n                                if (error)\n                                    return \"spans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     */\n                    ScopeSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ScopeSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.spans) {\n                            if (!Array.isArray(object.spans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: array expected\");\n                            message.spans = [];\n                            for (var i = 0; i < object.spans.length; ++i) {\n                                if (typeof object.spans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: object expected\");\n                                message.spans[i] = $root.opentelemetry.proto.trace.v1.Span.fromObject(object.spans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ScopeSpans} message ScopeSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.spans = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.spans && message.spans.length) {\n                            object.spans = [];\n                            for (var j = 0; j < message.spans.length; ++j)\n                                object.spans[j] = $root.opentelemetry.proto.trace.v1.Span.toObject(message.spans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ScopeSpans\";\n                    };\n\n                    return ScopeSpans;\n                })();\n\n                v1.Span = (function() {\n\n                    /**\n                     * Properties of a Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ISpan\n                     * @property {Uint8Array|null} [traceId] Span traceId\n                     * @property {Uint8Array|null} [spanId] Span spanId\n                     * @property {string|null} [traceState] Span traceState\n                     * @property {Uint8Array|null} [parentSpanId] Span parentSpanId\n                     * @property {string|null} [name] Span name\n                     * @property {opentelemetry.proto.trace.v1.Span.SpanKind|null} [kind] Span kind\n                     * @property {number|Long|null} [startTimeUnixNano] Span startTimeUnixNano\n                     * @property {number|Long|null} [endTimeUnixNano] Span endTimeUnixNano\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Span attributes\n                     * @property {number|null} [droppedAttributesCount] Span droppedAttributesCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.IEvent>|null} [events] Span events\n                     * @property {number|null} [droppedEventsCount] Span droppedEventsCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.ILink>|null} [links] Span links\n                     * @property {number|null} [droppedLinksCount] Span droppedLinksCount\n                     * @property {opentelemetry.proto.trace.v1.IStatus|null} [status] Span status\n                     */\n\n                    /**\n                     * Constructs a new Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Span.\n                     * @implements ISpan\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     */\n                    function Span(properties) {\n                        this.attributes = [];\n                        this.events = [];\n                        this.links = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Span traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceId = null;\n\n                    /**\n                     * Span spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.spanId = null;\n\n                    /**\n                     * Span traceState.\n                     * @member {string|null|undefined} traceState\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceState = null;\n\n                    /**\n                     * Span parentSpanId.\n                     * @member {Uint8Array|null|undefined} parentSpanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.parentSpanId = null;\n\n                    /**\n                     * Span name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.name = null;\n\n                    /**\n                     * Span kind.\n                     * @member {opentelemetry.proto.trace.v1.Span.SpanKind|null|undefined} kind\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.kind = null;\n\n                    /**\n                     * Span startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * Span endTimeUnixNano.\n                     * @member {number|Long|null|undefined} endTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.endTimeUnixNano = null;\n\n                    /**\n                     * Span attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * Span droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Span events.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.IEvent>} events\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.events = $util.emptyArray;\n\n                    /**\n                     * Span droppedEventsCount.\n                     * @member {number|null|undefined} droppedEventsCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedEventsCount = null;\n\n                    /**\n                     * Span links.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.ILink>} links\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.links = $util.emptyArray;\n\n                    /**\n                     * Span droppedLinksCount.\n                     * @member {number|null|undefined} droppedLinksCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedLinksCount = null;\n\n                    /**\n                     * Span status.\n                     * @member {opentelemetry.proto.trace.v1.IStatus|null|undefined} status\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.status = null;\n\n                    /**\n                     * Creates a new Span instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span instance\n                     */\n                    Span.create = function create(properties) {\n                        return new Span(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Span message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.spanId);\n                        if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.traceState);\n                        if (message.parentSpanId != null && Object.hasOwnProperty.call(message, \"parentSpanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.parentSpanId);\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);\n                        if (message.kind != null && Object.hasOwnProperty.call(message, \"kind\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.kind);\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.startTimeUnixNano);\n                        if (message.endTimeUnixNano != null && Object.hasOwnProperty.call(message, \"endTimeUnixNano\"))\n                            writer.uint32(/* id 8, wireType 1 =*/65).fixed64(message.endTimeUnixNano);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.droppedAttributesCount);\n                        if (message.events != null && message.events.length)\n                            for (var i = 0; i < message.events.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Event.encode(message.events[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        if (message.droppedEventsCount != null && Object.hasOwnProperty.call(message, \"droppedEventsCount\"))\n                            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.droppedEventsCount);\n                        if (message.links != null && message.links.length)\n                            for (var i = 0; i < message.links.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Link.encode(message.links[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n                        if (message.droppedLinksCount != null && Object.hasOwnProperty.call(message, \"droppedLinksCount\"))\n                            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.droppedLinksCount);\n                        if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                            $root.opentelemetry.proto.trace.v1.Status.encode(message.status, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Span message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Span message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            case 2: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            case 3: {\n                                    message.traceState = reader.string();\n                                    break;\n                                }\n                            case 4: {\n                                    message.parentSpanId = reader.bytes();\n                                    break;\n                                }\n                            case 5: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 6: {\n                                    message.kind = reader.int32();\n                                    break;\n                                }\n                            case 7: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 8: {\n                                    message.endTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 10: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    if (!(message.events && message.events.length))\n                                        message.events = [];\n                                    message.events.push($root.opentelemetry.proto.trace.v1.Span.Event.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 12: {\n                                    message.droppedEventsCount = reader.uint32();\n                                    break;\n                                }\n                            case 13: {\n                                    if (!(message.links && message.links.length))\n                                        message.links = [];\n                                    message.links.push($root.opentelemetry.proto.trace.v1.Span.Link.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 14: {\n                                    message.droppedLinksCount = reader.uint32();\n                                    break;\n                                }\n                            case 15: {\n                                    message.status = $root.opentelemetry.proto.trace.v1.Status.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Span message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Span message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Span.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            if (!$util.isString(message.traceState))\n                                return \"traceState: string expected\";\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            if (!(message.parentSpanId && typeof message.parentSpanId.length === \"number\" || $util.isString(message.parentSpanId)))\n                                return \"parentSpanId: buffer expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            switch (message.kind) {\n                            default:\n                                return \"kind: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                                break;\n                            }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (!$util.isInteger(message.endTimeUnixNano) && !(message.endTimeUnixNano && $util.isInteger(message.endTimeUnixNano.low) && $util.isInteger(message.endTimeUnixNano.high)))\n                                return \"endTimeUnixNano: integer|Long expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.events != null && message.hasOwnProperty(\"events\")) {\n                            if (!Array.isArray(message.events))\n                                return \"events: array expected\";\n                            for (var i = 0; i < message.events.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Event.verify(message.events[i]);\n                                if (error)\n                                    return \"events.\" + error;\n                            }\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            if (!$util.isInteger(message.droppedEventsCount))\n                                return \"droppedEventsCount: integer expected\";\n                        if (message.links != null && message.hasOwnProperty(\"links\")) {\n                            if (!Array.isArray(message.links))\n                                return \"links: array expected\";\n                            for (var i = 0; i < message.links.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Link.verify(message.links[i]);\n                                if (error)\n                                    return \"links.\" + error;\n                            }\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            if (!$util.isInteger(message.droppedLinksCount))\n                                return \"droppedLinksCount: integer expected\";\n                        if (message.status != null && message.hasOwnProperty(\"status\")) {\n                            var error = $root.opentelemetry.proto.trace.v1.Status.verify(message.status);\n                            if (error)\n                                return \"status.\" + error;\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Span message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     */\n                    Span.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Span)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Span();\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceState != null)\n                            message.traceState = String(object.traceState);\n                        if (object.parentSpanId != null)\n                            if (typeof object.parentSpanId === \"string\")\n                                $util.base64.decode(object.parentSpanId, message.parentSpanId = $util.newBuffer($util.base64.length(object.parentSpanId)), 0);\n                            else if (object.parentSpanId.length >= 0)\n                                message.parentSpanId = object.parentSpanId;\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        switch (object.kind) {\n                        default:\n                            if (typeof object.kind === \"number\") {\n                                message.kind = object.kind;\n                                break;\n                            }\n                            break;\n                        case \"SPAN_KIND_UNSPECIFIED\":\n                        case 0:\n                            message.kind = 0;\n                            break;\n                        case \"SPAN_KIND_INTERNAL\":\n                        case 1:\n                            message.kind = 1;\n                            break;\n                        case \"SPAN_KIND_SERVER\":\n                        case 2:\n                            message.kind = 2;\n                            break;\n                        case \"SPAN_KIND_CLIENT\":\n                        case 3:\n                            message.kind = 3;\n                            break;\n                        case \"SPAN_KIND_PRODUCER\":\n                        case 4:\n                            message.kind = 4;\n                            break;\n                        case \"SPAN_KIND_CONSUMER\":\n                        case 5:\n                            message.kind = 5;\n                            break;\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.endTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.endTimeUnixNano = $util.Long.fromValue(object.endTimeUnixNano)).unsigned = false;\n                            else if (typeof object.endTimeUnixNano === \"string\")\n                                message.endTimeUnixNano = parseInt(object.endTimeUnixNano, 10);\n                            else if (typeof object.endTimeUnixNano === \"number\")\n                                message.endTimeUnixNano = object.endTimeUnixNano;\n                            else if (typeof object.endTimeUnixNano === \"object\")\n                                message.endTimeUnixNano = new $util.LongBits(object.endTimeUnixNano.low >>> 0, object.endTimeUnixNano.high >>> 0).toNumber();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.events) {\n                            if (!Array.isArray(object.events))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: array expected\");\n                            message.events = [];\n                            for (var i = 0; i < object.events.length; ++i) {\n                                if (typeof object.events[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: object expected\");\n                                message.events[i] = $root.opentelemetry.proto.trace.v1.Span.Event.fromObject(object.events[i]);\n                            }\n                        }\n                        if (object.droppedEventsCount != null)\n                            message.droppedEventsCount = object.droppedEventsCount >>> 0;\n                        if (object.links) {\n                            if (!Array.isArray(object.links))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: array expected\");\n                            message.links = [];\n                            for (var i = 0; i < object.links.length; ++i) {\n                                if (typeof object.links[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: object expected\");\n                                message.links[i] = $root.opentelemetry.proto.trace.v1.Span.Link.fromObject(object.links[i]);\n                            }\n                        }\n                        if (object.droppedLinksCount != null)\n                            message.droppedLinksCount = object.droppedLinksCount >>> 0;\n                        if (object.status != null) {\n                            if (typeof object.status !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.status: object expected\");\n                            message.status = $root.opentelemetry.proto.trace.v1.Status.fromObject(object.status);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Span message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Span} message Span\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Span.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.events = [];\n                            object.links = [];\n                        }\n                        if (options.defaults) {\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            object.traceState = \"\";\n                            if (options.bytes === String)\n                                object.parentSpanId = \"\";\n                            else {\n                                object.parentSpanId = [];\n                                if (options.bytes !== Array)\n                                    object.parentSpanId = $util.newBuffer(object.parentSpanId);\n                            }\n                            object.name = \"\";\n                            object.kind = options.enums === String ? \"SPAN_KIND_UNSPECIFIED\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.endTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.endTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.droppedAttributesCount = 0;\n                            object.droppedEventsCount = 0;\n                            object.droppedLinksCount = 0;\n                            object.status = null;\n                        }\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            object.traceState = message.traceState;\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            object.parentSpanId = options.bytes === String ? $util.base64.encode(message.parentSpanId, 0, message.parentSpanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.parentSpanId) : message.parentSpanId;\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            object.kind = options.enums === String ? $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] === undefined ? message.kind : $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] : message.kind;\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (typeof message.endTimeUnixNano === \"number\")\n                                object.endTimeUnixNano = options.longs === String ? String(message.endTimeUnixNano) : message.endTimeUnixNano;\n                            else\n                                object.endTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.endTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.endTimeUnixNano.low >>> 0, message.endTimeUnixNano.high >>> 0).toNumber() : message.endTimeUnixNano;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.events && message.events.length) {\n                            object.events = [];\n                            for (var j = 0; j < message.events.length; ++j)\n                                object.events[j] = $root.opentelemetry.proto.trace.v1.Span.Event.toObject(message.events[j], options);\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            object.droppedEventsCount = message.droppedEventsCount;\n                        if (message.links && message.links.length) {\n                            object.links = [];\n                            for (var j = 0; j < message.links.length; ++j)\n                                object.links[j] = $root.opentelemetry.proto.trace.v1.Span.Link.toObject(message.links[j], options);\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            object.droppedLinksCount = message.droppedLinksCount;\n                        if (message.status != null && message.hasOwnProperty(\"status\"))\n                            object.status = $root.opentelemetry.proto.trace.v1.Status.toObject(message.status, options);\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Span to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Span.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Span\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Span.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span\";\n                    };\n\n                    /**\n                     * SpanKind enum.\n                     * @name opentelemetry.proto.trace.v1.Span.SpanKind\n                     * @enum {number}\n                     * @property {number} SPAN_KIND_UNSPECIFIED=0 SPAN_KIND_UNSPECIFIED value\n                     * @property {number} SPAN_KIND_INTERNAL=1 SPAN_KIND_INTERNAL value\n                     * @property {number} SPAN_KIND_SERVER=2 SPAN_KIND_SERVER value\n                     * @property {number} SPAN_KIND_CLIENT=3 SPAN_KIND_CLIENT value\n                     * @property {number} SPAN_KIND_PRODUCER=4 SPAN_KIND_PRODUCER value\n                     * @property {number} SPAN_KIND_CONSUMER=5 SPAN_KIND_CONSUMER value\n                     */\n                    Span.SpanKind = (function() {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"SPAN_KIND_UNSPECIFIED\"] = 0;\n                        values[valuesById[1] = \"SPAN_KIND_INTERNAL\"] = 1;\n                        values[valuesById[2] = \"SPAN_KIND_SERVER\"] = 2;\n                        values[valuesById[3] = \"SPAN_KIND_CLIENT\"] = 3;\n                        values[valuesById[4] = \"SPAN_KIND_PRODUCER\"] = 4;\n                        values[valuesById[5] = \"SPAN_KIND_CONSUMER\"] = 5;\n                        return values;\n                    })();\n\n                    Span.Event = (function() {\n\n                        /**\n                         * Properties of an Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface IEvent\n                         * @property {number|Long|null} [timeUnixNano] Event timeUnixNano\n                         * @property {string|null} [name] Event name\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Event attributes\n                         * @property {number|null} [droppedAttributesCount] Event droppedAttributesCount\n                         */\n\n                        /**\n                         * Constructs a new Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents an Event.\n                         * @implements IEvent\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         */\n                        function Event(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Event timeUnixNano.\n                         * @member {number|Long|null|undefined} timeUnixNano\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.timeUnixNano = null;\n\n                        /**\n                         * Event name.\n                         * @member {string|null|undefined} name\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.name = null;\n\n                        /**\n                         * Event attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.attributes = $util.emptyArray;\n\n                        /**\n                         * Event droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.droppedAttributesCount = null;\n\n                        /**\n                         * Creates a new Event instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event instance\n                         */\n                        Event.create = function create(properties) {\n                            return new Event(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Event message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.timeUnixNano);\n                            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Event message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an Event message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.timeUnixNano = reader.fixed64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.name = reader.string();\n                                        break;\n                                    }\n                                case 3: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                case 4: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an Event message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an Event message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Event.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                    return \"timeUnixNano: integer|Long expected\";\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                if (!$util.isString(message.name))\n                                    return \"name: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an Event message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         */\n                        Event.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Event)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            if (object.timeUnixNano != null)\n                                if ($util.Long)\n                                    (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                                else if (typeof object.timeUnixNano === \"string\")\n                                    message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                                else if (typeof object.timeUnixNano === \"number\")\n                                    message.timeUnixNano = object.timeUnixNano;\n                                else if (typeof object.timeUnixNano === \"object\")\n                                    message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                            if (object.name != null)\n                                message.name = String(object.name);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an Event message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Event} message Event\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Event.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                                object.name = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (typeof message.timeUnixNano === \"number\")\n                                    object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                                else\n                                    object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                object.name = message.name;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Event to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Event.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Event\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Event.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Event\";\n                        };\n\n                        return Event;\n                    })();\n\n                    Span.Link = (function() {\n\n                        /**\n                         * Properties of a Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface ILink\n                         * @property {Uint8Array|null} [traceId] Link traceId\n                         * @property {Uint8Array|null} [spanId] Link spanId\n                         * @property {string|null} [traceState] Link traceState\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Link attributes\n                         * @property {number|null} [droppedAttributesCount] Link droppedAttributesCount\n                         */\n\n                        /**\n                         * Constructs a new Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents a Link.\n                         * @implements ILink\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         */\n                        function Link(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Link traceId.\n                         * @member {Uint8Array|null|undefined} traceId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceId = null;\n\n                        /**\n                         * Link spanId.\n                         * @member {Uint8Array|null|undefined} spanId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.spanId = null;\n\n                        /**\n                         * Link traceState.\n                         * @member {string|null|undefined} traceState\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceState = null;\n\n                        /**\n                         * Link attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.attributes = $util.emptyArray;\n\n                        /**\n                         * Link droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.droppedAttributesCount = null;\n\n                        /**\n                         * Creates a new Link instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link instance\n                         */\n                        Link.create = function create(properties) {\n                            return new Link(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Link message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.traceId);\n                            if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.spanId);\n                            if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.traceState);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Link message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Link message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.traceId = reader.bytes();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.spanId = reader.bytes();\n                                        break;\n                                    }\n                                case 3: {\n                                        message.traceState = reader.string();\n                                        break;\n                                    }\n                                case 4: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                case 5: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Link message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Link message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Link.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                    return \"traceId: buffer expected\";\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                    return \"spanId: buffer expected\";\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                if (!$util.isString(message.traceState))\n                                    return \"traceState: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Link message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         */\n                        Link.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Link)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            if (object.traceId != null)\n                                if (typeof object.traceId === \"string\")\n                                    $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                                else if (object.traceId.length >= 0)\n                                    message.traceId = object.traceId;\n                            if (object.spanId != null)\n                                if (typeof object.spanId === \"string\")\n                                    $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                                else if (object.spanId.length >= 0)\n                                    message.spanId = object.spanId;\n                            if (object.traceState != null)\n                                message.traceState = String(object.traceState);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Link message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Link} message Link\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Link.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if (options.bytes === String)\n                                    object.traceId = \"\";\n                                else {\n                                    object.traceId = [];\n                                    if (options.bytes !== Array)\n                                        object.traceId = $util.newBuffer(object.traceId);\n                                }\n                                if (options.bytes === String)\n                                    object.spanId = \"\";\n                                else {\n                                    object.spanId = [];\n                                    if (options.bytes !== Array)\n                                        object.spanId = $util.newBuffer(object.spanId);\n                                }\n                                object.traceState = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                object.traceState = message.traceState;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Link to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Link.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Link\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Link.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Link\";\n                        };\n\n                        return Link;\n                    })();\n\n                    return Span;\n                })();\n\n                v1.Status = (function() {\n\n                    /**\n                     * Properties of a Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IStatus\n                     * @property {string|null} [message] Status message\n                     * @property {opentelemetry.proto.trace.v1.Status.StatusCode|null} [code] Status code\n                     */\n\n                    /**\n                     * Constructs a new Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Status.\n                     * @implements IStatus\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     */\n                    function Status(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Status message.\n                     * @member {string|null|undefined} message\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.message = null;\n\n                    /**\n                     * Status code.\n                     * @member {opentelemetry.proto.trace.v1.Status.StatusCode|null|undefined} code\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.code = null;\n\n                    /**\n                     * Creates a new Status instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status instance\n                     */\n                    Status.create = function create(properties) {\n                        return new Status(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Status message. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);\n                        if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.code);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Status message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Status message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Status();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 2: {\n                                    message.message = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    message.code = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Status message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Status message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Status.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            if (!$util.isString(message.message))\n                                return \"message: string expected\";\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            switch (message.code) {\n                            default:\n                                return \"code: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Status message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     */\n                    Status.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Status)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Status();\n                        if (object.message != null)\n                            message.message = String(object.message);\n                        switch (object.code) {\n                        default:\n                            if (typeof object.code === \"number\") {\n                                message.code = object.code;\n                                break;\n                            }\n                            break;\n                        case \"STATUS_CODE_UNSET\":\n                        case 0:\n                            message.code = 0;\n                            break;\n                        case \"STATUS_CODE_OK\":\n                        case 1:\n                            message.code = 1;\n                            break;\n                        case \"STATUS_CODE_ERROR\":\n                        case 2:\n                            message.code = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Status message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Status} message Status\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Status.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.message = \"\";\n                            object.code = options.enums === String ? \"STATUS_CODE_UNSET\" : 0;\n                        }\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            object.message = message.message;\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            object.code = options.enums === String ? $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] === undefined ? message.code : $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] : message.code;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Status to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Status.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Status\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Status\";\n                    };\n\n                    /**\n                     * StatusCode enum.\n                     * @name opentelemetry.proto.trace.v1.Status.StatusCode\n                     * @enum {number}\n                     * @property {number} STATUS_CODE_UNSET=0 STATUS_CODE_UNSET value\n                     * @property {number} STATUS_CODE_OK=1 STATUS_CODE_OK value\n                     * @property {number} STATUS_CODE_ERROR=2 STATUS_CODE_ERROR value\n                     */\n                    Status.StatusCode = (function() {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"STATUS_CODE_UNSET\"] = 0;\n                        values[valuesById[1] = \"STATUS_CODE_OK\"] = 1;\n                        values[valuesById[2] = \"STATUS_CODE_ERROR\"] = 2;\n                        return values;\n                    })();\n\n                    return Status;\n                })();\n\n                return v1;\n            })();\n\n            return trace;\n        })();\n\n        proto.collector = (function() {\n\n            /**\n             * Namespace collector.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var collector = {};\n\n            collector.trace = (function() {\n\n                /**\n                 * Namespace trace.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var trace = {};\n\n                trace.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.trace\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.TraceService = (function() {\n\n                        /**\n                         * Constructs a new TraceService service.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents a TraceService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function TraceService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (TraceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TraceService;\n\n                        /**\n                         * Creates new TraceService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {TraceService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        TraceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.trace.v1.TraceService#export_}.\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} [response] ExportTraceServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.trace.v1.TraceService.ExportCallback} callback Node-style callback called with the error, if any, and ExportTraceServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(TraceService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return TraceService;\n                    })();\n\n                    v1.ExportTraceServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceRequest\n                         * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] ExportTraceServiceRequest resourceSpans\n                         */\n\n                        /**\n                         * Constructs a new ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceRequest.\n                         * @implements IExportTraceServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceRequest(properties) {\n                            this.resourceSpans = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTraceServiceRequest resourceSpans.\n                         * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         */\n                        ExportTraceServiceRequest.prototype.resourceSpans = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportTraceServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest instance\n                         */\n                        ExportTraceServiceRequest.create = function create(properties) {\n                            return new ExportTraceServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceSpans != null && message.resourceSpans.length)\n                                for (var i = 0; i < message.resourceSpans.length; ++i)\n                                    $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceSpans && message.resourceSpans.length))\n                                            message.resourceSpans = [];\n                                        message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTraceServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                                if (!Array.isArray(message.resourceSpans))\n                                    return \"resourceSpans: array expected\";\n                                for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                    var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                    if (error)\n                                        return \"resourceSpans.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTraceServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         */\n                        ExportTraceServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            if (object.resourceSpans) {\n                                if (!Array.isArray(object.resourceSpans))\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: array expected\");\n                                message.resourceSpans = [];\n                                for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                    if (typeof object.resourceSpans[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: object expected\");\n                                    message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTraceServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} message ExportTraceServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceSpans = [];\n                            if (message.resourceSpans && message.resourceSpans.length) {\n                                object.resourceSpans = [];\n                                for (var j = 0; j < message.resourceSpans.length; ++j)\n                                    object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTraceServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTraceServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\";\n                        };\n\n                        return ExportTraceServiceRequest;\n                    })();\n\n                    v1.ExportTraceServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceResponse\n                         * @property {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null} [partialSuccess] ExportTraceServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceResponse.\n                         * @implements IExportTraceServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTraceServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         */\n                        ExportTraceServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportTraceServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse instance\n                         */\n                        ExportTraceServiceResponse.create = function create(properties) {\n                            return new ExportTraceServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTraceServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTraceServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         */\n                        ExportTraceServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTraceServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} message ExportTraceServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTraceServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTraceServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\";\n                        };\n\n                        return ExportTraceServiceResponse;\n                    })();\n\n                    v1.ExportTracePartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTracePartialSuccess\n                         * @property {number|Long|null} [rejectedSpans] ExportTracePartialSuccess rejectedSpans\n                         * @property {string|null} [errorMessage] ExportTracePartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTracePartialSuccess.\n                         * @implements IExportTracePartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportTracePartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTracePartialSuccess rejectedSpans.\n                         * @member {number|Long|null|undefined} rejectedSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.rejectedSpans = null;\n\n                        /**\n                         * ExportTracePartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportTracePartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess instance\n                         */\n                        ExportTracePartialSuccess.create = function create(properties) {\n                            return new ExportTracePartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedSpans != null && Object.hasOwnProperty.call(message, \"rejectedSpans\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedSpans);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedSpans = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTracePartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTracePartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (!$util.isInteger(message.rejectedSpans) && !(message.rejectedSpans && $util.isInteger(message.rejectedSpans.low) && $util.isInteger(message.rejectedSpans.high)))\n                                    return \"rejectedSpans: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTracePartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         */\n                        ExportTracePartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            if (object.rejectedSpans != null)\n                                if ($util.Long)\n                                    (message.rejectedSpans = $util.Long.fromValue(object.rejectedSpans)).unsigned = false;\n                                else if (typeof object.rejectedSpans === \"string\")\n                                    message.rejectedSpans = parseInt(object.rejectedSpans, 10);\n                                else if (typeof object.rejectedSpans === \"number\")\n                                    message.rejectedSpans = object.rejectedSpans;\n                                else if (typeof object.rejectedSpans === \"object\")\n                                    message.rejectedSpans = new $util.LongBits(object.rejectedSpans.low >>> 0, object.rejectedSpans.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTracePartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} message ExportTracePartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTracePartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedSpans = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedSpans = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (typeof message.rejectedSpans === \"number\")\n                                    object.rejectedSpans = options.longs === String ? String(message.rejectedSpans) : message.rejectedSpans;\n                                else\n                                    object.rejectedSpans = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedSpans) : options.longs === Number ? new $util.LongBits(message.rejectedSpans.low >>> 0, message.rejectedSpans.high >>> 0).toNumber() : message.rejectedSpans;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTracePartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTracePartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTracePartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTracePartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\";\n                        };\n\n                        return ExportTracePartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return trace;\n            })();\n\n            collector.metrics = (function() {\n\n                /**\n                 * Namespace metrics.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var metrics = {};\n\n                metrics.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.metrics\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.MetricsService = (function() {\n\n                        /**\n                         * Constructs a new MetricsService service.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents a MetricsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function MetricsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (MetricsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = MetricsService;\n\n                        /**\n                         * Creates new MetricsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {MetricsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        MetricsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.metrics.v1.MetricsService#export_}.\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} [response] ExportMetricsServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.metrics.v1.MetricsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportMetricsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(MetricsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return MetricsService;\n                    })();\n\n                    v1.ExportMetricsServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceRequest\n                         * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] ExportMetricsServiceRequest resourceMetrics\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceRequest.\n                         * @implements IExportMetricsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceRequest(properties) {\n                            this.resourceMetrics = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsServiceRequest resourceMetrics.\n                         * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         */\n                        ExportMetricsServiceRequest.prototype.resourceMetrics = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportMetricsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest instance\n                         */\n                        ExportMetricsServiceRequest.create = function create(properties) {\n                            return new ExportMetricsServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceMetrics != null && message.resourceMetrics.length)\n                                for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                    $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                            message.resourceMetrics = [];\n                                        message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                                if (!Array.isArray(message.resourceMetrics))\n                                    return \"resourceMetrics: array expected\";\n                                for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                    var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                    if (error)\n                                        return \"resourceMetrics.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         */\n                        ExportMetricsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            if (object.resourceMetrics) {\n                                if (!Array.isArray(object.resourceMetrics))\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: array expected\");\n                                message.resourceMetrics = [];\n                                for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                    if (typeof object.resourceMetrics[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: object expected\");\n                                    message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} message ExportMetricsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceMetrics = [];\n                            if (message.resourceMetrics && message.resourceMetrics.length) {\n                                object.resourceMetrics = [];\n                                for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                    object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\";\n                        };\n\n                        return ExportMetricsServiceRequest;\n                    })();\n\n                    v1.ExportMetricsServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceResponse\n                         * @property {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null} [partialSuccess] ExportMetricsServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceResponse.\n                         * @implements IExportMetricsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         */\n                        ExportMetricsServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportMetricsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse instance\n                         */\n                        ExportMetricsServiceResponse.create = function create(properties) {\n                            return new ExportMetricsServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         */\n                        ExportMetricsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} message ExportMetricsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\";\n                        };\n\n                        return ExportMetricsServiceResponse;\n                    })();\n\n                    v1.ExportMetricsPartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsPartialSuccess\n                         * @property {number|Long|null} [rejectedDataPoints] ExportMetricsPartialSuccess rejectedDataPoints\n                         * @property {string|null} [errorMessage] ExportMetricsPartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsPartialSuccess.\n                         * @implements IExportMetricsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportMetricsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsPartialSuccess rejectedDataPoints.\n                         * @member {number|Long|null|undefined} rejectedDataPoints\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.rejectedDataPoints = null;\n\n                        /**\n                         * ExportMetricsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportMetricsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess instance\n                         */\n                        ExportMetricsPartialSuccess.create = function create(properties) {\n                            return new ExportMetricsPartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedDataPoints != null && Object.hasOwnProperty.call(message, \"rejectedDataPoints\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedDataPoints);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedDataPoints = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (!$util.isInteger(message.rejectedDataPoints) && !(message.rejectedDataPoints && $util.isInteger(message.rejectedDataPoints.low) && $util.isInteger(message.rejectedDataPoints.high)))\n                                    return \"rejectedDataPoints: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         */\n                        ExportMetricsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            if (object.rejectedDataPoints != null)\n                                if ($util.Long)\n                                    (message.rejectedDataPoints = $util.Long.fromValue(object.rejectedDataPoints)).unsigned = false;\n                                else if (typeof object.rejectedDataPoints === \"string\")\n                                    message.rejectedDataPoints = parseInt(object.rejectedDataPoints, 10);\n                                else if (typeof object.rejectedDataPoints === \"number\")\n                                    message.rejectedDataPoints = object.rejectedDataPoints;\n                                else if (typeof object.rejectedDataPoints === \"object\")\n                                    message.rejectedDataPoints = new $util.LongBits(object.rejectedDataPoints.low >>> 0, object.rejectedDataPoints.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} message ExportMetricsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedDataPoints = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedDataPoints = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (typeof message.rejectedDataPoints === \"number\")\n                                    object.rejectedDataPoints = options.longs === String ? String(message.rejectedDataPoints) : message.rejectedDataPoints;\n                                else\n                                    object.rejectedDataPoints = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedDataPoints) : options.longs === Number ? new $util.LongBits(message.rejectedDataPoints.low >>> 0, message.rejectedDataPoints.high >>> 0).toNumber() : message.rejectedDataPoints;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\";\n                        };\n\n                        return ExportMetricsPartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return metrics;\n            })();\n\n            collector.logs = (function() {\n\n                /**\n                 * Namespace logs.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var logs = {};\n\n                logs.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.logs\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.LogsService = (function() {\n\n                        /**\n                         * Constructs a new LogsService service.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents a LogsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function LogsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (LogsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LogsService;\n\n                        /**\n                         * Creates new LogsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {LogsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        LogsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.logs.v1.LogsService#export_}.\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} [response] ExportLogsServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.logs.v1.LogsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportLogsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(LogsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return LogsService;\n                    })();\n\n                    v1.ExportLogsServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceRequest\n                         * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] ExportLogsServiceRequest resourceLogs\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceRequest.\n                         * @implements IExportLogsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceRequest(properties) {\n                            this.resourceLogs = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsServiceRequest resourceLogs.\n                         * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         */\n                        ExportLogsServiceRequest.prototype.resourceLogs = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportLogsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest instance\n                         */\n                        ExportLogsServiceRequest.create = function create(properties) {\n                            return new ExportLogsServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceLogs != null && message.resourceLogs.length)\n                                for (var i = 0; i < message.resourceLogs.length; ++i)\n                                    $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceLogs && message.resourceLogs.length))\n                                            message.resourceLogs = [];\n                                        message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                                if (!Array.isArray(message.resourceLogs))\n                                    return \"resourceLogs: array expected\";\n                                for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                    var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                    if (error)\n                                        return \"resourceLogs.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         */\n                        ExportLogsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            if (object.resourceLogs) {\n                                if (!Array.isArray(object.resourceLogs))\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: array expected\");\n                                message.resourceLogs = [];\n                                for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                    if (typeof object.resourceLogs[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: object expected\");\n                                    message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} message ExportLogsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceLogs = [];\n                            if (message.resourceLogs && message.resourceLogs.length) {\n                                object.resourceLogs = [];\n                                for (var j = 0; j < message.resourceLogs.length; ++j)\n                                    object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\";\n                        };\n\n                        return ExportLogsServiceRequest;\n                    })();\n\n                    v1.ExportLogsServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceResponse\n                         * @property {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null} [partialSuccess] ExportLogsServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceResponse.\n                         * @implements IExportLogsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         */\n                        ExportLogsServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportLogsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse instance\n                         */\n                        ExportLogsServiceResponse.create = function create(properties) {\n                            return new ExportLogsServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         */\n                        ExportLogsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} message ExportLogsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\";\n                        };\n\n                        return ExportLogsServiceResponse;\n                    })();\n\n                    v1.ExportLogsPartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsPartialSuccess\n                         * @property {number|Long|null} [rejectedLogRecords] ExportLogsPartialSuccess rejectedLogRecords\n                         * @property {string|null} [errorMessage] ExportLogsPartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsPartialSuccess.\n                         * @implements IExportLogsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportLogsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsPartialSuccess rejectedLogRecords.\n                         * @member {number|Long|null|undefined} rejectedLogRecords\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.rejectedLogRecords = null;\n\n                        /**\n                         * ExportLogsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportLogsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess instance\n                         */\n                        ExportLogsPartialSuccess.create = function create(properties) {\n                            return new ExportLogsPartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedLogRecords != null && Object.hasOwnProperty.call(message, \"rejectedLogRecords\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedLogRecords);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedLogRecords = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (!$util.isInteger(message.rejectedLogRecords) && !(message.rejectedLogRecords && $util.isInteger(message.rejectedLogRecords.low) && $util.isInteger(message.rejectedLogRecords.high)))\n                                    return \"rejectedLogRecords: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         */\n                        ExportLogsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            if (object.rejectedLogRecords != null)\n                                if ($util.Long)\n                                    (message.rejectedLogRecords = $util.Long.fromValue(object.rejectedLogRecords)).unsigned = false;\n                                else if (typeof object.rejectedLogRecords === \"string\")\n                                    message.rejectedLogRecords = parseInt(object.rejectedLogRecords, 10);\n                                else if (typeof object.rejectedLogRecords === \"number\")\n                                    message.rejectedLogRecords = object.rejectedLogRecords;\n                                else if (typeof object.rejectedLogRecords === \"object\")\n                                    message.rejectedLogRecords = new $util.LongBits(object.rejectedLogRecords.low >>> 0, object.rejectedLogRecords.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} message ExportLogsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedLogRecords = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedLogRecords = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (typeof message.rejectedLogRecords === \"number\")\n                                    object.rejectedLogRecords = options.longs === String ? String(message.rejectedLogRecords) : message.rejectedLogRecords;\n                                else\n                                    object.rejectedLogRecords = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedLogRecords) : options.longs === Number ? new $util.LongBits(message.rejectedLogRecords.low >>> 0, message.rejectedLogRecords.high >>> 0).toNumber() : message.rejectedLogRecords;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\";\n                        };\n\n                        return ExportLogsPartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return logs;\n            })();\n\n            return collector;\n        })();\n\n        proto.metrics = (function() {\n\n            /**\n             * Namespace metrics.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var metrics = {};\n\n            metrics.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.metrics\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.MetricsData = (function() {\n\n                    /**\n                     * Properties of a MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetricsData\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] MetricsData resourceMetrics\n                     */\n\n                    /**\n                     * Constructs a new MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a MetricsData.\n                     * @implements IMetricsData\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     */\n                    function MetricsData(properties) {\n                        this.resourceMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * MetricsData resourceMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     */\n                    MetricsData.prototype.resourceMetrics = $util.emptyArray;\n\n                    /**\n                     * Creates a new MetricsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData instance\n                     */\n                    MetricsData.create = function create(properties) {\n                        return new MetricsData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified MetricsData message. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceMetrics != null && message.resourceMetrics.length)\n                            for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified MetricsData message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                        message.resourceMetrics = [];\n                                    message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a MetricsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    MetricsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                            if (!Array.isArray(message.resourceMetrics))\n                                return \"resourceMetrics: array expected\";\n                            for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                if (error)\n                                    return \"resourceMetrics.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a MetricsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     */\n                    MetricsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.MetricsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        if (object.resourceMetrics) {\n                            if (!Array.isArray(object.resourceMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: array expected\");\n                            message.resourceMetrics = [];\n                            for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                if (typeof object.resourceMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: object expected\");\n                                message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a MetricsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.MetricsData} message MetricsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    MetricsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceMetrics = [];\n                        if (message.resourceMetrics && message.resourceMetrics.length) {\n                            object.resourceMetrics = [];\n                            for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this MetricsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    MetricsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for MetricsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    MetricsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.MetricsData\";\n                    };\n\n                    return MetricsData;\n                })();\n\n                v1.ResourceMetrics = (function() {\n\n                    /**\n                     * Properties of a ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IResourceMetrics\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceMetrics resource\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>|null} [scopeMetrics] ResourceMetrics scopeMetrics\n                     * @property {string|null} [schemaUrl] ResourceMetrics schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ResourceMetrics.\n                     * @implements IResourceMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     */\n                    function ResourceMetrics(properties) {\n                        this.scopeMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceMetrics resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.resource = null;\n\n                    /**\n                     * ResourceMetrics scopeMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>} scopeMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.scopeMetrics = $util.emptyArray;\n\n                    /**\n                     * ResourceMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics instance\n                     */\n                    ResourceMetrics.create = function create(properties) {\n                        return new ResourceMetrics(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeMetrics != null && message.scopeMetrics.length)\n                            for (var i = 0; i < message.scopeMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ScopeMetrics.encode(message.scopeMetrics[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeMetrics && message.scopeMetrics.length))\n                                        message.scopeMetrics = [];\n                                    message.scopeMetrics.push($root.opentelemetry.proto.metrics.v1.ScopeMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeMetrics != null && message.hasOwnProperty(\"scopeMetrics\")) {\n                            if (!Array.isArray(message.scopeMetrics))\n                                return \"scopeMetrics: array expected\";\n                            for (var i = 0; i < message.scopeMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.verify(message.scopeMetrics[i]);\n                                if (error)\n                                    return \"scopeMetrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     */\n                    ResourceMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ResourceMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeMetrics) {\n                            if (!Array.isArray(object.scopeMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: array expected\");\n                            message.scopeMetrics = [];\n                            for (var i = 0; i < object.scopeMetrics.length; ++i) {\n                                if (typeof object.scopeMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: object expected\");\n                                message.scopeMetrics[i] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.fromObject(object.scopeMetrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ResourceMetrics} message ResourceMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeMetrics = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeMetrics && message.scopeMetrics.length) {\n                            object.scopeMetrics = [];\n                            for (var j = 0; j < message.scopeMetrics.length; ++j)\n                                object.scopeMetrics[j] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.toObject(message.scopeMetrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ResourceMetrics\";\n                    };\n\n                    return ResourceMetrics;\n                })();\n\n                v1.ScopeMetrics = (function() {\n\n                    /**\n                     * Properties of a ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IScopeMetrics\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeMetrics scope\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IMetric>|null} [metrics] ScopeMetrics metrics\n                     * @property {string|null} [schemaUrl] ScopeMetrics schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ScopeMetrics.\n                     * @implements IScopeMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     */\n                    function ScopeMetrics(properties) {\n                        this.metrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeMetrics scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.scope = null;\n\n                    /**\n                     * ScopeMetrics metrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IMetric>} metrics\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.metrics = $util.emptyArray;\n\n                    /**\n                     * ScopeMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics instance\n                     */\n                    ScopeMetrics.create = function create(properties) {\n                        return new ScopeMetrics(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.metrics != null && message.metrics.length)\n                            for (var i = 0; i < message.metrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Metric.encode(message.metrics[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.metrics && message.metrics.length))\n                                        message.metrics = [];\n                                    message.metrics.push($root.opentelemetry.proto.metrics.v1.Metric.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.metrics != null && message.hasOwnProperty(\"metrics\")) {\n                            if (!Array.isArray(message.metrics))\n                                return \"metrics: array expected\";\n                            for (var i = 0; i < message.metrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Metric.verify(message.metrics[i]);\n                                if (error)\n                                    return \"metrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     */\n                    ScopeMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ScopeMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.metrics) {\n                            if (!Array.isArray(object.metrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: array expected\");\n                            message.metrics = [];\n                            for (var i = 0; i < object.metrics.length; ++i) {\n                                if (typeof object.metrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: object expected\");\n                                message.metrics[i] = $root.opentelemetry.proto.metrics.v1.Metric.fromObject(object.metrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ScopeMetrics} message ScopeMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.metrics = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.metrics && message.metrics.length) {\n                            object.metrics = [];\n                            for (var j = 0; j < message.metrics.length; ++j)\n                                object.metrics[j] = $root.opentelemetry.proto.metrics.v1.Metric.toObject(message.metrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ScopeMetrics\";\n                    };\n\n                    return ScopeMetrics;\n                })();\n\n                v1.Metric = (function() {\n\n                    /**\n                     * Properties of a Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetric\n                     * @property {string|null} [name] Metric name\n                     * @property {string|null} [description] Metric description\n                     * @property {string|null} [unit] Metric unit\n                     * @property {opentelemetry.proto.metrics.v1.IGauge|null} [gauge] Metric gauge\n                     * @property {opentelemetry.proto.metrics.v1.ISum|null} [sum] Metric sum\n                     * @property {opentelemetry.proto.metrics.v1.IHistogram|null} [histogram] Metric histogram\n                     * @property {opentelemetry.proto.metrics.v1.IExponentialHistogram|null} [exponentialHistogram] Metric exponentialHistogram\n                     * @property {opentelemetry.proto.metrics.v1.ISummary|null} [summary] Metric summary\n                     */\n\n                    /**\n                     * Constructs a new Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Metric.\n                     * @implements IMetric\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     */\n                    function Metric(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Metric name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.name = null;\n\n                    /**\n                     * Metric description.\n                     * @member {string|null|undefined} description\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.description = null;\n\n                    /**\n                     * Metric unit.\n                     * @member {string|null|undefined} unit\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.unit = null;\n\n                    /**\n                     * Metric gauge.\n                     * @member {opentelemetry.proto.metrics.v1.IGauge|null|undefined} gauge\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.gauge = null;\n\n                    /**\n                     * Metric sum.\n                     * @member {opentelemetry.proto.metrics.v1.ISum|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.sum = null;\n\n                    /**\n                     * Metric histogram.\n                     * @member {opentelemetry.proto.metrics.v1.IHistogram|null|undefined} histogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.histogram = null;\n\n                    /**\n                     * Metric exponentialHistogram.\n                     * @member {opentelemetry.proto.metrics.v1.IExponentialHistogram|null|undefined} exponentialHistogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.exponentialHistogram = null;\n\n                    /**\n                     * Metric summary.\n                     * @member {opentelemetry.proto.metrics.v1.ISummary|null|undefined} summary\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.summary = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Metric data.\n                     * @member {\"gauge\"|\"sum\"|\"histogram\"|\"exponentialHistogram\"|\"summary\"|undefined} data\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Object.defineProperty(Metric.prototype, \"data\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"gauge\", \"sum\", \"histogram\", \"exponentialHistogram\", \"summary\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Metric instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric instance\n                     */\n                    Metric.create = function create(properties) {\n                        return new Metric(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Metric message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                        if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);\n                        if (message.unit != null && Object.hasOwnProperty.call(message, \"unit\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.unit);\n                        if (message.gauge != null && Object.hasOwnProperty.call(message, \"gauge\"))\n                            $root.opentelemetry.proto.metrics.v1.Gauge.encode(message.gauge, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            $root.opentelemetry.proto.metrics.v1.Sum.encode(message.sum, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.histogram != null && Object.hasOwnProperty.call(message, \"histogram\"))\n                            $root.opentelemetry.proto.metrics.v1.Histogram.encode(message.histogram, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.exponentialHistogram != null && Object.hasOwnProperty.call(message, \"exponentialHistogram\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.encode(message.exponentialHistogram, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                        if (message.summary != null && Object.hasOwnProperty.call(message, \"summary\"))\n                            $root.opentelemetry.proto.metrics.v1.Summary.encode(message.summary, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Metric message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.description = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    message.unit = reader.string();\n                                    break;\n                                }\n                            case 5: {\n                                    message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 7: {\n                                    message.sum = $root.opentelemetry.proto.metrics.v1.Sum.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 9: {\n                                    message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 10: {\n                                    message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 11: {\n                                    message.summary = $root.opentelemetry.proto.metrics.v1.Summary.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Metric message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Metric.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            if (!$util.isString(message.description))\n                                return \"description: string expected\";\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            if (!$util.isString(message.unit))\n                                return \"unit: string expected\";\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Gauge.verify(message.gauge);\n                                if (error)\n                                    return \"gauge.\" + error;\n                            }\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Sum.verify(message.sum);\n                                if (error)\n                                    return \"sum.\" + error;\n                            }\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Histogram.verify(message.histogram);\n                                if (error)\n                                    return \"histogram.\" + error;\n                            }\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.verify(message.exponentialHistogram);\n                                if (error)\n                                    return \"exponentialHistogram.\" + error;\n                            }\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Summary.verify(message.summary);\n                                if (error)\n                                    return \"summary.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     */\n                    Metric.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Metric)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.description != null)\n                            message.description = String(object.description);\n                        if (object.unit != null)\n                            message.unit = String(object.unit);\n                        if (object.gauge != null) {\n                            if (typeof object.gauge !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.gauge: object expected\");\n                            message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.fromObject(object.gauge);\n                        }\n                        if (object.sum != null) {\n                            if (typeof object.sum !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.sum: object expected\");\n                            message.sum = $root.opentelemetry.proto.metrics.v1.Sum.fromObject(object.sum);\n                        }\n                        if (object.histogram != null) {\n                            if (typeof object.histogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.histogram: object expected\");\n                            message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.fromObject(object.histogram);\n                        }\n                        if (object.exponentialHistogram != null) {\n                            if (typeof object.exponentialHistogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.exponentialHistogram: object expected\");\n                            message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.fromObject(object.exponentialHistogram);\n                        }\n                        if (object.summary != null) {\n                            if (typeof object.summary !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.summary: object expected\");\n                            message.summary = $root.opentelemetry.proto.metrics.v1.Summary.fromObject(object.summary);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Metric message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Metric} message Metric\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Metric.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.description = \"\";\n                            object.unit = \"\";\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            object.description = message.description;\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            object.unit = message.unit;\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            object.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.toObject(message.gauge, options);\n                            if (options.oneofs)\n                                object.data = \"gauge\";\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = $root.opentelemetry.proto.metrics.v1.Sum.toObject(message.sum, options);\n                            if (options.oneofs)\n                                object.data = \"sum\";\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            object.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.toObject(message.histogram, options);\n                            if (options.oneofs)\n                                object.data = \"histogram\";\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            object.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.toObject(message.exponentialHistogram, options);\n                            if (options.oneofs)\n                                object.data = \"exponentialHistogram\";\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            object.summary = $root.opentelemetry.proto.metrics.v1.Summary.toObject(message.summary, options);\n                            if (options.oneofs)\n                                object.data = \"summary\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Metric to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Metric.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Metric\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Metric.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Metric\";\n                    };\n\n                    return Metric;\n                })();\n\n                v1.Gauge = (function() {\n\n                    /**\n                     * Properties of a Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IGauge\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Gauge dataPoints\n                     */\n\n                    /**\n                     * Constructs a new Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Gauge.\n                     * @implements IGauge\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     */\n                    function Gauge(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Gauge dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     */\n                    Gauge.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Creates a new Gauge instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge instance\n                     */\n                    Gauge.create = function create(properties) {\n                        return new Gauge(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Gauge message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Gauge message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Gauge message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Gauge.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Gauge message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     */\n                    Gauge.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Gauge)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Gauge message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Gauge} message Gauge\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Gauge.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Gauge to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Gauge.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Gauge\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Gauge.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Gauge\";\n                    };\n\n                    return Gauge;\n                })();\n\n                v1.Sum = (function() {\n\n                    /**\n                     * Properties of a Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Sum dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Sum aggregationTemporality\n                     * @property {boolean|null} [isMonotonic] Sum isMonotonic\n                     */\n\n                    /**\n                     * Constructs a new Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Sum.\n                     * @implements ISum\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     */\n                    function Sum(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Sum dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Sum aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Sum isMonotonic.\n                     * @member {boolean|null|undefined} isMonotonic\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.isMonotonic = null;\n\n                    /**\n                     * Creates a new Sum instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum instance\n                     */\n                    Sum.create = function create(properties) {\n                        return new Sum(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Sum message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        if (message.isMonotonic != null && Object.hasOwnProperty.call(message, \"isMonotonic\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isMonotonic);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Sum message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            case 3: {\n                                    message.isMonotonic = reader.bool();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Sum message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Sum.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            if (typeof message.isMonotonic !== \"boolean\")\n                                return \"isMonotonic: boolean expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Sum message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     */\n                    Sum.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Sum)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        if (object.isMonotonic != null)\n                            message.isMonotonic = Boolean(object.isMonotonic);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Sum message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Sum} message Sum\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Sum.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults) {\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                            object.isMonotonic = false;\n                        }\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            object.isMonotonic = message.isMonotonic;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Sum to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Sum.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Sum\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Sum.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Sum\";\n                    };\n\n                    return Sum;\n                })();\n\n                v1.Histogram = (function() {\n\n                    /**\n                     * Properties of a Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>|null} [dataPoints] Histogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Histogram aggregationTemporality\n                     */\n\n                    /**\n                     * Constructs a new Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Histogram.\n                     * @implements IHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     */\n                    function Histogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Histogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Histogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Creates a new Histogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram instance\n                     */\n                    Histogram.create = function create(properties) {\n                        return new Histogram(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Histogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Histogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.HistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Histogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Histogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Histogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     */\n                    Histogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Histogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Histogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Histogram} message Histogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Histogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Histogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Histogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Histogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Histogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Histogram\";\n                    };\n\n                    return Histogram;\n                })();\n\n                v1.ExponentialHistogram = (function() {\n\n                    /**\n                     * Properties of an ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>|null} [dataPoints] ExponentialHistogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] ExponentialHistogram aggregationTemporality\n                     */\n\n                    /**\n                     * Constructs a new ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogram.\n                     * @implements IExponentialHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     */\n                    function ExponentialHistogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ExponentialHistogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Creates a new ExponentialHistogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram instance\n                     */\n                    ExponentialHistogram.create = function create(properties) {\n                        return new ExponentialHistogram(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ExponentialHistogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ExponentialHistogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     */\n                    ExponentialHistogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ExponentialHistogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogram} message ExponentialHistogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ExponentialHistogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ExponentialHistogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogram\";\n                    };\n\n                    return ExponentialHistogram;\n                })();\n\n                v1.Summary = (function() {\n\n                    /**\n                     * Properties of a Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummary\n                     * @property {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>|null} [dataPoints] Summary dataPoints\n                     */\n\n                    /**\n                     * Constructs a new Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Summary.\n                     * @implements ISummary\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     */\n                    function Summary(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Summary dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     */\n                    Summary.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Creates a new Summary instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary instance\n                     */\n                    Summary.create = function create(properties) {\n                        return new Summary(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Summary message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Summary message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Summary message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Summary.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Summary message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     */\n                    Summary.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Summary)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Summary message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Summary} message Summary\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Summary.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Summary to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Summary.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Summary\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Summary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Summary\";\n                    };\n\n                    return Summary;\n                })();\n\n                /**\n                 * AggregationTemporality enum.\n                 * @name opentelemetry.proto.metrics.v1.AggregationTemporality\n                 * @enum {number}\n                 * @property {number} AGGREGATION_TEMPORALITY_UNSPECIFIED=0 AGGREGATION_TEMPORALITY_UNSPECIFIED value\n                 * @property {number} AGGREGATION_TEMPORALITY_DELTA=1 AGGREGATION_TEMPORALITY_DELTA value\n                 * @property {number} AGGREGATION_TEMPORALITY_CUMULATIVE=2 AGGREGATION_TEMPORALITY_CUMULATIVE value\n                 */\n                v1.AggregationTemporality = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"AGGREGATION_TEMPORALITY_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"AGGREGATION_TEMPORALITY_DELTA\"] = 1;\n                    values[valuesById[2] = \"AGGREGATION_TEMPORALITY_CUMULATIVE\"] = 2;\n                    return values;\n                })();\n\n                /**\n                 * DataPointFlags enum.\n                 * @name opentelemetry.proto.metrics.v1.DataPointFlags\n                 * @enum {number}\n                 * @property {number} DATA_POINT_FLAGS_DO_NOT_USE=0 DATA_POINT_FLAGS_DO_NOT_USE value\n                 * @property {number} DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK=1 DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK value\n                 */\n                v1.DataPointFlags = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"DATA_POINT_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[1] = \"DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\"] = 1;\n                    return values;\n                })();\n\n                v1.NumberDataPoint = (function() {\n\n                    /**\n                     * Properties of a NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface INumberDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] NumberDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] NumberDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] NumberDataPoint timeUnixNano\n                     * @property {number|null} [asDouble] NumberDataPoint asDouble\n                     * @property {number|Long|null} [asInt] NumberDataPoint asInt\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] NumberDataPoint exemplars\n                     * @property {number|null} [flags] NumberDataPoint flags\n                     */\n\n                    /**\n                     * Constructs a new NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a NumberDataPoint.\n                     * @implements INumberDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     */\n                    function NumberDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * NumberDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * NumberDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * NumberDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * NumberDataPoint asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asDouble = null;\n\n                    /**\n                     * NumberDataPoint asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asInt = null;\n\n                    /**\n                     * NumberDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * NumberDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.flags = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * NumberDataPoint value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(NumberDataPoint.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new NumberDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint instance\n                     */\n                    NumberDataPoint.create = function create(properties) {\n                        return new NumberDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified NumberDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.asDouble);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/49).sfixed64(message.asInt);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.flags);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified NumberDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a NumberDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    NumberDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a NumberDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     */\n                    NumberDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.NumberDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a NumberDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.NumberDataPoint} message NumberDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    NumberDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this NumberDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    NumberDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for NumberDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    NumberDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.NumberDataPoint\";\n                    };\n\n                    return NumberDataPoint;\n                })();\n\n                v1.HistogramDataPoint = (function() {\n\n                    /**\n                     * Properties of a HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] HistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] HistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] HistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] HistogramDataPoint count\n                     * @property {number|null} [sum] HistogramDataPoint sum\n                     * @property {Array.<number|Long>|null} [bucketCounts] HistogramDataPoint bucketCounts\n                     * @property {Array.<number>|null} [explicitBounds] HistogramDataPoint explicitBounds\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] HistogramDataPoint exemplars\n                     * @property {number|null} [flags] HistogramDataPoint flags\n                     * @property {number|null} [min] HistogramDataPoint min\n                     * @property {number|null} [max] HistogramDataPoint max\n                     */\n\n                    /**\n                     * Constructs a new HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a HistogramDataPoint.\n                     * @implements IHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function HistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.bucketCounts = [];\n                        this.explicitBounds = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * HistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * HistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * HistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.count = null;\n\n                    /**\n                     * HistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.sum = null;\n\n                    /**\n                     * HistogramDataPoint bucketCounts.\n                     * @member {Array.<number|Long>} bucketCounts\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.bucketCounts = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint explicitBounds.\n                     * @member {Array.<number>} explicitBounds\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.explicitBounds = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.flags = null;\n\n                    /**\n                     * HistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.min = null;\n\n                    /**\n                     * HistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.max = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * HistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * HistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * HistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new HistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint instance\n                     */\n                    HistogramDataPoint.create = function create(properties) {\n                        return new HistogramDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified HistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.bucketCounts != null && message.bucketCounts.length) {\n                            writer.uint32(/* id 6, wireType 2 =*/50).fork();\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                writer.fixed64(message.bucketCounts[i]);\n                            writer.ldelim();\n                        }\n                        if (message.explicitBounds != null && message.explicitBounds.length) {\n                            writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                writer.double(message.explicitBounds[i]);\n                            writer.ldelim();\n                        }\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 11, wireType 1 =*/89).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 12, wireType 1 =*/97).double(message.max);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified HistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.bucketCounts && message.bucketCounts.length))\n                                        message.bucketCounts = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.bucketCounts.push(reader.fixed64());\n                                    } else\n                                        message.bucketCounts.push(reader.fixed64());\n                                    break;\n                                }\n                            case 7: {\n                                    if (!(message.explicitBounds && message.explicitBounds.length))\n                                        message.explicitBounds = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.explicitBounds.push(reader.double());\n                                    } else\n                                        message.explicitBounds.push(reader.double());\n                                    break;\n                                }\n                            case 8: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                            case 12: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a HistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    HistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                            if (!Array.isArray(message.bucketCounts))\n                                return \"bucketCounts: array expected\";\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                    return \"bucketCounts: integer|Long[] expected\";\n                        }\n                        if (message.explicitBounds != null && message.hasOwnProperty(\"explicitBounds\")) {\n                            if (!Array.isArray(message.explicitBounds))\n                                return \"explicitBounds: array expected\";\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                if (typeof message.explicitBounds[i] !== \"number\")\n                                    return \"explicitBounds: number[] expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a HistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     */\n                    HistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.HistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.bucketCounts) {\n                            if (!Array.isArray(object.bucketCounts))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.bucketCounts: array expected\");\n                            message.bucketCounts = [];\n                            for (var i = 0; i < object.bucketCounts.length; ++i)\n                                if ($util.Long)\n                                    (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = false;\n                                else if (typeof object.bucketCounts[i] === \"string\")\n                                    message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                else if (typeof object.bucketCounts[i] === \"number\")\n                                    message.bucketCounts[i] = object.bucketCounts[i];\n                                else if (typeof object.bucketCounts[i] === \"object\")\n                                    message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber();\n                        }\n                        if (object.explicitBounds) {\n                            if (!Array.isArray(object.explicitBounds))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.explicitBounds: array expected\");\n                            message.explicitBounds = [];\n                            for (var i = 0; i < object.explicitBounds.length; ++i)\n                                message.explicitBounds[i] = Number(object.explicitBounds[i]);\n                        }\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a HistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.HistogramDataPoint} message HistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    HistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.bucketCounts = [];\n                            object.explicitBounds = [];\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.bucketCounts && message.bucketCounts.length) {\n                            object.bucketCounts = [];\n                            for (var j = 0; j < message.bucketCounts.length; ++j)\n                                if (typeof message.bucketCounts[j] === \"number\")\n                                    object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                else\n                                    object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber() : message.bucketCounts[j];\n                        }\n                        if (message.explicitBounds && message.explicitBounds.length) {\n                            object.explicitBounds = [];\n                            for (var j = 0; j < message.explicitBounds.length; ++j)\n                                object.explicitBounds[j] = options.json && !isFinite(message.explicitBounds[j]) ? String(message.explicitBounds[j]) : message.explicitBounds[j];\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this HistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    HistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for HistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    HistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.HistogramDataPoint\";\n                    };\n\n                    return HistogramDataPoint;\n                })();\n\n                v1.ExponentialHistogramDataPoint = (function() {\n\n                    /**\n                     * Properties of an ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] ExponentialHistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] ExponentialHistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] ExponentialHistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] ExponentialHistogramDataPoint count\n                     * @property {number|null} [sum] ExponentialHistogramDataPoint sum\n                     * @property {number|null} [scale] ExponentialHistogramDataPoint scale\n                     * @property {number|Long|null} [zeroCount] ExponentialHistogramDataPoint zeroCount\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [positive] ExponentialHistogramDataPoint positive\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [negative] ExponentialHistogramDataPoint negative\n                     * @property {number|null} [flags] ExponentialHistogramDataPoint flags\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] ExponentialHistogramDataPoint exemplars\n                     * @property {number|null} [min] ExponentialHistogramDataPoint min\n                     * @property {number|null} [max] ExponentialHistogramDataPoint max\n                     * @property {number|null} [zeroThreshold] ExponentialHistogramDataPoint zeroThreshold\n                     */\n\n                    /**\n                     * Constructs a new ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogramDataPoint.\n                     * @implements IExponentialHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function ExponentialHistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ExponentialHistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.count = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.sum = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint scale.\n                     * @member {number|null|undefined} scale\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.scale = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint zeroCount.\n                     * @member {number|Long|null|undefined} zeroCount\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroCount = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint positive.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} positive\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.positive = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint negative.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} negative\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.negative = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.flags = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.min = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.max = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint zeroThreshold.\n                     * @member {number|null|undefined} zeroThreshold\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroThreshold = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * ExponentialHistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * ExponentialHistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * ExponentialHistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new ExponentialHistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint instance\n                     */\n                    ExponentialHistogramDataPoint.create = function create(properties) {\n                        return new ExponentialHistogramDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.scale != null && Object.hasOwnProperty.call(message, \"scale\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).sint32(message.scale);\n                        if (message.zeroCount != null && Object.hasOwnProperty.call(message, \"zeroCount\"))\n                            writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.zeroCount);\n                        if (message.positive != null && Object.hasOwnProperty.call(message, \"positive\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.positive, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                        if (message.negative != null && Object.hasOwnProperty.call(message, \"negative\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.negative, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 12, wireType 1 =*/97).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 13, wireType 1 =*/105).double(message.max);\n                        if (message.zeroThreshold != null && Object.hasOwnProperty.call(message, \"zeroThreshold\"))\n                            writer.uint32(/* id 14, wireType 1 =*/113).double(message.zeroThreshold);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.scale = reader.sint32();\n                                    break;\n                                }\n                            case 7: {\n                                    message.zeroCount = reader.fixed64();\n                                    break;\n                                }\n                            case 8: {\n                                    message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 9: {\n                                    message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 12: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                            case 13: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                            case 14: {\n                                    message.zeroThreshold = reader.double();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ExponentialHistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            if (!$util.isInteger(message.scale))\n                                return \"scale: integer expected\";\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (!$util.isInteger(message.zeroCount) && !(message.zeroCount && $util.isInteger(message.zeroCount.low) && $util.isInteger(message.zeroCount.high)))\n                                return \"zeroCount: integer|Long expected\";\n                        if (message.positive != null && message.hasOwnProperty(\"positive\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.positive);\n                            if (error)\n                                return \"positive.\" + error;\n                        }\n                        if (message.negative != null && message.hasOwnProperty(\"negative\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.negative);\n                            if (error)\n                                return \"negative.\" + error;\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            if (typeof message.zeroThreshold !== \"number\")\n                                return \"zeroThreshold: number expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ExponentialHistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     */\n                    ExponentialHistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.scale != null)\n                            message.scale = object.scale | 0;\n                        if (object.zeroCount != null)\n                            if ($util.Long)\n                                (message.zeroCount = $util.Long.fromValue(object.zeroCount)).unsigned = false;\n                            else if (typeof object.zeroCount === \"string\")\n                                message.zeroCount = parseInt(object.zeroCount, 10);\n                            else if (typeof object.zeroCount === \"number\")\n                                message.zeroCount = object.zeroCount;\n                            else if (typeof object.zeroCount === \"object\")\n                                message.zeroCount = new $util.LongBits(object.zeroCount.low >>> 0, object.zeroCount.high >>> 0).toNumber();\n                        if (object.positive != null) {\n                            if (typeof object.positive !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive: object expected\");\n                            message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.positive);\n                        }\n                        if (object.negative != null) {\n                            if (typeof object.negative !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative: object expected\");\n                            message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.negative);\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        if (object.zeroThreshold != null)\n                            message.zeroThreshold = Number(object.zeroThreshold);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ExponentialHistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} message ExponentialHistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.exemplars = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.scale = 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.zeroCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.zeroCount = options.longs === String ? \"0\" : 0;\n                            object.positive = null;\n                            object.negative = null;\n                            object.flags = 0;\n                            object.zeroThreshold = 0;\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            object.scale = message.scale;\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (typeof message.zeroCount === \"number\")\n                                object.zeroCount = options.longs === String ? String(message.zeroCount) : message.zeroCount;\n                            else\n                                object.zeroCount = options.longs === String ? $util.Long.prototype.toString.call(message.zeroCount) : options.longs === Number ? new $util.LongBits(message.zeroCount.low >>> 0, message.zeroCount.high >>> 0).toNumber() : message.zeroCount;\n                        if (message.positive != null && message.hasOwnProperty(\"positive\"))\n                            object.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.positive, options);\n                        if (message.negative != null && message.hasOwnProperty(\"negative\"))\n                            object.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.negative, options);\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            object.zeroThreshold = options.json && !isFinite(message.zeroThreshold) ? String(message.zeroThreshold) : message.zeroThreshold;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ExponentialHistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ExponentialHistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\";\n                    };\n\n                    ExponentialHistogramDataPoint.Buckets = (function() {\n\n                        /**\n                         * Properties of a Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @interface IBuckets\n                         * @property {number|null} [offset] Buckets offset\n                         * @property {Array.<number|Long>|null} [bucketCounts] Buckets bucketCounts\n                         */\n\n                        /**\n                         * Constructs a new Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @classdesc Represents a Buckets.\n                         * @implements IBuckets\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         */\n                        function Buckets(properties) {\n                            this.bucketCounts = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Buckets offset.\n                         * @member {number|null|undefined} offset\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.offset = null;\n\n                        /**\n                         * Buckets bucketCounts.\n                         * @member {Array.<number|Long>} bucketCounts\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.bucketCounts = $util.emptyArray;\n\n                        /**\n                         * Creates a new Buckets instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets instance\n                         */\n                        Buckets.create = function create(properties) {\n                            return new Buckets(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Buckets message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.offset);\n                            if (message.bucketCounts != null && message.bucketCounts.length) {\n                                writer.uint32(/* id 2, wireType 2 =*/18).fork();\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    writer.uint64(message.bucketCounts[i]);\n                                writer.ldelim();\n                            }\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Buckets message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.offset = reader.sint32();\n                                        break;\n                                    }\n                                case 2: {\n                                        if (!(message.bucketCounts && message.bucketCounts.length))\n                                            message.bucketCounts = [];\n                                        if ((tag & 7) === 2) {\n                                            var end2 = reader.uint32() + reader.pos;\n                                            while (reader.pos < end2)\n                                                message.bucketCounts.push(reader.uint64());\n                                        } else\n                                            message.bucketCounts.push(reader.uint64());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Buckets message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Buckets.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                if (!$util.isInteger(message.offset))\n                                    return \"offset: integer expected\";\n                            if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                                if (!Array.isArray(message.bucketCounts))\n                                    return \"bucketCounts: array expected\";\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                        return \"bucketCounts: integer|Long[] expected\";\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Buckets message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         */\n                        Buckets.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            if (object.offset != null)\n                                message.offset = object.offset | 0;\n                            if (object.bucketCounts) {\n                                if (!Array.isArray(object.bucketCounts))\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucketCounts: array expected\");\n                                message.bucketCounts = [];\n                                for (var i = 0; i < object.bucketCounts.length; ++i)\n                                    if ($util.Long)\n                                        (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = true;\n                                    else if (typeof object.bucketCounts[i] === \"string\")\n                                        message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                    else if (typeof object.bucketCounts[i] === \"number\")\n                                        message.bucketCounts[i] = object.bucketCounts[i];\n                                    else if (typeof object.bucketCounts[i] === \"object\")\n                                        message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber(true);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Buckets message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} message Buckets\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Buckets.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.bucketCounts = [];\n                            if (options.defaults)\n                                object.offset = 0;\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                object.offset = message.offset;\n                            if (message.bucketCounts && message.bucketCounts.length) {\n                                object.bucketCounts = [];\n                                for (var j = 0; j < message.bucketCounts.length; ++j)\n                                    if (typeof message.bucketCounts[j] === \"number\")\n                                        object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                    else\n                                        object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber(true) : message.bucketCounts[j];\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Buckets to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Buckets.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Buckets\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Buckets.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\";\n                        };\n\n                        return Buckets;\n                    })();\n\n                    return ExponentialHistogramDataPoint;\n                })();\n\n                v1.SummaryDataPoint = (function() {\n\n                    /**\n                     * Properties of a SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummaryDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] SummaryDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] SummaryDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] SummaryDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] SummaryDataPoint count\n                     * @property {number|null} [sum] SummaryDataPoint sum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>|null} [quantileValues] SummaryDataPoint quantileValues\n                     * @property {number|null} [flags] SummaryDataPoint flags\n                     */\n\n                    /**\n                     * Constructs a new SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a SummaryDataPoint.\n                     * @implements ISummaryDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     */\n                    function SummaryDataPoint(properties) {\n                        this.attributes = [];\n                        this.quantileValues = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * SummaryDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * SummaryDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * SummaryDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * SummaryDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.count = null;\n\n                    /**\n                     * SummaryDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.sum = null;\n\n                    /**\n                     * SummaryDataPoint quantileValues.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>} quantileValues\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.quantileValues = $util.emptyArray;\n\n                    /**\n                     * SummaryDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.flags = null;\n\n                    /**\n                     * Creates a new SummaryDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint instance\n                     */\n                    SummaryDataPoint.create = function create(properties) {\n                        return new SummaryDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified SummaryDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.quantileValues != null && message.quantileValues.length)\n                            for (var i = 0; i < message.quantileValues.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.encode(message.quantileValues[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.flags);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified SummaryDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.quantileValues && message.quantileValues.length))\n                                        message.quantileValues = [];\n                                    message.quantileValues.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a SummaryDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    SummaryDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        if (message.quantileValues != null && message.hasOwnProperty(\"quantileValues\")) {\n                            if (!Array.isArray(message.quantileValues))\n                                return \"quantileValues: array expected\";\n                            for (var i = 0; i < message.quantileValues.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify(message.quantileValues[i]);\n                                if (error)\n                                    return \"quantileValues.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a SummaryDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     */\n                    SummaryDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.quantileValues) {\n                            if (!Array.isArray(object.quantileValues))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: array expected\");\n                            message.quantileValues = [];\n                            for (var i = 0; i < object.quantileValues.length; ++i) {\n                                if (typeof object.quantileValues[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: object expected\");\n                                message.quantileValues[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.fromObject(object.quantileValues[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a SummaryDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint} message SummaryDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    SummaryDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.quantileValues = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.sum = 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                        if (message.quantileValues && message.quantileValues.length) {\n                            object.quantileValues = [];\n                            for (var j = 0; j < message.quantileValues.length; ++j)\n                                object.quantileValues[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.toObject(message.quantileValues[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this SummaryDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    SummaryDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for SummaryDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    SummaryDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint\";\n                    };\n\n                    SummaryDataPoint.ValueAtQuantile = (function() {\n\n                        /**\n                         * Properties of a ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @interface IValueAtQuantile\n                         * @property {number|null} [quantile] ValueAtQuantile quantile\n                         * @property {number|null} [value] ValueAtQuantile value\n                         */\n\n                        /**\n                         * Constructs a new ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @classdesc Represents a ValueAtQuantile.\n                         * @implements IValueAtQuantile\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         */\n                        function ValueAtQuantile(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ValueAtQuantile quantile.\n                         * @member {number|null|undefined} quantile\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.quantile = null;\n\n                        /**\n                         * ValueAtQuantile value.\n                         * @member {number|null|undefined} value\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.value = null;\n\n                        /**\n                         * Creates a new ValueAtQuantile instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile instance\n                         */\n                        ValueAtQuantile.create = function create(properties) {\n                            return new ValueAtQuantile(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ValueAtQuantile message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.quantile != null && Object.hasOwnProperty.call(message, \"quantile\"))\n                                writer.uint32(/* id 1, wireType 1 =*/9).double(message.quantile);\n                            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ValueAtQuantile message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.quantile = reader.double();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.value = reader.double();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a ValueAtQuantile message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ValueAtQuantile.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                if (typeof message.quantile !== \"number\")\n                                    return \"quantile: number expected\";\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                if (typeof message.value !== \"number\")\n                                    return \"value: number expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a ValueAtQuantile message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         */\n                        ValueAtQuantile.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            if (object.quantile != null)\n                                message.quantile = Number(object.quantile);\n                            if (object.value != null)\n                                message.value = Number(object.value);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a ValueAtQuantile message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} message ValueAtQuantile\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ValueAtQuantile.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                object.quantile = 0;\n                                object.value = 0;\n                            }\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                object.quantile = options.json && !isFinite(message.quantile) ? String(message.quantile) : message.quantile;\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ValueAtQuantile to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ValueAtQuantile.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ValueAtQuantile\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ValueAtQuantile.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\";\n                        };\n\n                        return ValueAtQuantile;\n                    })();\n\n                    return SummaryDataPoint;\n                })();\n\n                v1.Exemplar = (function() {\n\n                    /**\n                     * Properties of an Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExemplar\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [filteredAttributes] Exemplar filteredAttributes\n                     * @property {number|Long|null} [timeUnixNano] Exemplar timeUnixNano\n                     * @property {number|null} [asDouble] Exemplar asDouble\n                     * @property {number|Long|null} [asInt] Exemplar asInt\n                     * @property {Uint8Array|null} [spanId] Exemplar spanId\n                     * @property {Uint8Array|null} [traceId] Exemplar traceId\n                     */\n\n                    /**\n                     * Constructs a new Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an Exemplar.\n                     * @implements IExemplar\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     */\n                    function Exemplar(properties) {\n                        this.filteredAttributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Exemplar filteredAttributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} filteredAttributes\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.filteredAttributes = $util.emptyArray;\n\n                    /**\n                     * Exemplar timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.timeUnixNano = null;\n\n                    /**\n                     * Exemplar asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asDouble = null;\n\n                    /**\n                     * Exemplar asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asInt = null;\n\n                    /**\n                     * Exemplar spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.spanId = null;\n\n                    /**\n                     * Exemplar traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.traceId = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Exemplar value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Object.defineProperty(Exemplar.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Exemplar instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar instance\n                     */\n                    Exemplar.create = function create(properties) {\n                        return new Exemplar(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Exemplar message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.asDouble);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.spanId);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.traceId);\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/49).sfixed64(message.asInt);\n                        if (message.filteredAttributes != null && message.filteredAttributes.length)\n                            for (var i = 0; i < message.filteredAttributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.filteredAttributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Exemplar message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.filteredAttributes && message.filteredAttributes.length))\n                                        message.filteredAttributes = [];\n                                    message.filteredAttributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            case 5: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an Exemplar message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Exemplar.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.filteredAttributes != null && message.hasOwnProperty(\"filteredAttributes\")) {\n                            if (!Array.isArray(message.filteredAttributes))\n                                return \"filteredAttributes: array expected\";\n                            for (var i = 0; i < message.filteredAttributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.filteredAttributes[i]);\n                                if (error)\n                                    return \"filteredAttributes.\" + error;\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an Exemplar message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     */\n                    Exemplar.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Exemplar)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        if (object.filteredAttributes) {\n                            if (!Array.isArray(object.filteredAttributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: array expected\");\n                            message.filteredAttributes = [];\n                            for (var i = 0; i < object.filteredAttributes.length; ++i) {\n                                if (typeof object.filteredAttributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: object expected\");\n                                message.filteredAttributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.filteredAttributes[i]);\n                            }\n                        }\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an Exemplar message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Exemplar} message Exemplar\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Exemplar.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.filteredAttributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.filteredAttributes && message.filteredAttributes.length) {\n                            object.filteredAttributes = [];\n                            for (var j = 0; j < message.filteredAttributes.length; ++j)\n                                object.filteredAttributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.filteredAttributes[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Exemplar to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Exemplar.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Exemplar\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Exemplar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Exemplar\";\n                    };\n\n                    return Exemplar;\n                })();\n\n                return v1;\n            })();\n\n            return metrics;\n        })();\n\n        proto.logs = (function() {\n\n            /**\n             * Namespace logs.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var logs = {};\n\n            logs.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.logs\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.LogsData = (function() {\n\n                    /**\n                     * Properties of a LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogsData\n                     * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] LogsData resourceLogs\n                     */\n\n                    /**\n                     * Constructs a new LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogsData.\n                     * @implements ILogsData\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     */\n                    function LogsData(properties) {\n                        this.resourceLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * LogsData resourceLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     */\n                    LogsData.prototype.resourceLogs = $util.emptyArray;\n\n                    /**\n                     * Creates a new LogsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData instance\n                     */\n                    LogsData.create = function create(properties) {\n                        return new LogsData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified LogsData message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceLogs != null && message.resourceLogs.length)\n                            for (var i = 0; i < message.resourceLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified LogsData message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceLogs && message.resourceLogs.length))\n                                        message.resourceLogs = [];\n                                    message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a LogsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                            if (!Array.isArray(message.resourceLogs))\n                                return \"resourceLogs: array expected\";\n                            for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                if (error)\n                                    return \"resourceLogs.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a LogsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     */\n                    LogsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        if (object.resourceLogs) {\n                            if (!Array.isArray(object.resourceLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: array expected\");\n                            message.resourceLogs = [];\n                            for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                if (typeof object.resourceLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: object expected\");\n                                message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a LogsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogsData} message LogsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceLogs = [];\n                        if (message.resourceLogs && message.resourceLogs.length) {\n                            object.resourceLogs = [];\n                            for (var j = 0; j < message.resourceLogs.length; ++j)\n                                object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this LogsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for LogsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogsData\";\n                    };\n\n                    return LogsData;\n                })();\n\n                v1.ResourceLogs = (function() {\n\n                    /**\n                     * Properties of a ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IResourceLogs\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceLogs resource\n                     * @property {Array.<opentelemetry.proto.logs.v1.IScopeLogs>|null} [scopeLogs] ResourceLogs scopeLogs\n                     * @property {string|null} [schemaUrl] ResourceLogs schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ResourceLogs.\n                     * @implements IResourceLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     */\n                    function ResourceLogs(properties) {\n                        this.scopeLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceLogs resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.resource = null;\n\n                    /**\n                     * ResourceLogs scopeLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IScopeLogs>} scopeLogs\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.scopeLogs = $util.emptyArray;\n\n                    /**\n                     * ResourceLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs instance\n                     */\n                    ResourceLogs.create = function create(properties) {\n                        return new ResourceLogs(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeLogs != null && message.scopeLogs.length)\n                            for (var i = 0; i < message.scopeLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ScopeLogs.encode(message.scopeLogs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeLogs && message.scopeLogs.length))\n                                        message.scopeLogs = [];\n                                    message.scopeLogs.push($root.opentelemetry.proto.logs.v1.ScopeLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeLogs != null && message.hasOwnProperty(\"scopeLogs\")) {\n                            if (!Array.isArray(message.scopeLogs))\n                                return \"scopeLogs: array expected\";\n                            for (var i = 0; i < message.scopeLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ScopeLogs.verify(message.scopeLogs[i]);\n                                if (error)\n                                    return \"scopeLogs.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     */\n                    ResourceLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ResourceLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeLogs) {\n                            if (!Array.isArray(object.scopeLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: array expected\");\n                            message.scopeLogs = [];\n                            for (var i = 0; i < object.scopeLogs.length; ++i) {\n                                if (typeof object.scopeLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: object expected\");\n                                message.scopeLogs[i] = $root.opentelemetry.proto.logs.v1.ScopeLogs.fromObject(object.scopeLogs[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ResourceLogs} message ResourceLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeLogs = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeLogs && message.scopeLogs.length) {\n                            object.scopeLogs = [];\n                            for (var j = 0; j < message.scopeLogs.length; ++j)\n                                object.scopeLogs[j] = $root.opentelemetry.proto.logs.v1.ScopeLogs.toObject(message.scopeLogs[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ResourceLogs\";\n                    };\n\n                    return ResourceLogs;\n                })();\n\n                v1.ScopeLogs = (function() {\n\n                    /**\n                     * Properties of a ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IScopeLogs\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeLogs scope\n                     * @property {Array.<opentelemetry.proto.logs.v1.ILogRecord>|null} [logRecords] ScopeLogs logRecords\n                     * @property {string|null} [schemaUrl] ScopeLogs schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ScopeLogs.\n                     * @implements IScopeLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     */\n                    function ScopeLogs(properties) {\n                        this.logRecords = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeLogs scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.scope = null;\n\n                    /**\n                     * ScopeLogs logRecords.\n                     * @member {Array.<opentelemetry.proto.logs.v1.ILogRecord>} logRecords\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.logRecords = $util.emptyArray;\n\n                    /**\n                     * ScopeLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs instance\n                     */\n                    ScopeLogs.create = function create(properties) {\n                        return new ScopeLogs(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.logRecords != null && message.logRecords.length)\n                            for (var i = 0; i < message.logRecords.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.LogRecord.encode(message.logRecords[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.logRecords && message.logRecords.length))\n                                        message.logRecords = [];\n                                    message.logRecords.push($root.opentelemetry.proto.logs.v1.LogRecord.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.logRecords != null && message.hasOwnProperty(\"logRecords\")) {\n                            if (!Array.isArray(message.logRecords))\n                                return \"logRecords: array expected\";\n                            for (var i = 0; i < message.logRecords.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.LogRecord.verify(message.logRecords[i]);\n                                if (error)\n                                    return \"logRecords.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     */\n                    ScopeLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ScopeLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.logRecords) {\n                            if (!Array.isArray(object.logRecords))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: array expected\");\n                            message.logRecords = [];\n                            for (var i = 0; i < object.logRecords.length; ++i) {\n                                if (typeof object.logRecords[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: object expected\");\n                                message.logRecords[i] = $root.opentelemetry.proto.logs.v1.LogRecord.fromObject(object.logRecords[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ScopeLogs} message ScopeLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.logRecords = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.logRecords && message.logRecords.length) {\n                            object.logRecords = [];\n                            for (var j = 0; j < message.logRecords.length; ++j)\n                                object.logRecords[j] = $root.opentelemetry.proto.logs.v1.LogRecord.toObject(message.logRecords[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ScopeLogs\";\n                    };\n\n                    return ScopeLogs;\n                })();\n\n                /**\n                 * SeverityNumber enum.\n                 * @name opentelemetry.proto.logs.v1.SeverityNumber\n                 * @enum {number}\n                 * @property {number} SEVERITY_NUMBER_UNSPECIFIED=0 SEVERITY_NUMBER_UNSPECIFIED value\n                 * @property {number} SEVERITY_NUMBER_TRACE=1 SEVERITY_NUMBER_TRACE value\n                 * @property {number} SEVERITY_NUMBER_TRACE2=2 SEVERITY_NUMBER_TRACE2 value\n                 * @property {number} SEVERITY_NUMBER_TRACE3=3 SEVERITY_NUMBER_TRACE3 value\n                 * @property {number} SEVERITY_NUMBER_TRACE4=4 SEVERITY_NUMBER_TRACE4 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG=5 SEVERITY_NUMBER_DEBUG value\n                 * @property {number} SEVERITY_NUMBER_DEBUG2=6 SEVERITY_NUMBER_DEBUG2 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG3=7 SEVERITY_NUMBER_DEBUG3 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG4=8 SEVERITY_NUMBER_DEBUG4 value\n                 * @property {number} SEVERITY_NUMBER_INFO=9 SEVERITY_NUMBER_INFO value\n                 * @property {number} SEVERITY_NUMBER_INFO2=10 SEVERITY_NUMBER_INFO2 value\n                 * @property {number} SEVERITY_NUMBER_INFO3=11 SEVERITY_NUMBER_INFO3 value\n                 * @property {number} SEVERITY_NUMBER_INFO4=12 SEVERITY_NUMBER_INFO4 value\n                 * @property {number} SEVERITY_NUMBER_WARN=13 SEVERITY_NUMBER_WARN value\n                 * @property {number} SEVERITY_NUMBER_WARN2=14 SEVERITY_NUMBER_WARN2 value\n                 * @property {number} SEVERITY_NUMBER_WARN3=15 SEVERITY_NUMBER_WARN3 value\n                 * @property {number} SEVERITY_NUMBER_WARN4=16 SEVERITY_NUMBER_WARN4 value\n                 * @property {number} SEVERITY_NUMBER_ERROR=17 SEVERITY_NUMBER_ERROR value\n                 * @property {number} SEVERITY_NUMBER_ERROR2=18 SEVERITY_NUMBER_ERROR2 value\n                 * @property {number} SEVERITY_NUMBER_ERROR3=19 SEVERITY_NUMBER_ERROR3 value\n                 * @property {number} SEVERITY_NUMBER_ERROR4=20 SEVERITY_NUMBER_ERROR4 value\n                 * @property {number} SEVERITY_NUMBER_FATAL=21 SEVERITY_NUMBER_FATAL value\n                 * @property {number} SEVERITY_NUMBER_FATAL2=22 SEVERITY_NUMBER_FATAL2 value\n                 * @property {number} SEVERITY_NUMBER_FATAL3=23 SEVERITY_NUMBER_FATAL3 value\n                 * @property {number} SEVERITY_NUMBER_FATAL4=24 SEVERITY_NUMBER_FATAL4 value\n                 */\n                v1.SeverityNumber = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"SEVERITY_NUMBER_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"SEVERITY_NUMBER_TRACE\"] = 1;\n                    values[valuesById[2] = \"SEVERITY_NUMBER_TRACE2\"] = 2;\n                    values[valuesById[3] = \"SEVERITY_NUMBER_TRACE3\"] = 3;\n                    values[valuesById[4] = \"SEVERITY_NUMBER_TRACE4\"] = 4;\n                    values[valuesById[5] = \"SEVERITY_NUMBER_DEBUG\"] = 5;\n                    values[valuesById[6] = \"SEVERITY_NUMBER_DEBUG2\"] = 6;\n                    values[valuesById[7] = \"SEVERITY_NUMBER_DEBUG3\"] = 7;\n                    values[valuesById[8] = \"SEVERITY_NUMBER_DEBUG4\"] = 8;\n                    values[valuesById[9] = \"SEVERITY_NUMBER_INFO\"] = 9;\n                    values[valuesById[10] = \"SEVERITY_NUMBER_INFO2\"] = 10;\n                    values[valuesById[11] = \"SEVERITY_NUMBER_INFO3\"] = 11;\n                    values[valuesById[12] = \"SEVERITY_NUMBER_INFO4\"] = 12;\n                    values[valuesById[13] = \"SEVERITY_NUMBER_WARN\"] = 13;\n                    values[valuesById[14] = \"SEVERITY_NUMBER_WARN2\"] = 14;\n                    values[valuesById[15] = \"SEVERITY_NUMBER_WARN3\"] = 15;\n                    values[valuesById[16] = \"SEVERITY_NUMBER_WARN4\"] = 16;\n                    values[valuesById[17] = \"SEVERITY_NUMBER_ERROR\"] = 17;\n                    values[valuesById[18] = \"SEVERITY_NUMBER_ERROR2\"] = 18;\n                    values[valuesById[19] = \"SEVERITY_NUMBER_ERROR3\"] = 19;\n                    values[valuesById[20] = \"SEVERITY_NUMBER_ERROR4\"] = 20;\n                    values[valuesById[21] = \"SEVERITY_NUMBER_FATAL\"] = 21;\n                    values[valuesById[22] = \"SEVERITY_NUMBER_FATAL2\"] = 22;\n                    values[valuesById[23] = \"SEVERITY_NUMBER_FATAL3\"] = 23;\n                    values[valuesById[24] = \"SEVERITY_NUMBER_FATAL4\"] = 24;\n                    return values;\n                })();\n\n                /**\n                 * LogRecordFlags enum.\n                 * @name opentelemetry.proto.logs.v1.LogRecordFlags\n                 * @enum {number}\n                 * @property {number} LOG_RECORD_FLAGS_DO_NOT_USE=0 LOG_RECORD_FLAGS_DO_NOT_USE value\n                 * @property {number} LOG_RECORD_FLAGS_TRACE_FLAGS_MASK=255 LOG_RECORD_FLAGS_TRACE_FLAGS_MASK value\n                 */\n                v1.LogRecordFlags = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"LOG_RECORD_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[255] = \"LOG_RECORD_FLAGS_TRACE_FLAGS_MASK\"] = 255;\n                    return values;\n                })();\n\n                v1.LogRecord = (function() {\n\n                    /**\n                     * Properties of a LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogRecord\n                     * @property {number|Long|null} [timeUnixNano] LogRecord timeUnixNano\n                     * @property {number|Long|null} [observedTimeUnixNano] LogRecord observedTimeUnixNano\n                     * @property {opentelemetry.proto.logs.v1.SeverityNumber|null} [severityNumber] LogRecord severityNumber\n                     * @property {string|null} [severityText] LogRecord severityText\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [body] LogRecord body\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] LogRecord attributes\n                     * @property {number|null} [droppedAttributesCount] LogRecord droppedAttributesCount\n                     * @property {number|null} [flags] LogRecord flags\n                     * @property {Uint8Array|null} [traceId] LogRecord traceId\n                     * @property {Uint8Array|null} [spanId] LogRecord spanId\n                     */\n\n                    /**\n                     * Constructs a new LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogRecord.\n                     * @implements ILogRecord\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     */\n                    function LogRecord(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * LogRecord timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.timeUnixNano = null;\n\n                    /**\n                     * LogRecord observedTimeUnixNano.\n                     * @member {number|Long|null|undefined} observedTimeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.observedTimeUnixNano = null;\n\n                    /**\n                     * LogRecord severityNumber.\n                     * @member {opentelemetry.proto.logs.v1.SeverityNumber|null|undefined} severityNumber\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityNumber = null;\n\n                    /**\n                     * LogRecord severityText.\n                     * @member {string|null|undefined} severityText\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityText = null;\n\n                    /**\n                     * LogRecord body.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} body\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.body = null;\n\n                    /**\n                     * LogRecord attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * LogRecord droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * LogRecord flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.flags = null;\n\n                    /**\n                     * LogRecord traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.traceId = null;\n\n                    /**\n                     * LogRecord spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.spanId = null;\n\n                    /**\n                     * Creates a new LogRecord instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord instance\n                     */\n                    LogRecord.create = function create(properties) {\n                        return new LogRecord(properties);\n                    };\n\n                    /**\n                     * Encodes the specified LogRecord message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.timeUnixNano);\n                        if (message.severityNumber != null && Object.hasOwnProperty.call(message, \"severityNumber\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severityNumber);\n                        if (message.severityText != null && Object.hasOwnProperty.call(message, \"severityText\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.severityText);\n                        if (message.body != null && Object.hasOwnProperty.call(message, \"body\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.body, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.droppedAttributesCount);\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.flags);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.spanId);\n                        if (message.observedTimeUnixNano != null && Object.hasOwnProperty.call(message, \"observedTimeUnixNano\"))\n                            writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.observedTimeUnixNano);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified LogRecord message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 11: {\n                                    message.observedTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 2: {\n                                    message.severityNumber = reader.int32();\n                                    break;\n                                }\n                            case 3: {\n                                    message.severityText = reader.string();\n                                    break;\n                                }\n                            case 5: {\n                                    message.body = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 7: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.fixed32();\n                                    break;\n                                }\n                            case 9: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            case 10: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a LogRecord message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogRecord.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (!$util.isInteger(message.observedTimeUnixNano) && !(message.observedTimeUnixNano && $util.isInteger(message.observedTimeUnixNano.low) && $util.isInteger(message.observedTimeUnixNano.high)))\n                                return \"observedTimeUnixNano: integer|Long expected\";\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            switch (message.severityNumber) {\n                            default:\n                                return \"severityNumber: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 7:\n                            case 8:\n                            case 9:\n                            case 10:\n                            case 11:\n                            case 12:\n                            case 13:\n                            case 14:\n                            case 15:\n                            case 16:\n                            case 17:\n                            case 18:\n                            case 19:\n                            case 20:\n                            case 21:\n                            case 22:\n                            case 23:\n                            case 24:\n                                break;\n                            }\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            if (!$util.isString(message.severityText))\n                                return \"severityText: string expected\";\n                        if (message.body != null && message.hasOwnProperty(\"body\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.body);\n                            if (error)\n                                return \"body.\" + error;\n                        }\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a LogRecord message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     */\n                    LogRecord.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogRecord)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.observedTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.observedTimeUnixNano = $util.Long.fromValue(object.observedTimeUnixNano)).unsigned = false;\n                            else if (typeof object.observedTimeUnixNano === \"string\")\n                                message.observedTimeUnixNano = parseInt(object.observedTimeUnixNano, 10);\n                            else if (typeof object.observedTimeUnixNano === \"number\")\n                                message.observedTimeUnixNano = object.observedTimeUnixNano;\n                            else if (typeof object.observedTimeUnixNano === \"object\")\n                                message.observedTimeUnixNano = new $util.LongBits(object.observedTimeUnixNano.low >>> 0, object.observedTimeUnixNano.high >>> 0).toNumber();\n                        switch (object.severityNumber) {\n                        default:\n                            if (typeof object.severityNumber === \"number\") {\n                                message.severityNumber = object.severityNumber;\n                                break;\n                            }\n                            break;\n                        case \"SEVERITY_NUMBER_UNSPECIFIED\":\n                        case 0:\n                            message.severityNumber = 0;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE\":\n                        case 1:\n                            message.severityNumber = 1;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE2\":\n                        case 2:\n                            message.severityNumber = 2;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE3\":\n                        case 3:\n                            message.severityNumber = 3;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE4\":\n                        case 4:\n                            message.severityNumber = 4;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG\":\n                        case 5:\n                            message.severityNumber = 5;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG2\":\n                        case 6:\n                            message.severityNumber = 6;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG3\":\n                        case 7:\n                            message.severityNumber = 7;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG4\":\n                        case 8:\n                            message.severityNumber = 8;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO\":\n                        case 9:\n                            message.severityNumber = 9;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO2\":\n                        case 10:\n                            message.severityNumber = 10;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO3\":\n                        case 11:\n                            message.severityNumber = 11;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO4\":\n                        case 12:\n                            message.severityNumber = 12;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN\":\n                        case 13:\n                            message.severityNumber = 13;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN2\":\n                        case 14:\n                            message.severityNumber = 14;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN3\":\n                        case 15:\n                            message.severityNumber = 15;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN4\":\n                        case 16:\n                            message.severityNumber = 16;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR\":\n                        case 17:\n                            message.severityNumber = 17;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR2\":\n                        case 18:\n                            message.severityNumber = 18;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR3\":\n                        case 19:\n                            message.severityNumber = 19;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR4\":\n                        case 20:\n                            message.severityNumber = 20;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL\":\n                        case 21:\n                            message.severityNumber = 21;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL2\":\n                        case 22:\n                            message.severityNumber = 22;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL3\":\n                        case 23:\n                            message.severityNumber = 23;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL4\":\n                        case 24:\n                            message.severityNumber = 24;\n                            break;\n                        }\n                        if (object.severityText != null)\n                            message.severityText = String(object.severityText);\n                        if (object.body != null) {\n                            if (typeof object.body !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.body: object expected\");\n                            message.body = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.body);\n                        }\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a LogRecord message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogRecord} message LogRecord\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogRecord.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.severityNumber = options.enums === String ? \"SEVERITY_NUMBER_UNSPECIFIED\" : 0;\n                            object.severityText = \"\";\n                            object.body = null;\n                            object.droppedAttributesCount = 0;\n                            object.flags = 0;\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.observedTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.observedTimeUnixNano = options.longs === String ? \"0\" : 0;\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            object.severityNumber = options.enums === String ? $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] === undefined ? message.severityNumber : $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] : message.severityNumber;\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            object.severityText = message.severityText;\n                        if (message.body != null && message.hasOwnProperty(\"body\"))\n                            object.body = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.body, options);\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (typeof message.observedTimeUnixNano === \"number\")\n                                object.observedTimeUnixNano = options.longs === String ? String(message.observedTimeUnixNano) : message.observedTimeUnixNano;\n                            else\n                                object.observedTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.observedTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.observedTimeUnixNano.low >>> 0, message.observedTimeUnixNano.high >>> 0).toNumber() : message.observedTimeUnixNano;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this LogRecord to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogRecord.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for LogRecord\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogRecord\";\n                    };\n\n                    return LogRecord;\n                })();\n\n                return v1;\n            })();\n\n            return logs;\n        })();\n\n        return proto;\n    })();\n\n    return opentelemetry;\n})();\n\nmodule.exports = $root;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ServiceClientType {\n  SPANS,\n  METRICS,\n  LOGS,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as root from '../generated/root';\nimport { ServiceClientType } from './types';\nimport type * as protobuf from 'protobufjs';\n\nexport interface ExportRequestType<T, R = T & { toJSON: () => unknown }> {\n  create(properties?: T): R;\n  encode(message: T, writer?: protobuf.Writer): protobuf.Writer;\n  decode(reader: protobuf.Reader | Uint8Array, length?: number): R;\n}\n\nexport function getExportRequestProto<ServiceRequest>(\n  clientType: ServiceClientType\n): ExportRequestType<ServiceRequest> {\n  if (clientType === ServiceClientType.SPANS) {\n    return root.opentelemetry.proto.collector.trace.v1\n      .ExportTraceServiceRequest as unknown as ExportRequestType<ServiceRequest>;\n  } else if (clientType === ServiceClientType.LOGS) {\n    return root.opentelemetry.proto.collector.logs.v1\n      .ExportLogsServiceRequest as unknown as ExportRequestType<ServiceRequest>;\n  } else {\n    return root.opentelemetry.proto.collector.metrics.v1\n      .ExportMetricsServiceRequest as unknown as ExportRequestType<ServiceRequest>;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPProtoExporterNodeBase } from './OTLPProtoExporterNodeBase';\nimport {\n  CompressionAlgorithm,\n  OTLPExporterError,\n  sendWithHttp,\n} from '@opentelemetry/otlp-exporter-base';\n\nimport { getExportRequestProto } from '../util';\n\nexport function send<ExportItem, ServiceRequest>(\n  collector: OTLPProtoExporterNodeBase<ExportItem, ServiceRequest>,\n  objects: ExportItem[],\n  compression: CompressionAlgorithm,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  const serviceRequest = collector.convert(objects);\n\n  const exportRequestType = getExportRequestProto<ServiceRequest>(\n    collector.getServiceClientType()\n  );\n  const message = exportRequestType.create(serviceRequest);\n  if (message) {\n    const body = exportRequestType.encode(message).finish();\n    if (body) {\n      sendWithHttp(\n        collector,\n        Buffer.from(body),\n        'application/x-protobuf',\n        onSuccess,\n        onError\n      );\n    }\n  } else {\n    onError(new OTLPExporterError('No proto'));\n  }\n}\n","'use strict'\n\n// **************************************************************\n// * Code initially copied/adapted from \"pony-cause\" npm module *\n// * Please upstream improvements there                         *\n// **************************************************************\n\nconst isErrorLike = (err) => {\n  return err && typeof err.message === 'string'\n}\n\n/**\n * @param {Error|{ cause?: unknown|(()=>err)}} err\n * @returns {Error|Object|undefined}\n */\nconst getErrorCause = (err) => {\n  if (!err) return\n\n  /** @type {unknown} */\n  // @ts-ignore\n  const cause = err.cause\n\n  // VError / NError style causes\n  if (typeof cause === 'function') {\n    // @ts-ignore\n    const causeResult = err.cause()\n\n    return isErrorLike(causeResult)\n      ? causeResult\n      : undefined\n  } else {\n    return isErrorLike(cause)\n      ? cause\n      : undefined\n  }\n}\n\n/**\n * Internal method that keeps a track of which error we have already added, to avoid circular recursion\n *\n * @private\n * @param {Error} err\n * @param {Set<Error>} seen\n * @returns {string}\n */\nconst _stackWithCauses = (err, seen) => {\n  if (!isErrorLike(err)) return ''\n\n  const stack = err.stack || ''\n\n  // Ensure we don't go circular or crazily deep\n  if (seen.has(err)) {\n    return stack + '\\ncauses have become circular...'\n  }\n\n  const cause = getErrorCause(err)\n\n  if (cause) {\n    seen.add(err)\n    return (stack + '\\ncaused by: ' + _stackWithCauses(cause, seen))\n  } else {\n    return stack\n  }\n}\n\n/**\n * @param {Error} err\n * @returns {string}\n */\nconst stackWithCauses = (err) => _stackWithCauses(err, new Set())\n\n/**\n * Internal method that keeps a track of which error we have already added, to avoid circular recursion\n *\n * @private\n * @param {Error} err\n * @param {Set<Error>} seen\n * @param {boolean} [skip]\n * @returns {string}\n */\nconst _messageWithCauses = (err, seen, skip) => {\n  if (!isErrorLike(err)) return ''\n\n  const message = skip ? '' : (err.message || '')\n\n  // Ensure we don't go circular or crazily deep\n  if (seen.has(err)) {\n    return message + ': ...'\n  }\n\n  const cause = getErrorCause(err)\n\n  if (cause) {\n    seen.add(err)\n\n    // @ts-ignore\n    const skipIfVErrorStyleCause = typeof err.cause === 'function'\n\n    return (message +\n      (skipIfVErrorStyleCause ? '' : ': ') +\n      _messageWithCauses(cause, seen, skipIfVErrorStyleCause))\n  } else {\n    return message\n  }\n}\n\n/**\n * @param {Error} err\n * @returns {string}\n */\nconst messageWithCauses = (err) => _messageWithCauses(err, new Set())\n\nmodule.exports = {\n  isErrorLike,\n  getErrorCause,\n  stackWithCauses,\n  messageWithCauses\n}\n","'use strict'\n\nconst seen = Symbol('circular-ref-tag')\nconst rawSymbol = Symbol('pino-raw-err-ref')\n\nconst pinoErrProto = Object.create({}, {\n  type: {\n    enumerable: true,\n    writable: true,\n    value: undefined\n  },\n  message: {\n    enumerable: true,\n    writable: true,\n    value: undefined\n  },\n  stack: {\n    enumerable: true,\n    writable: true,\n    value: undefined\n  },\n  aggregateErrors: {\n    enumerable: true,\n    writable: true,\n    value: undefined\n  },\n  raw: {\n    enumerable: false,\n    get: function () {\n      return this[rawSymbol]\n    },\n    set: function (val) {\n      this[rawSymbol] = val\n    }\n  }\n})\nObject.defineProperty(pinoErrProto, rawSymbol, {\n  writable: true,\n  value: {}\n})\n\nmodule.exports = {\n  pinoErrProto,\n  pinoErrorSymbols: {\n    seen,\n    rawSymbol\n  }\n}\n","'use strict'\n\nmodule.exports = errSerializer\n\nconst { messageWithCauses, stackWithCauses, isErrorLike } = require('./err-helpers')\nconst { pinoErrProto, pinoErrorSymbols } = require('./err-proto')\nconst { seen } = pinoErrorSymbols\n\nconst { toString } = Object.prototype\n\nfunction errSerializer (err) {\n  if (!isErrorLike(err)) {\n    return err\n  }\n\n  err[seen] = undefined // tag to prevent re-looking at this\n  const _err = Object.create(pinoErrProto)\n  _err.type = toString.call(err.constructor) === '[object Function]'\n    ? err.constructor.name\n    : err.name\n  _err.message = messageWithCauses(err)\n  _err.stack = stackWithCauses(err)\n\n  if (Array.isArray(err.errors)) {\n    _err.aggregateErrors = err.errors.map(err => errSerializer(err))\n  }\n\n  for (const key in err) {\n    if (_err[key] === undefined) {\n      const val = err[key]\n      if (isErrorLike(val)) {\n        // We append cause messages and stacks to _err, therefore skipping causes here\n        if (key !== 'cause' && !Object.prototype.hasOwnProperty.call(val, seen)) {\n          _err[key] = errSerializer(val)\n        }\n      } else {\n        _err[key] = val\n      }\n    }\n  }\n\n  delete err[seen] // clean up tag in case err is serialized again later\n  _err.raw = err\n  return _err\n}\n","'use strict'\n\nmodule.exports = errWithCauseSerializer\n\nconst { isErrorLike } = require('./err-helpers')\nconst { pinoErrProto, pinoErrorSymbols } = require('./err-proto')\nconst { seen } = pinoErrorSymbols\n\nconst { toString } = Object.prototype\n\nfunction errWithCauseSerializer (err) {\n  if (!isErrorLike(err)) {\n    return err\n  }\n\n  err[seen] = undefined // tag to prevent re-looking at this\n  const _err = Object.create(pinoErrProto)\n  _err.type = toString.call(err.constructor) === '[object Function]'\n    ? err.constructor.name\n    : err.name\n  _err.message = err.message\n  _err.stack = err.stack\n\n  if (Array.isArray(err.errors)) {\n    _err.aggregateErrors = err.errors.map(err => errWithCauseSerializer(err))\n  }\n\n  if (isErrorLike(err.cause) && !Object.prototype.hasOwnProperty.call(err.cause, seen)) {\n    _err.cause = errWithCauseSerializer(err.cause)\n  }\n\n  for (const key in err) {\n    if (_err[key] === undefined) {\n      const val = err[key]\n      if (isErrorLike(val)) {\n        if (!Object.prototype.hasOwnProperty.call(val, seen)) {\n          _err[key] = errWithCauseSerializer(val)\n        }\n      } else {\n        _err[key] = val\n      }\n    }\n  }\n\n  delete err[seen] // clean up tag in case err is serialized again later\n  _err.raw = err\n  return _err\n}\n","'use strict'\n\nmodule.exports = {\n  mapHttpRequest,\n  reqSerializer\n}\n\nconst rawSymbol = Symbol('pino-raw-req-ref')\nconst pinoReqProto = Object.create({}, {\n  id: {\n    enumerable: true,\n    writable: true,\n    value: ''\n  },\n  method: {\n    enumerable: true,\n    writable: true,\n    value: ''\n  },\n  url: {\n    enumerable: true,\n    writable: true,\n    value: ''\n  },\n  query: {\n    enumerable: true,\n    writable: true,\n    value: ''\n  },\n  params: {\n    enumerable: true,\n    writable: true,\n    value: ''\n  },\n  headers: {\n    enumerable: true,\n    writable: true,\n    value: {}\n  },\n  remoteAddress: {\n    enumerable: true,\n    writable: true,\n    value: ''\n  },\n  remotePort: {\n    enumerable: true,\n    writable: true,\n    value: ''\n  },\n  raw: {\n    enumerable: false,\n    get: function () {\n      return this[rawSymbol]\n    },\n    set: function (val) {\n      this[rawSymbol] = val\n    }\n  }\n})\nObject.defineProperty(pinoReqProto, rawSymbol, {\n  writable: true,\n  value: {}\n})\n\nfunction reqSerializer (req) {\n  // req.info is for hapi compat.\n  const connection = req.info || req.socket\n  const _req = Object.create(pinoReqProto)\n  _req.id = (typeof req.id === 'function' ? req.id() : (req.id || (req.info ? req.info.id : undefined)))\n  _req.method = req.method\n  // req.originalUrl is for expressjs compat.\n  if (req.originalUrl) {\n    _req.url = req.originalUrl\n  } else {\n    const path = req.path\n    // path for safe hapi compat.\n    _req.url = typeof path === 'string' ? path : (req.url ? req.url.path || req.url : undefined)\n  }\n\n  if (req.query) {\n    _req.query = req.query\n  }\n\n  if (req.params) {\n    _req.params = req.params\n  }\n\n  _req.headers = req.headers\n  _req.remoteAddress = connection && connection.remoteAddress\n  _req.remotePort = connection && connection.remotePort\n  // req.raw is  for hapi compat/equivalence\n  _req.raw = req.raw || req\n  return _req\n}\n\nfunction mapHttpRequest (req) {\n  return {\n    req: reqSerializer(req)\n  }\n}\n","'use strict'\n\nmodule.exports = {\n  mapHttpResponse,\n  resSerializer\n}\n\nconst rawSymbol = Symbol('pino-raw-res-ref')\nconst pinoResProto = Object.create({}, {\n  statusCode: {\n    enumerable: true,\n    writable: true,\n    value: 0\n  },\n  headers: {\n    enumerable: true,\n    writable: true,\n    value: ''\n  },\n  raw: {\n    enumerable: false,\n    get: function () {\n      return this[rawSymbol]\n    },\n    set: function (val) {\n      this[rawSymbol] = val\n    }\n  }\n})\nObject.defineProperty(pinoResProto, rawSymbol, {\n  writable: true,\n  value: {}\n})\n\nfunction resSerializer (res) {\n  const _res = Object.create(pinoResProto)\n  _res.statusCode = res.headersSent ? res.statusCode : null\n  _res.headers = res.getHeaders ? res.getHeaders() : res._headers\n  _res.raw = res\n  return _res\n}\n\nfunction mapHttpResponse (res) {\n  return {\n    res: resSerializer(res)\n  }\n}\n","'use strict'\n\nconst errSerializer = require('./lib/err')\nconst errWithCauseSerializer = require('./lib/err-with-cause')\nconst reqSerializers = require('./lib/req')\nconst resSerializers = require('./lib/res')\n\nmodule.exports = {\n  err: errSerializer,\n  errWithCause: errWithCauseSerializer,\n  mapHttpRequest: reqSerializers.mapHttpRequest,\n  mapHttpResponse: resSerializers.mapHttpResponse,\n  req: reqSerializers.reqSerializer,\n  res: resSerializers.resSerializer,\n\n  wrapErrorSerializer: function wrapErrorSerializer (customSerializer) {\n    if (customSerializer === errSerializer) return customSerializer\n    return function wrapErrSerializer (err) {\n      return customSerializer(errSerializer(err))\n    }\n  },\n\n  wrapRequestSerializer: function wrapRequestSerializer (customSerializer) {\n    if (customSerializer === reqSerializers.reqSerializer) return customSerializer\n    return function wrappedReqSerializer (req) {\n      return customSerializer(reqSerializers.reqSerializer(req))\n    }\n  },\n\n  wrapResponseSerializer: function wrapResponseSerializer (customSerializer) {\n    if (customSerializer === resSerializers.resSerializer) return customSerializer\n    return function wrappedResSerializer (res) {\n      return customSerializer(resSerializers.resSerializer(res))\n    }\n  }\n}\n","'use strict'\n\nfunction noOpPrepareStackTrace (_, stack) {\n  return stack\n}\n\nmodule.exports = function getCallers () {\n  const originalPrepare = Error.prepareStackTrace\n  Error.prepareStackTrace = noOpPrepareStackTrace\n  const stack = new Error().stack\n  Error.prepareStackTrace = originalPrepare\n\n  if (!Array.isArray(stack)) {\n    return undefined\n  }\n\n  const entries = stack.slice(2)\n\n  const fileNames = []\n\n  for (const entry of entries) {\n    if (!entry) {\n      continue\n    }\n\n    fileNames.push(entry.getFileName())\n  }\n\n  return fileNames\n}\n","'use strict'\n\nmodule.exports = validator\n\nfunction validator (opts = {}) {\n  const {\n    ERR_PATHS_MUST_BE_STRINGS = () => 'fast-redact - Paths must be (non-empty) strings',\n    ERR_INVALID_PATH = (s) => `fast-redact – Invalid path (${s})`\n  } = opts\n\n  return function validate ({ paths }) {\n    paths.forEach((s) => {\n      if (typeof s !== 'string') {\n        throw Error(ERR_PATHS_MUST_BE_STRINGS())\n      }\n      try {\n        if (/〇/.test(s)) throw Error()\n        const expr = (s[0] === '[' ? '' : '.') + s.replace(/^\\*/, '〇').replace(/\\.\\*/g, '.〇').replace(/\\[\\*\\]/g, '[〇]')\n        if (/\\n|\\r|;/.test(expr)) throw Error()\n        if (/\\/\\*/.test(expr)) throw Error()\n        /* eslint-disable-next-line */\n        Function(`\n            'use strict'\n            const o = new Proxy({}, { get: () => o, set: () => { throw Error() } });\n            const 〇 = null;\n            o${expr}\n            if ([o${expr}].length !== 1) throw Error()`)()\n      } catch (e) {\n        throw Error(ERR_INVALID_PATH(s))\n      }\n    })\n  }\n}\n","'use strict'\n\nmodule.exports = /[^.[\\]]+|\\[((?:.)*?)\\]/g\n\n/*\nRegular expression explanation:\n\nAlt 1: /[^.[\\]]+/ - Match one or more characters that are *not* a dot (.)\n                    opening square bracket ([) or closing square bracket (])\n\nAlt 2: /\\[((?:.)*?)\\]/ - If the char IS dot or square bracket, then create a capture\n                         group (which will be capture group $1) that matches anything\n                         within square brackets. Expansion is lazy so it will\n                         stop matching as soon as the first closing bracket is met `]`\n                         (rather than continuing to match until the final closing bracket).\n*/\n","'use strict'\n\nconst rx = require('./rx')\n\nmodule.exports = parse\n\nfunction parse ({ paths }) {\n  const wildcards = []\n  var wcLen = 0\n  const secret = paths.reduce(function (o, strPath, ix) {\n    var path = strPath.match(rx).map((p) => p.replace(/'|\"|`/g, ''))\n    const leadingBracket = strPath[0] === '['\n    path = path.map((p) => {\n      if (p[0] === '[') return p.substr(1, p.length - 2)\n      else return p\n    })\n    const star = path.indexOf('*')\n    if (star > -1) {\n      const before = path.slice(0, star)\n      const beforeStr = before.join('.')\n      const after = path.slice(star + 1, path.length)\n      const nested = after.length > 0\n      wcLen++\n      wildcards.push({\n        before,\n        beforeStr,\n        after,\n        nested\n      })\n    } else {\n      o[strPath] = {\n        path: path,\n        val: undefined,\n        precensored: false,\n        circle: '',\n        escPath: JSON.stringify(strPath),\n        leadingBracket: leadingBracket\n      }\n    }\n    return o\n  }, {})\n\n  return { wildcards, wcLen, secret }\n}\n","'use strict'\n\nconst rx = require('./rx')\n\nmodule.exports = redactor\n\nfunction redactor ({ secret, serialize, wcLen, strict, isCensorFct, censorFctTakesPath }, state) {\n  /* eslint-disable-next-line */\n  const redact = Function('o', `\n    if (typeof o !== 'object' || o == null) {\n      ${strictImpl(strict, serialize)}\n    }\n    const { censor, secret } = this\n    const originalSecret = {}\n    const secretKeys = Object.keys(secret)\n    for (var i = 0; i < secretKeys.length; i++) {\n      originalSecret[secretKeys[i]] = secret[secretKeys[i]]\n    }\n\n    ${redactTmpl(secret, isCensorFct, censorFctTakesPath)}\n    this.compileRestore()\n    ${dynamicRedactTmpl(wcLen > 0, isCensorFct, censorFctTakesPath)}\n    this.secret = originalSecret\n    ${resultTmpl(serialize)}\n  `).bind(state)\n\n  redact.state = state\n\n  if (serialize === false) {\n    redact.restore = (o) => state.restore(o)\n  }\n\n  return redact\n}\n\nfunction redactTmpl (secret, isCensorFct, censorFctTakesPath) {\n  return Object.keys(secret).map((path) => {\n    const { escPath, leadingBracket, path: arrPath } = secret[path]\n    const skip = leadingBracket ? 1 : 0\n    const delim = leadingBracket ? '' : '.'\n    const hops = []\n    var match\n    while ((match = rx.exec(path)) !== null) {\n      const [ , ix ] = match\n      const { index, input } = match\n      if (index > skip) hops.push(input.substring(0, index - (ix ? 0 : 1)))\n    }\n    var existence = hops.map((p) => `o${delim}${p}`).join(' && ')\n    if (existence.length === 0) existence += `o${delim}${path} != null`\n    else existence += ` && o${delim}${path} != null`\n\n    const circularDetection = `\n      switch (true) {\n        ${hops.reverse().map((p) => `\n          case o${delim}${p} === censor:\n            secret[${escPath}].circle = ${JSON.stringify(p)}\n            break\n        `).join('\\n')}\n      }\n    `\n\n    const censorArgs = censorFctTakesPath\n      ? `val, ${JSON.stringify(arrPath)}`\n      : `val`\n\n    return `\n      if (${existence}) {\n        const val = o${delim}${path}\n        if (val === censor) {\n          secret[${escPath}].precensored = true\n        } else {\n          secret[${escPath}].val = val\n          o${delim}${path} = ${isCensorFct ? `censor(${censorArgs})` : 'censor'}\n          ${circularDetection}\n        }\n      }\n    `\n  }).join('\\n')\n}\n\nfunction dynamicRedactTmpl (hasWildcards, isCensorFct, censorFctTakesPath) {\n  return hasWildcards === true ? `\n    {\n      const { wildcards, wcLen, groupRedact, nestedRedact } = this\n      for (var i = 0; i < wcLen; i++) {\n        const { before, beforeStr, after, nested } = wildcards[i]\n        if (nested === true) {\n          secret[beforeStr] = secret[beforeStr] || []\n          nestedRedact(secret[beforeStr], o, before, after, censor, ${isCensorFct}, ${censorFctTakesPath})\n        } else secret[beforeStr] = groupRedact(o, before, censor, ${isCensorFct}, ${censorFctTakesPath})\n      }\n    }\n  ` : ''\n}\n\nfunction resultTmpl (serialize) {\n  return serialize === false ? `return o` : `\n    var s = this.serialize(o)\n    this.restore(o)\n    return s\n  `\n}\n\nfunction strictImpl (strict, serialize) {\n  return strict === true\n    ? `throw Error('fast-redact: primitives cannot be redacted')`\n    : serialize === false ? `return o` : `return this.serialize(o)`\n}\n","'use strict'\n\nmodule.exports = {\n  groupRedact,\n  groupRestore,\n  nestedRedact,\n  nestedRestore\n}\n\nfunction groupRestore ({ keys, values, target }) {\n  if (target == null || typeof target === 'string') return\n  const length = keys.length\n  for (var i = 0; i < length; i++) {\n    const k = keys[i]\n    target[k] = values[i]\n  }\n}\n\nfunction groupRedact (o, path, censor, isCensorFct, censorFctTakesPath) {\n  const target = get(o, path)\n  if (target == null || typeof target === 'string') return { keys: null, values: null, target, flat: true }\n  const keys = Object.keys(target)\n  const keysLength = keys.length\n  const pathLength = path.length\n  const pathWithKey = censorFctTakesPath ? [...path] : undefined\n  const values = new Array(keysLength)\n\n  for (var i = 0; i < keysLength; i++) {\n    const key = keys[i]\n    values[i] = target[key]\n\n    if (censorFctTakesPath) {\n      pathWithKey[pathLength] = key\n      target[key] = censor(target[key], pathWithKey)\n    } else if (isCensorFct) {\n      target[key] = censor(target[key])\n    } else {\n      target[key] = censor\n    }\n  }\n  return { keys, values, target, flat: true }\n}\n\n/**\n * @param {RestoreInstruction[]} instructions a set of instructions for restoring values to objects\n */\nfunction nestedRestore (instructions) {\n  for (let i = 0; i < instructions.length; i++) {\n    const { target, path, value } = instructions[i]\n    let current = target\n    for (let i = path.length - 1; i > 0; i--) {\n      current = current[path[i]]\n    }\n    current[path[0]] = value\n  }\n}\n\nfunction nestedRedact (store, o, path, ns, censor, isCensorFct, censorFctTakesPath) {\n  const target = get(o, path)\n  if (target == null) return\n  const keys = Object.keys(target)\n  const keysLength = keys.length\n  for (var i = 0; i < keysLength; i++) {\n    const key = keys[i]\n    specialSet(store, target, key, path, ns, censor, isCensorFct, censorFctTakesPath)\n  }\n  return store\n}\n\nfunction has (obj, prop) {\n  return obj !== undefined && obj !== null\n    ? ('hasOwn' in Object ? Object.hasOwn(obj, prop) : Object.prototype.hasOwnProperty.call(obj, prop))\n    : false\n}\n\nfunction specialSet (store, o, k, path, afterPath, censor, isCensorFct, censorFctTakesPath) {\n  const afterPathLen = afterPath.length\n  const lastPathIndex = afterPathLen - 1\n  const originalKey = k\n  var i = -1\n  var n\n  var nv\n  var ov\n  var oov = null\n  var wc = null\n  var kIsWc\n  var wcov\n  var consecutive = false\n  var level = 0\n  // need to track depth of the `redactPath` tree\n  var depth = 0\n  var redactPathCurrent = tree()\n  ov = n = o[k]\n  if (typeof n !== 'object') return\n  while (n != null && ++i < afterPathLen) {\n    depth += 1\n    k = afterPath[i]\n    oov = ov\n    if (k !== '*' && !wc && !(typeof n === 'object' && k in n)) {\n      break\n    }\n    if (k === '*') {\n      if (wc === '*') {\n        consecutive = true\n      }\n      wc = k\n      if (i !== lastPathIndex) {\n        continue\n      }\n    }\n    if (wc) {\n      const wcKeys = Object.keys(n)\n      for (var j = 0; j < wcKeys.length; j++) {\n        const wck = wcKeys[j]\n        wcov = n[wck]\n        kIsWc = k === '*'\n        if (consecutive) {\n          redactPathCurrent = node(redactPathCurrent, wck, depth)\n          level = i\n          ov = iterateNthLevel(wcov, level - 1, k, path, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, o[originalKey], depth + 1)\n        } else {\n          if (kIsWc || (typeof wcov === 'object' && wcov !== null && k in wcov)) {\n            if (kIsWc) {\n              ov = wcov\n            } else {\n              ov = wcov[k]\n            }\n            nv = (i !== lastPathIndex)\n              ? ov\n              : (isCensorFct\n                ? (censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov))\n                : censor)\n            if (kIsWc) {\n              const rv = restoreInstr(node(redactPathCurrent, wck, depth), ov, o[originalKey])\n              store.push(rv)\n              n[wck] = nv\n            } else {\n              if (wcov[k] === nv) {\n                // pass\n              } else if ((nv === undefined && censor !== undefined) || (has(wcov, k) && nv === ov)) {\n                redactPathCurrent = node(redactPathCurrent, wck, depth)\n              } else {\n                redactPathCurrent = node(redactPathCurrent, wck, depth)\n                const rv = restoreInstr(node(redactPathCurrent, k, depth + 1), ov, o[originalKey])\n                store.push(rv)\n                wcov[k] = nv\n              }\n            }\n          }\n        }\n      }\n      wc = null\n    } else {\n      ov = n[k]\n      redactPathCurrent = node(redactPathCurrent, k, depth)\n      nv = (i !== lastPathIndex)\n        ? ov\n        : (isCensorFct\n          ? (censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov))\n          : censor)\n      if ((has(n, k) && nv === ov) || (nv === undefined && censor !== undefined)) {\n        // pass\n      } else {\n        const rv = restoreInstr(redactPathCurrent, ov, o[originalKey])\n        store.push(rv)\n        n[k] = nv\n      }\n      n = n[k]\n    }\n    if (typeof n !== 'object') break\n    // prevent circular structure, see https://github.com/pinojs/pino/issues/1513\n    if (ov === oov || typeof ov === 'undefined') {\n      // pass\n    }\n  }\n}\n\nfunction get (o, p) {\n  var i = -1\n  var l = p.length\n  var n = o\n  while (n != null && ++i < l) {\n    n = n[p[i]]\n  }\n  return n\n}\n\nfunction iterateNthLevel (wcov, level, k, path, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, parent, depth) {\n  if (level === 0) {\n    if (kIsWc || (typeof wcov === 'object' && wcov !== null && k in wcov)) {\n      if (kIsWc) {\n        ov = wcov\n      } else {\n        ov = wcov[k]\n      }\n      nv = (i !== lastPathIndex)\n        ? ov\n        : (isCensorFct\n          ? (censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov))\n          : censor)\n      if (kIsWc) {\n        const rv = restoreInstr(redactPathCurrent, ov, parent)\n        store.push(rv)\n        n[wck] = nv\n      } else {\n        if (wcov[k] === nv) {\n          // pass\n        } else if ((nv === undefined && censor !== undefined) || (has(wcov, k) && nv === ov)) {\n          // pass\n        } else {\n          const rv = restoreInstr(node(redactPathCurrent, k, depth + 1), ov, parent)\n          store.push(rv)\n          wcov[k] = nv\n        }\n      }\n    }\n  }\n  for (const key in wcov) {\n    if (typeof wcov[key] === 'object') {\n      redactPathCurrent = node(redactPathCurrent, key, depth)\n      iterateNthLevel(wcov[key], level - 1, k, path, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, parent, depth + 1)\n    }\n  }\n}\n\n/**\n * @typedef {object} TreeNode\n * @prop {TreeNode} [parent] reference to the parent of this node in the tree, or `null` if there is no parent\n * @prop {string} key the key that this node represents (key here being part of the path being redacted\n * @prop {TreeNode[]} children the child nodes of this node\n * @prop {number} depth the depth of this node in the tree\n */\n\n/**\n * instantiate a new, empty tree\n * @returns {TreeNode}\n */\nfunction tree () {\n  return { parent: null, key: null, children: [], depth: 0 }\n}\n\n/**\n * creates a new node in the tree, attaching it as a child of the provided parent node\n * if the specified depth matches the parent depth, adds the new node as a _sibling_ of the parent instead\n  * @param {TreeNode} parent the parent node to add a new node to (if the parent depth matches the provided `depth` value, will instead add as a sibling of this\n  * @param {string} key the key that the new node represents (key here being part of the path being redacted)\n  * @param {number} depth the depth of the new node in the tree - used to determing whether to add the new node as a child or sibling of the provided `parent` node\n  * @returns {TreeNode} a reference to the newly created node in the tree\n */\nfunction node (parent, key, depth) {\n  if (parent.depth === depth) {\n    return node(parent.parent, key, depth)\n  }\n\n  var child = {\n    parent,\n    key,\n    depth,\n    children: []\n  }\n\n  parent.children.push(child)\n\n  return child\n}\n\n/**\n * @typedef {object} RestoreInstruction\n * @prop {string[]} path a reverse-order path that can be used to find the correct insertion point to restore a `value` for the given `parent` object\n * @prop {*} value the value to restore\n * @prop {object} target the object to restore the `value` in\n */\n\n/**\n * create a restore instruction for the given redactPath node\n * generates a path in reverse order by walking up the redactPath tree\n * @param {TreeNode} node a tree node that should be at the bottom of the redact path (i.e. have no children) - this will be used to walk up the redact path tree to construct the path needed to restore\n * @param {*} value the value to restore\n * @param {object} target a reference to the parent object to apply the restore instruction to\n * @returns {RestoreInstruction} an instruction used to restore a nested value for a specific object\n */\nfunction restoreInstr (node, value, target) {\n  let current = node\n  const path = []\n  do {\n    path.push(current.key)\n    current = current.parent\n  } while (current.parent != null)\n\n  return { path, value, target }\n}\n","'use strict'\n\nconst { groupRestore, nestedRestore } = require('./modifiers')\n\nmodule.exports = restorer\n\nfunction restorer () {\n  return function compileRestore () {\n    if (this.restore) {\n      this.restore.state.secret = this.secret\n      return\n    }\n    const { secret, wcLen } = this\n    const paths = Object.keys(secret)\n    const resetters = resetTmpl(secret, paths)\n    const hasWildcards = wcLen > 0\n    const state = hasWildcards ? { secret, groupRestore, nestedRestore } : { secret }\n    /* eslint-disable-next-line */\n    this.restore = Function(\n      'o',\n      restoreTmpl(resetters, paths, hasWildcards)\n    ).bind(state)\n    this.restore.state = state\n  }\n}\n\n/**\n * Mutates the original object to be censored by restoring its original values\n * prior to censoring.\n *\n * @param {object} secret Compiled object describing which target fields should\n * be censored and the field states.\n * @param {string[]} paths The list of paths to censor as provided at\n * initialization time.\n *\n * @returns {string} String of JavaScript to be used by `Function()`. The\n * string compiles to the function that does the work in the description.\n */\nfunction resetTmpl (secret, paths) {\n  return paths.map((path) => {\n    const { circle, escPath, leadingBracket } = secret[path]\n    const delim = leadingBracket ? '' : '.'\n    const reset = circle\n      ? `o.${circle} = secret[${escPath}].val`\n      : `o${delim}${path} = secret[${escPath}].val`\n    const clear = `secret[${escPath}].val = undefined`\n    return `\n      if (secret[${escPath}].val !== undefined) {\n        try { ${reset} } catch (e) {}\n        ${clear}\n      }\n    `\n  }).join('')\n}\n\n/**\n * Creates the body of the restore function\n *\n * Restoration of the redacted object happens\n * backwards, in reverse order of redactions,\n * so that repeated redactions on the same object\n * property can be eventually rolled back to the\n * original value.\n *\n * This way dynamic redactions are restored first,\n * starting from the last one working backwards and\n * followed by the static ones.\n *\n * @returns {string} the body of the restore function\n */\nfunction restoreTmpl (resetters, paths, hasWildcards) {\n  const dynamicReset = hasWildcards === true ? `\n    const keys = Object.keys(secret)\n    const len = keys.length\n    for (var i = len - 1; i >= ${paths.length}; i--) {\n      const k = keys[i]\n      const o = secret[k]\n      if (o) {\n        if (o.flat === true) this.groupRestore(o)\n        else this.nestedRestore(o)\n        secret[k] = null\n      }\n    }\n  ` : ''\n\n  return `\n    const secret = this.secret\n    ${dynamicReset}\n    ${resetters}\n    return o\n  `\n}\n","'use strict'\n\nmodule.exports = state\n\nfunction state (o) {\n  const {\n    secret,\n    censor,\n    compileRestore,\n    serialize,\n    groupRedact,\n    nestedRedact,\n    wildcards,\n    wcLen\n  } = o\n  const builder = [{ secret, censor, compileRestore }]\n  if (serialize !== false) builder.push({ serialize })\n  if (wcLen > 0) builder.push({ groupRedact, nestedRedact, wildcards, wcLen })\n  return Object.assign(...builder)\n}\n","'use strict'\n\nconst validator = require('./lib/validator')\nconst parse = require('./lib/parse')\nconst redactor = require('./lib/redactor')\nconst restorer = require('./lib/restorer')\nconst { groupRedact, nestedRedact } = require('./lib/modifiers')\nconst state = require('./lib/state')\nconst rx = require('./lib/rx')\nconst validate = validator()\nconst noop = (o) => o\nnoop.restore = noop\n\nconst DEFAULT_CENSOR = '[REDACTED]'\nfastRedact.rx = rx\nfastRedact.validator = validator\n\nmodule.exports = fastRedact\n\nfunction fastRedact (opts = {}) {\n  const paths = Array.from(new Set(opts.paths || []))\n  const serialize = 'serialize' in opts ? (\n    opts.serialize === false ? opts.serialize\n      : (typeof opts.serialize === 'function' ? opts.serialize : JSON.stringify)\n  ) : JSON.stringify\n  const remove = opts.remove\n  if (remove === true && serialize !== JSON.stringify) {\n    throw Error('fast-redact – remove option may only be set when serializer is JSON.stringify')\n  }\n  const censor = remove === true\n    ? undefined\n    : 'censor' in opts ? opts.censor : DEFAULT_CENSOR\n\n  const isCensorFct = typeof censor === 'function'\n  const censorFctTakesPath = isCensorFct && censor.length > 1\n\n  if (paths.length === 0) return serialize || noop\n\n  validate({ paths, serialize, censor })\n\n  const { wildcards, wcLen, secret } = parse({ paths, censor })\n\n  const compileRestore = restorer()\n  const strict = 'strict' in opts ? opts.strict : true\n\n  return redactor({ secret, wcLen, serialize, strict, isCensorFct, censorFctTakesPath }, state({\n    secret,\n    censor,\n    compileRestore,\n    serialize,\n    groupRedact,\n    nestedRedact,\n    wildcards,\n    wcLen\n  }))\n}\n","'use strict'\n\nconst setLevelSym = Symbol('pino.setLevel')\nconst getLevelSym = Symbol('pino.getLevel')\nconst levelValSym = Symbol('pino.levelVal')\nconst levelCompSym = Symbol('pino.levelComp')\nconst useLevelLabelsSym = Symbol('pino.useLevelLabels')\nconst useOnlyCustomLevelsSym = Symbol('pino.useOnlyCustomLevels')\nconst mixinSym = Symbol('pino.mixin')\n\nconst lsCacheSym = Symbol('pino.lsCache')\nconst chindingsSym = Symbol('pino.chindings')\n\nconst asJsonSym = Symbol('pino.asJson')\nconst writeSym = Symbol('pino.write')\nconst redactFmtSym = Symbol('pino.redactFmt')\n\nconst timeSym = Symbol('pino.time')\nconst timeSliceIndexSym = Symbol('pino.timeSliceIndex')\nconst streamSym = Symbol('pino.stream')\nconst stringifySym = Symbol('pino.stringify')\nconst stringifySafeSym = Symbol('pino.stringifySafe')\nconst stringifiersSym = Symbol('pino.stringifiers')\nconst endSym = Symbol('pino.end')\nconst formatOptsSym = Symbol('pino.formatOpts')\nconst messageKeySym = Symbol('pino.messageKey')\nconst errorKeySym = Symbol('pino.errorKey')\nconst nestedKeySym = Symbol('pino.nestedKey')\nconst nestedKeyStrSym = Symbol('pino.nestedKeyStr')\nconst mixinMergeStrategySym = Symbol('pino.mixinMergeStrategy')\nconst msgPrefixSym = Symbol('pino.msgPrefix')\n\nconst wildcardFirstSym = Symbol('pino.wildcardFirst')\n\n// public symbols, no need to use the same pino\n// version for these\nconst serializersSym = Symbol.for('pino.serializers')\nconst formattersSym = Symbol.for('pino.formatters')\nconst hooksSym = Symbol.for('pino.hooks')\nconst needsMetadataGsym = Symbol.for('pino.metadata')\n\nmodule.exports = {\n  setLevelSym,\n  getLevelSym,\n  levelValSym,\n  levelCompSym,\n  useLevelLabelsSym,\n  mixinSym,\n  lsCacheSym,\n  chindingsSym,\n  asJsonSym,\n  writeSym,\n  serializersSym,\n  redactFmtSym,\n  timeSym,\n  timeSliceIndexSym,\n  streamSym,\n  stringifySym,\n  stringifySafeSym,\n  stringifiersSym,\n  endSym,\n  formatOptsSym,\n  messageKeySym,\n  errorKeySym,\n  nestedKeySym,\n  wildcardFirstSym,\n  needsMetadataGsym,\n  useOnlyCustomLevelsSym,\n  formattersSym,\n  hooksSym,\n  nestedKeyStrSym,\n  mixinMergeStrategySym,\n  msgPrefixSym\n}\n","'use strict'\n\nconst fastRedact = require('fast-redact')\nconst { redactFmtSym, wildcardFirstSym } = require('./symbols')\nconst { rx, validator } = fastRedact\n\nconst validate = validator({\n  ERR_PATHS_MUST_BE_STRINGS: () => 'pino – redacted paths must be strings',\n  ERR_INVALID_PATH: (s) => `pino – redact paths array contains an invalid path (${s})`\n})\n\nconst CENSOR = '[Redacted]'\nconst strict = false // TODO should this be configurable?\n\nfunction redaction (opts, serialize) {\n  const { paths, censor } = handle(opts)\n\n  const shape = paths.reduce((o, str) => {\n    rx.lastIndex = 0\n    const first = rx.exec(str)\n    const next = rx.exec(str)\n\n    // ns is the top-level path segment, brackets + quoting removed.\n    let ns = first[1] !== undefined\n      ? first[1].replace(/^(?:\"|'|`)(.*)(?:\"|'|`)$/, '$1')\n      : first[0]\n\n    if (ns === '*') {\n      ns = wildcardFirstSym\n    }\n\n    // top level key:\n    if (next === null) {\n      o[ns] = null\n      return o\n    }\n\n    // path with at least two segments:\n    // if ns is already redacted at the top level, ignore lower level redactions\n    if (o[ns] === null) {\n      return o\n    }\n\n    const { index } = next\n    const nextPath = `${str.substr(index, str.length - 1)}`\n\n    o[ns] = o[ns] || []\n\n    // shape is a mix of paths beginning with literal values and wildcard\n    // paths [ \"a.b.c\", \"*.b.z\" ] should reduce to a shape of\n    // { \"a\": [ \"b.c\", \"b.z\" ], *: [ \"b.z\" ] }\n    // note: \"b.z\" is in both \"a\" and * arrays because \"a\" matches the wildcard.\n    // (* entry has wildcardFirstSym as key)\n    if (ns !== wildcardFirstSym && o[ns].length === 0) {\n      // first time ns's get all '*' redactions so far\n      o[ns].push(...(o[wildcardFirstSym] || []))\n    }\n\n    if (ns === wildcardFirstSym) {\n      // new * path gets added to all previously registered literal ns's.\n      Object.keys(o).forEach(function (k) {\n        if (o[k]) {\n          o[k].push(nextPath)\n        }\n      })\n    }\n\n    o[ns].push(nextPath)\n    return o\n  }, {})\n\n  // the redactor assigned to the format symbol key\n  // provides top level redaction for instances where\n  // an object is interpolated into the msg string\n  const result = {\n    [redactFmtSym]: fastRedact({ paths, censor, serialize, strict })\n  }\n\n  const topCensor = (...args) => {\n    return typeof censor === 'function' ? serialize(censor(...args)) : serialize(censor)\n  }\n\n  return [...Object.keys(shape), ...Object.getOwnPropertySymbols(shape)].reduce((o, k) => {\n    // top level key:\n    if (shape[k] === null) {\n      o[k] = (value) => topCensor(value, [k])\n    } else {\n      const wrappedCensor = typeof censor === 'function'\n        ? (value, path) => {\n            return censor(value, [k, ...path])\n          }\n        : censor\n      o[k] = fastRedact({\n        paths: shape[k],\n        censor: wrappedCensor,\n        serialize,\n        strict\n      })\n    }\n    return o\n  }, result)\n}\n\nfunction handle (opts) {\n  if (Array.isArray(opts)) {\n    opts = { paths: opts, censor: CENSOR }\n    validate(opts)\n    return opts\n  }\n  let { paths, censor = CENSOR, remove } = opts\n  if (Array.isArray(paths) === false) { throw Error('pino – redact must contain an array of strings') }\n  if (remove === true) censor = undefined\n  validate({ paths, censor })\n\n  return { paths, censor }\n}\n\nmodule.exports = redaction\n","'use strict'\n\nconst nullTime = () => ''\n\nconst epochTime = () => `,\"time\":${Date.now()}`\n\nconst unixTime = () => `,\"time\":${Math.round(Date.now() / 1000.0)}`\n\nconst isoTime = () => `,\"time\":\"${new Date(Date.now()).toISOString()}\"` // using Date.now() for testability\n\nmodule.exports = { nullTime, epochTime, unixTime, isoTime }\n","'use strict'\nfunction tryStringify (o) {\n  try { return JSON.stringify(o) } catch(e) { return '\"[Circular]\"' }\n}\n\nmodule.exports = format\n\nfunction format(f, args, opts) {\n  var ss = (opts && opts.stringify) || tryStringify\n  var offset = 1\n  if (typeof f === 'object' && f !== null) {\n    var len = args.length + offset\n    if (len === 1) return f\n    var objects = new Array(len)\n    objects[0] = ss(f)\n    for (var index = 1; index < len; index++) {\n      objects[index] = ss(args[index])\n    }\n    return objects.join(' ')\n  }\n  if (typeof f !== 'string') {\n    return f\n  }\n  var argLen = args.length\n  if (argLen === 0) return f\n  var str = ''\n  var a = 1 - offset\n  var lastPos = -1\n  var flen = (f && f.length) || 0\n  for (var i = 0; i < flen;) {\n    if (f.charCodeAt(i) === 37 && i + 1 < flen) {\n      lastPos = lastPos > -1 ? lastPos : 0\n      switch (f.charCodeAt(i + 1)) {\n        case 100: // 'd'\n        case 102: // 'f'\n          if (a >= argLen)\n            break\n          if (args[a] == null)  break\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          str += Number(args[a])\n          lastPos = i + 2\n          i++\n          break\n        case 105: // 'i'\n          if (a >= argLen)\n            break\n          if (args[a] == null)  break\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          str += Math.floor(Number(args[a]))\n          lastPos = i + 2\n          i++\n          break\n        case 79: // 'O'\n        case 111: // 'o'\n        case 106: // 'j'\n          if (a >= argLen)\n            break\n          if (args[a] === undefined) break\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          var type = typeof args[a]\n          if (type === 'string') {\n            str += '\\'' + args[a] + '\\''\n            lastPos = i + 2\n            i++\n            break\n          }\n          if (type === 'function') {\n            str += args[a].name || '<anonymous>'\n            lastPos = i + 2\n            i++\n            break\n          }\n          str += ss(args[a])\n          lastPos = i + 2\n          i++\n          break\n        case 115: // 's'\n          if (a >= argLen)\n            break\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          str += String(args[a])\n          lastPos = i + 2\n          i++\n          break\n        case 37: // '%'\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          str += '%'\n          lastPos = i + 2\n          i++\n          a--\n          break\n      }\n      ++a\n    }\n    ++i\n  }\n  if (lastPos === -1)\n    return f\n  else if (lastPos < flen) {\n    str += f.slice(lastPos)\n  }\n\n  return str\n}\n","'use strict'\n\n/* global SharedArrayBuffer, Atomics */\n\nif (typeof SharedArrayBuffer !== 'undefined' && typeof Atomics !== 'undefined') {\n  const nil = new Int32Array(new SharedArrayBuffer(4))\n\n  function sleep (ms) {\n    // also filters out NaN, non-number types, including empty strings, but allows bigints\n    const valid = ms > 0 && ms < Infinity \n    if (valid === false) {\n      if (typeof ms !== 'number' && typeof ms !== 'bigint') {\n        throw TypeError('sleep: ms must be a number')\n      }\n      throw RangeError('sleep: ms must be a number that is greater than 0 but less than Infinity')\n    }\n\n    Atomics.wait(nil, 0, 0, Number(ms))\n  }\n  module.exports = sleep\n} else {\n\n  function sleep (ms) {\n    // also filters out NaN, non-number types, including empty strings, but allows bigints\n    const valid = ms > 0 && ms < Infinity \n    if (valid === false) {\n      if (typeof ms !== 'number' && typeof ms !== 'bigint') {\n        throw TypeError('sleep: ms must be a number')\n      }\n      throw RangeError('sleep: ms must be a number that is greater than 0 but less than Infinity')\n    }\n    const target = Date.now() + Number(ms)\n    while (target > Date.now()){}\n  }\n\n  module.exports = sleep\n\n}\n","'use strict'\n\nconst fs = require('fs')\nconst EventEmitter = require('events')\nconst inherits = require('util').inherits\nconst path = require('path')\nconst sleep = require('atomic-sleep')\n\nconst BUSY_WRITE_TIMEOUT = 100\nconst kEmptyBuffer = Buffer.allocUnsafe(0)\n\n// 16 KB. Don't write more than docker buffer size.\n// https://github.com/moby/moby/blob/513ec73831269947d38a644c278ce3cac36783b2/daemon/logger/copier.go#L13\nconst MAX_WRITE = 16 * 1024\n\nconst kContentModeBuffer = 'buffer'\nconst kContentModeUtf8 = 'utf8'\n\nfunction openFile (file, sonic) {\n  sonic._opening = true\n  sonic._writing = true\n  sonic._asyncDrainScheduled = false\n\n  // NOTE: 'error' and 'ready' events emitted below only relevant when sonic.sync===false\n  // for sync mode, there is no way to add a listener that will receive these\n\n  function fileOpened (err, fd) {\n    if (err) {\n      sonic._reopening = false\n      sonic._writing = false\n      sonic._opening = false\n\n      if (sonic.sync) {\n        process.nextTick(() => {\n          if (sonic.listenerCount('error') > 0) {\n            sonic.emit('error', err)\n          }\n        })\n      } else {\n        sonic.emit('error', err)\n      }\n      return\n    }\n\n    const reopening = sonic._reopening\n\n    sonic.fd = fd\n    sonic.file = file\n    sonic._reopening = false\n    sonic._opening = false\n    sonic._writing = false\n\n    if (sonic.sync) {\n      process.nextTick(() => sonic.emit('ready'))\n    } else {\n      sonic.emit('ready')\n    }\n\n    if (sonic.destroyed) {\n      return\n    }\n\n    // start\n    if ((!sonic._writing && sonic._len > sonic.minLength) || sonic._flushPending) {\n      sonic._actualWrite()\n    } else if (reopening) {\n      process.nextTick(() => sonic.emit('drain'))\n    }\n  }\n\n  const flags = sonic.append ? 'a' : 'w'\n  const mode = sonic.mode\n\n  if (sonic.sync) {\n    try {\n      if (sonic.mkdir) fs.mkdirSync(path.dirname(file), { recursive: true })\n      const fd = fs.openSync(file, flags, mode)\n      fileOpened(null, fd)\n    } catch (err) {\n      fileOpened(err)\n      throw err\n    }\n  } else if (sonic.mkdir) {\n    fs.mkdir(path.dirname(file), { recursive: true }, (err) => {\n      if (err) return fileOpened(err)\n      fs.open(file, flags, mode, fileOpened)\n    })\n  } else {\n    fs.open(file, flags, mode, fileOpened)\n  }\n}\n\nfunction SonicBoom (opts) {\n  if (!(this instanceof SonicBoom)) {\n    return new SonicBoom(opts)\n  }\n\n  let { fd, dest, minLength, maxLength, maxWrite, sync, append = true, mkdir, retryEAGAIN, fsync, contentMode, mode } = opts || {}\n\n  fd = fd || dest\n\n  this._len = 0\n  this.fd = -1\n  this._bufs = []\n  this._lens = []\n  this._writing = false\n  this._ending = false\n  this._reopening = false\n  this._asyncDrainScheduled = false\n  this._flushPending = false\n  this._hwm = Math.max(minLength || 0, 16387)\n  this.file = null\n  this.destroyed = false\n  this.minLength = minLength || 0\n  this.maxLength = maxLength || 0\n  this.maxWrite = maxWrite || MAX_WRITE\n  this.sync = sync || false\n  this.writable = true\n  this._fsync = fsync || false\n  this.append = append || false\n  this.mode = mode\n  this.retryEAGAIN = retryEAGAIN || (() => true)\n  this.mkdir = mkdir || false\n\n  let fsWriteSync\n  let fsWrite\n  if (contentMode === kContentModeBuffer) {\n    this._writingBuf = kEmptyBuffer\n    this.write = writeBuffer\n    this.flush = flushBuffer\n    this.flushSync = flushBufferSync\n    this._actualWrite = actualWriteBuffer\n    fsWriteSync = () => fs.writeSync(this.fd, this._writingBuf)\n    fsWrite = () => fs.write(this.fd, this._writingBuf, this.release)\n  } else if (contentMode === undefined || contentMode === kContentModeUtf8) {\n    this._writingBuf = ''\n    this.write = write\n    this.flush = flush\n    this.flushSync = flushSync\n    this._actualWrite = actualWrite\n    fsWriteSync = () => fs.writeSync(this.fd, this._writingBuf, 'utf8')\n    fsWrite = () => fs.write(this.fd, this._writingBuf, 'utf8', this.release)\n  } else {\n    throw new Error(`SonicBoom supports \"${kContentModeUtf8}\" and \"${kContentModeBuffer}\", but passed ${contentMode}`)\n  }\n\n  if (typeof fd === 'number') {\n    this.fd = fd\n    process.nextTick(() => this.emit('ready'))\n  } else if (typeof fd === 'string') {\n    openFile(fd, this)\n  } else {\n    throw new Error('SonicBoom supports only file descriptors and files')\n  }\n  if (this.minLength >= this.maxWrite) {\n    throw new Error(`minLength should be smaller than maxWrite (${this.maxWrite})`)\n  }\n\n  this.release = (err, n) => {\n    if (err) {\n      if ((err.code === 'EAGAIN' || err.code === 'EBUSY') && this.retryEAGAIN(err, this._writingBuf.length, this._len - this._writingBuf.length)) {\n        if (this.sync) {\n          // This error code should not happen in sync mode, because it is\n          // not using the underlining operating system asynchronous functions.\n          // However it happens, and so we handle it.\n          // Ref: https://github.com/pinojs/pino/issues/783\n          try {\n            sleep(BUSY_WRITE_TIMEOUT)\n            this.release(undefined, 0)\n          } catch (err) {\n            this.release(err)\n          }\n        } else {\n          // Let's give the destination some time to process the chunk.\n          setTimeout(fsWrite, BUSY_WRITE_TIMEOUT)\n        }\n      } else {\n        this._writing = false\n\n        this.emit('error', err)\n      }\n      return\n    }\n\n    this.emit('write', n)\n    const releasedBufObj = releaseWritingBuf(this._writingBuf, this._len, n)\n    this._len = releasedBufObj.len\n    this._writingBuf = releasedBufObj.writingBuf\n\n    if (this._writingBuf.length) {\n      if (!this.sync) {\n        fsWrite()\n        return\n      }\n\n      try {\n        do {\n          const n = fsWriteSync()\n          const releasedBufObj = releaseWritingBuf(this._writingBuf, this._len, n)\n          this._len = releasedBufObj.len\n          this._writingBuf = releasedBufObj.writingBuf\n        } while (this._writingBuf.length)\n      } catch (err) {\n        this.release(err)\n        return\n      }\n    }\n\n    if (this._fsync) {\n      fs.fsyncSync(this.fd)\n    }\n\n    const len = this._len\n    if (this._reopening) {\n      this._writing = false\n      this._reopening = false\n      this.reopen()\n    } else if (len > this.minLength) {\n      this._actualWrite()\n    } else if (this._ending) {\n      if (len > 0) {\n        this._actualWrite()\n      } else {\n        this._writing = false\n        actualClose(this)\n      }\n    } else {\n      this._writing = false\n      if (this.sync) {\n        if (!this._asyncDrainScheduled) {\n          this._asyncDrainScheduled = true\n          process.nextTick(emitDrain, this)\n        }\n      } else {\n        this.emit('drain')\n      }\n    }\n  }\n\n  this.on('newListener', function (name) {\n    if (name === 'drain') {\n      this._asyncDrainScheduled = false\n    }\n  })\n}\n\n/**\n * Release the writingBuf after fs.write n bytes data\n * @param {string | Buffer} writingBuf - currently writing buffer, usually be instance._writingBuf.\n * @param {number} len - currently buffer length, usually be instance._len.\n * @param {number} n - number of bytes fs already written\n * @returns {{writingBuf: string | Buffer, len: number}} released writingBuf and length\n */\nfunction releaseWritingBuf (writingBuf, len, n) {\n  // if Buffer.byteLength is equal to n, that means writingBuf contains no multi-byte character\n  if (typeof writingBuf === 'string' && Buffer.byteLength(writingBuf) !== n) {\n    // Since the fs.write callback parameter `n` means how many bytes the passed of string\n    // We calculate the original string length for avoiding the multi-byte character issue\n    n = Buffer.from(writingBuf).subarray(0, n).toString().length\n  }\n  len = Math.max(len - n, 0)\n  writingBuf = writingBuf.slice(n)\n  return { writingBuf, len }\n}\n\nfunction emitDrain (sonic) {\n  const hasListeners = sonic.listenerCount('drain') > 0\n  if (!hasListeners) return\n  sonic._asyncDrainScheduled = false\n  sonic.emit('drain')\n}\n\ninherits(SonicBoom, EventEmitter)\n\nfunction mergeBuf (bufs, len) {\n  if (bufs.length === 0) {\n    return kEmptyBuffer\n  }\n\n  if (bufs.length === 1) {\n    return bufs[0]\n  }\n\n  return Buffer.concat(bufs, len)\n}\n\nfunction write (data) {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  const len = this._len + data.length\n  const bufs = this._bufs\n\n  if (this.maxLength && len > this.maxLength) {\n    this.emit('drop', data)\n    return this._len < this._hwm\n  }\n\n  if (\n    bufs.length === 0 ||\n    bufs[bufs.length - 1].length + data.length > this.maxWrite\n  ) {\n    bufs.push('' + data)\n  } else {\n    bufs[bufs.length - 1] += data\n  }\n\n  this._len = len\n\n  if (!this._writing && this._len >= this.minLength) {\n    this._actualWrite()\n  }\n\n  return this._len < this._hwm\n}\n\nfunction writeBuffer (data) {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  const len = this._len + data.length\n  const bufs = this._bufs\n  const lens = this._lens\n\n  if (this.maxLength && len > this.maxLength) {\n    this.emit('drop', data)\n    return this._len < this._hwm\n  }\n\n  if (\n    bufs.length === 0 ||\n    lens[lens.length - 1] + data.length > this.maxWrite\n  ) {\n    bufs.push([data])\n    lens.push(data.length)\n  } else {\n    bufs[bufs.length - 1].push(data)\n    lens[lens.length - 1] += data.length\n  }\n\n  this._len = len\n\n  if (!this._writing && this._len >= this.minLength) {\n    this._actualWrite()\n  }\n\n  return this._len < this._hwm\n}\n\nfunction callFlushCallbackOnDrain (cb) {\n  this._flushPending = true\n  const onDrain = () => {\n    // only if _fsync is false to avoid double fsync\n    if (!this._fsync) {\n      fs.fsync(this.fd, (err) => {\n        this._flushPending = false\n        cb(err)\n      })\n    } else {\n      this._flushPending = false\n      cb()\n    }\n    this.off('error', onError)\n  }\n  const onError = (err) => {\n    this._flushPending = false\n    cb(err)\n    this.off('drain', onDrain)\n  }\n\n  this.once('drain', onDrain)\n  this.once('error', onError)\n}\n\nfunction flush (cb) {\n  if (cb != null && typeof cb !== 'function') {\n    throw new Error('flush cb must be a function')\n  }\n\n  if (this.destroyed) {\n    const error = new Error('SonicBoom destroyed')\n    if (cb) {\n      cb(error)\n      return\n    }\n\n    throw error\n  }\n\n  if (this.minLength <= 0) {\n    cb?.()\n    return\n  }\n\n  if (cb) {\n    callFlushCallbackOnDrain.call(this, cb)\n  }\n\n  if (this._writing) {\n    return\n  }\n\n  if (this._bufs.length === 0) {\n    this._bufs.push('')\n  }\n\n  this._actualWrite()\n}\n\nfunction flushBuffer (cb) {\n  if (cb != null && typeof cb !== 'function') {\n    throw new Error('flush cb must be a function')\n  }\n\n  if (this.destroyed) {\n    const error = new Error('SonicBoom destroyed')\n    if (cb) {\n      cb(error)\n      return\n    }\n\n    throw error\n  }\n\n  if (this.minLength <= 0) {\n    cb?.()\n    return\n  }\n\n  if (cb) {\n    callFlushCallbackOnDrain.call(this, cb)\n  }\n\n  if (this._writing) {\n    return\n  }\n\n  if (this._bufs.length === 0) {\n    this._bufs.push([])\n    this._lens.push(0)\n  }\n\n  this._actualWrite()\n}\n\nSonicBoom.prototype.reopen = function (file) {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  if (this._opening) {\n    this.once('ready', () => {\n      this.reopen(file)\n    })\n    return\n  }\n\n  if (this._ending) {\n    return\n  }\n\n  if (!this.file) {\n    throw new Error('Unable to reopen a file descriptor, you must pass a file to SonicBoom')\n  }\n\n  if (file) {\n    this.file = file\n  }\n  this._reopening = true\n\n  if (this._writing) {\n    return\n  }\n\n  const fd = this.fd\n  this.once('ready', () => {\n    if (fd !== this.fd) {\n      fs.close(fd, (err) => {\n        if (err) {\n          return this.emit('error', err)\n        }\n      })\n    }\n  })\n\n  openFile(this.file, this)\n}\n\nSonicBoom.prototype.end = function () {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  if (this._opening) {\n    this.once('ready', () => {\n      this.end()\n    })\n    return\n  }\n\n  if (this._ending) {\n    return\n  }\n\n  this._ending = true\n\n  if (this._writing) {\n    return\n  }\n\n  if (this._len > 0 && this.fd >= 0) {\n    this._actualWrite()\n  } else {\n    actualClose(this)\n  }\n}\n\nfunction flushSync () {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  if (this.fd < 0) {\n    throw new Error('sonic boom is not ready yet')\n  }\n\n  if (!this._writing && this._writingBuf.length > 0) {\n    this._bufs.unshift(this._writingBuf)\n    this._writingBuf = ''\n  }\n\n  let buf = ''\n  while (this._bufs.length || buf) {\n    if (buf.length <= 0) {\n      buf = this._bufs[0]\n    }\n    try {\n      const n = fs.writeSync(this.fd, buf, 'utf8')\n      const releasedBufObj = releaseWritingBuf(buf, this._len, n)\n      buf = releasedBufObj.writingBuf\n      this._len = releasedBufObj.len\n      if (buf.length <= 0) {\n        this._bufs.shift()\n      }\n    } catch (err) {\n      const shouldRetry = err.code === 'EAGAIN' || err.code === 'EBUSY'\n      if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {\n        throw err\n      }\n\n      sleep(BUSY_WRITE_TIMEOUT)\n    }\n  }\n\n  try {\n    fs.fsyncSync(this.fd)\n  } catch {\n    // Skip the error. The fd might not support fsync.\n  }\n}\n\nfunction flushBufferSync () {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  if (this.fd < 0) {\n    throw new Error('sonic boom is not ready yet')\n  }\n\n  if (!this._writing && this._writingBuf.length > 0) {\n    this._bufs.unshift([this._writingBuf])\n    this._writingBuf = kEmptyBuffer\n  }\n\n  let buf = kEmptyBuffer\n  while (this._bufs.length || buf.length) {\n    if (buf.length <= 0) {\n      buf = mergeBuf(this._bufs[0], this._lens[0])\n    }\n    try {\n      const n = fs.writeSync(this.fd, buf)\n      buf = buf.subarray(n)\n      this._len = Math.max(this._len - n, 0)\n      if (buf.length <= 0) {\n        this._bufs.shift()\n        this._lens.shift()\n      }\n    } catch (err) {\n      const shouldRetry = err.code === 'EAGAIN' || err.code === 'EBUSY'\n      if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {\n        throw err\n      }\n\n      sleep(BUSY_WRITE_TIMEOUT)\n    }\n  }\n}\n\nSonicBoom.prototype.destroy = function () {\n  if (this.destroyed) {\n    return\n  }\n  actualClose(this)\n}\n\nfunction actualWrite () {\n  const release = this.release\n  this._writing = true\n  this._writingBuf = this._writingBuf || this._bufs.shift() || ''\n\n  if (this.sync) {\n    try {\n      const written = fs.writeSync(this.fd, this._writingBuf, 'utf8')\n      release(null, written)\n    } catch (err) {\n      release(err)\n    }\n  } else {\n    fs.write(this.fd, this._writingBuf, 'utf8', release)\n  }\n}\n\nfunction actualWriteBuffer () {\n  const release = this.release\n  this._writing = true\n  this._writingBuf = this._writingBuf.length ? this._writingBuf : mergeBuf(this._bufs.shift(), this._lens.shift())\n\n  if (this.sync) {\n    try {\n      const written = fs.writeSync(this.fd, this._writingBuf)\n      release(null, written)\n    } catch (err) {\n      release(err)\n    }\n  } else {\n    fs.write(this.fd, this._writingBuf, release)\n  }\n}\n\nfunction actualClose (sonic) {\n  if (sonic.fd === -1) {\n    sonic.once('ready', actualClose.bind(null, sonic))\n    return\n  }\n\n  sonic.destroyed = true\n  sonic._bufs = []\n  sonic._lens = []\n\n  fs.fsync(sonic.fd, closeWrapped)\n\n  function closeWrapped () {\n    // We skip errors in fsync\n\n    if (sonic.fd !== 1 && sonic.fd !== 2) {\n      fs.close(sonic.fd, done)\n    } else {\n      done()\n    }\n  }\n\n  function done (err) {\n    if (err) {\n      sonic.emit('error', err)\n      return\n    }\n\n    if (sonic._ending && !sonic._writing) {\n      sonic.emit('finish')\n    }\n    sonic.emit('close')\n  }\n}\n\n/**\n * These export configurations enable JS and TS developers\n * to consumer SonicBoom in whatever way best suits their needs.\n * Some examples of supported import syntax includes:\n * - `const SonicBoom = require('SonicBoom')`\n * - `const { SonicBoom } = require('SonicBoom')`\n * - `import * as SonicBoom from 'SonicBoom'`\n * - `import { SonicBoom } from 'SonicBoom'`\n * - `import SonicBoom from 'SonicBoom'`\n */\nSonicBoom.SonicBoom = SonicBoom\nSonicBoom.default = SonicBoom\nmodule.exports = SonicBoom\n","'use strict'\n\nconst refs = {\n  exit: [],\n  beforeExit: []\n}\nconst functions = {\n  exit: onExit,\n  beforeExit: onBeforeExit\n}\n\nlet registry\n\nfunction ensureRegistry () {\n  if (registry === undefined) {\n    registry = new FinalizationRegistry(clear)\n  }\n}\n\nfunction install (event) {\n  if (refs[event].length > 0) {\n    return\n  }\n\n  process.on(event, functions[event])\n}\n\nfunction uninstall (event) {\n  if (refs[event].length > 0) {\n    return\n  }\n  process.removeListener(event, functions[event])\n  if (refs.exit.length === 0 && refs.beforeExit.length === 0) {\n    registry = undefined\n  }\n}\n\nfunction onExit () {\n  callRefs('exit')\n}\n\nfunction onBeforeExit () {\n  callRefs('beforeExit')\n}\n\nfunction callRefs (event) {\n  for (const ref of refs[event]) {\n    const obj = ref.deref()\n    const fn = ref.fn\n\n    // This should always happen, however GC is\n    // undeterministic so it might not happen.\n    /* istanbul ignore else */\n    if (obj !== undefined) {\n      fn(obj, event)\n    }\n  }\n  refs[event] = []\n}\n\nfunction clear (ref) {\n  for (const event of ['exit', 'beforeExit']) {\n    const index = refs[event].indexOf(ref)\n    refs[event].splice(index, index + 1)\n    uninstall(event)\n  }\n}\n\nfunction _register (event, obj, fn) {\n  if (obj === undefined) {\n    throw new Error('the object can\\'t be undefined')\n  }\n  install(event)\n  const ref = new WeakRef(obj)\n  ref.fn = fn\n\n  ensureRegistry()\n  registry.register(obj, ref)\n  refs[event].push(ref)\n}\n\nfunction register (obj, fn) {\n  _register('exit', obj, fn)\n}\n\nfunction registerBeforeExit (obj, fn) {\n  _register('beforeExit', obj, fn)\n}\n\nfunction unregister (obj) {\n  if (registry === undefined) {\n    return\n  }\n  registry.unregister(obj)\n  for (const event of ['exit', 'beforeExit']) {\n    refs[event] = refs[event].filter((ref) => {\n      const _obj = ref.deref()\n      return _obj && _obj !== obj\n    })\n    uninstall(event)\n  }\n}\n\nmodule.exports = {\n  register,\n  registerBeforeExit,\n  unregister\n}\n","{\n  \"name\": \"thread-stream\",\n  \"version\": \"3.0.0\",\n  \"description\": \"A streaming way to send data to a Node.js Worker Thread\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"dependencies\": {\n    \"real-require\": \"^0.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.1.0\",\n    \"@types/tap\": \"^15.0.0\",\n    \"@yao-pkg/pkg\": \"^5.11.5\",\n    \"desm\": \"^1.3.0\",\n    \"fastbench\": \"^1.0.1\",\n    \"husky\": \"^9.0.6\",\n    \"pino-elasticsearch\": \"^8.0.0\",\n    \"sonic-boom\": \"^3.0.0\",\n    \"standard\": \"^17.0.0\",\n    \"tap\": \"^16.2.0\",\n    \"ts-node\": \"^10.8.0\",\n    \"typescript\": \"^5.3.2\",\n    \"why-is-node-running\": \"^2.2.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && npm run transpile && tap \\\"test/**/*.test.*js\\\" && tap --ts test/*.test.*ts\",\n    \"test:ci\": \"standard && npm run transpile && npm run test:ci:js && npm run test:ci:ts\",\n    \"test:ci:js\": \"tap --no-check-coverage --timeout=120 --coverage-report=lcovonly \\\"test/**/*.test.*js\\\"\",\n    \"test:ci:ts\": \"tap --ts --no-check-coverage --coverage-report=lcovonly \\\"test/**/*.test.*ts\\\"\",\n    \"test:yarn\": \"npm run transpile && tap \\\"test/**/*.test.js\\\" --no-check-coverage\",\n    \"transpile\": \"sh ./test/ts/transpile.sh\",\n    \"prepare\": \"husky install\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"test/ts/**/*\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/mcollina/thread-stream.git\"\n  },\n  \"keywords\": [\n    \"worker\",\n    \"thread\",\n    \"threads\",\n    \"stream\"\n  ],\n  \"author\": \"Matteo Collina <hello@matteocollina.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mcollina/thread-stream/issues\"\n  },\n  \"homepage\": \"https://github.com/mcollina/thread-stream#readme\"\n}\n","'use strict'\n\nconst MAX_TIMEOUT = 1000\n\nfunction wait (state, index, expected, timeout, done) {\n  const max = Date.now() + timeout\n  let current = Atomics.load(state, index)\n  if (current === expected) {\n    done(null, 'ok')\n    return\n  }\n  let prior = current\n  const check = (backoff) => {\n    if (Date.now() > max) {\n      done(null, 'timed-out')\n    } else {\n      setTimeout(() => {\n        prior = current\n        current = Atomics.load(state, index)\n        if (current === prior) {\n          check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2)\n        } else {\n          if (current === expected) done(null, 'ok')\n          else done(null, 'not-equal')\n        }\n      }, backoff)\n    }\n  }\n  check(1)\n}\n\n// let waitDiffCount = 0\nfunction waitDiff (state, index, expected, timeout, done) {\n  // const id = waitDiffCount++\n  // process._rawDebug(`>>> waitDiff ${id}`)\n  const max = Date.now() + timeout\n  let current = Atomics.load(state, index)\n  if (current !== expected) {\n    done(null, 'ok')\n    return\n  }\n  const check = (backoff) => {\n    // process._rawDebug(`${id} ${index} current ${current} expected ${expected}`)\n    // process._rawDebug('' + backoff)\n    if (Date.now() > max) {\n      done(null, 'timed-out')\n    } else {\n      setTimeout(() => {\n        current = Atomics.load(state, index)\n        if (current !== expected) {\n          done(null, 'ok')\n        } else {\n          check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2)\n        }\n      }, backoff)\n    }\n  }\n  check(1)\n}\n\nmodule.exports = { wait, waitDiff }\n","'use strict'\n\nconst WRITE_INDEX = 4\nconst READ_INDEX = 8\n\nmodule.exports = {\n  WRITE_INDEX,\n  READ_INDEX\n}\n","'use strict'\n\nconst { version } = require('./package.json')\nconst { EventEmitter } = require('events')\nconst { Worker } = require('worker_threads')\nconst { join } = require('path')\nconst { pathToFileURL } = require('url')\nconst { wait } = require('./lib/wait')\nconst {\n  WRITE_INDEX,\n  READ_INDEX\n} = require('./lib/indexes')\nconst buffer = require('buffer')\nconst assert = require('assert')\n\nconst kImpl = Symbol('kImpl')\n\n// V8 limit for string size\nconst MAX_STRING = buffer.constants.MAX_STRING_LENGTH\n\nclass FakeWeakRef {\n  constructor (value) {\n    this._value = value\n  }\n\n  deref () {\n    return this._value\n  }\n}\n\nclass FakeFinalizationRegistry {\n  register () {}\n\n  unregister () {}\n}\n\n// Currently using FinalizationRegistry with code coverage breaks the world\n// Ref: https://github.com/nodejs/node/issues/49344\nconst FinalizationRegistry = process.env.NODE_V8_COVERAGE ? FakeFinalizationRegistry : global.FinalizationRegistry || FakeFinalizationRegistry\nconst WeakRef = process.env.NODE_V8_COVERAGE ? FakeWeakRef : global.WeakRef || FakeWeakRef\n\nconst registry = new FinalizationRegistry((worker) => {\n  if (worker.exited) {\n    return\n  }\n  worker.terminate()\n})\n\nfunction createWorker (stream, opts) {\n  const { filename, workerData } = opts\n\n  const bundlerOverrides = '__bundlerPathsOverrides' in globalThis ? globalThis.__bundlerPathsOverrides : {}\n  const toExecute = bundlerOverrides['thread-stream-worker'] || join(__dirname, 'lib', 'worker.js')\n\n  const worker = new Worker(toExecute, {\n    ...opts.workerOpts,\n    trackUnmanagedFds: false,\n    workerData: {\n      filename: filename.indexOf('file://') === 0\n        ? filename\n        : pathToFileURL(filename).href,\n      dataBuf: stream[kImpl].dataBuf,\n      stateBuf: stream[kImpl].stateBuf,\n      workerData: {\n        $context: {\n          threadStreamVersion: version\n        },\n        ...workerData\n      }\n    }\n  })\n\n  // We keep a strong reference for now,\n  // we need to start writing first\n  worker.stream = new FakeWeakRef(stream)\n\n  worker.on('message', onWorkerMessage)\n  worker.on('exit', onWorkerExit)\n  registry.register(stream, worker)\n\n  return worker\n}\n\nfunction drain (stream) {\n  assert(!stream[kImpl].sync)\n  if (stream[kImpl].needDrain) {\n    stream[kImpl].needDrain = false\n    stream.emit('drain')\n  }\n}\n\nfunction nextFlush (stream) {\n  const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX)\n  let leftover = stream[kImpl].data.length - writeIndex\n\n  if (leftover > 0) {\n    if (stream[kImpl].buf.length === 0) {\n      stream[kImpl].flushing = false\n\n      if (stream[kImpl].ending) {\n        end(stream)\n      } else if (stream[kImpl].needDrain) {\n        process.nextTick(drain, stream)\n      }\n\n      return\n    }\n\n    let toWrite = stream[kImpl].buf.slice(0, leftover)\n    let toWriteBytes = Buffer.byteLength(toWrite)\n    if (toWriteBytes <= leftover) {\n      stream[kImpl].buf = stream[kImpl].buf.slice(leftover)\n      // process._rawDebug('writing ' + toWrite.length)\n      write(stream, toWrite, nextFlush.bind(null, stream))\n    } else {\n      // multi-byte utf-8\n      stream.flush(() => {\n        // err is already handled in flush()\n        if (stream.destroyed) {\n          return\n        }\n\n        Atomics.store(stream[kImpl].state, READ_INDEX, 0)\n        Atomics.store(stream[kImpl].state, WRITE_INDEX, 0)\n\n        // Find a toWrite length that fits the buffer\n        // it must exists as the buffer is at least 4 bytes length\n        // and the max utf-8 length for a char is 4 bytes.\n        while (toWriteBytes > stream[kImpl].data.length) {\n          leftover = leftover / 2\n          toWrite = stream[kImpl].buf.slice(0, leftover)\n          toWriteBytes = Buffer.byteLength(toWrite)\n        }\n        stream[kImpl].buf = stream[kImpl].buf.slice(leftover)\n        write(stream, toWrite, nextFlush.bind(null, stream))\n      })\n    }\n  } else if (leftover === 0) {\n    if (writeIndex === 0 && stream[kImpl].buf.length === 0) {\n      // we had a flushSync in the meanwhile\n      return\n    }\n    stream.flush(() => {\n      Atomics.store(stream[kImpl].state, READ_INDEX, 0)\n      Atomics.store(stream[kImpl].state, WRITE_INDEX, 0)\n      nextFlush(stream)\n    })\n  } else {\n    // This should never happen\n    destroy(stream, new Error('overwritten'))\n  }\n}\n\nfunction onWorkerMessage (msg) {\n  const stream = this.stream.deref()\n  if (stream === undefined) {\n    this.exited = true\n    // Terminate the worker.\n    this.terminate()\n    return\n  }\n\n  switch (msg.code) {\n    case 'READY':\n      // Replace the FakeWeakRef with a\n      // proper one.\n      this.stream = new WeakRef(stream)\n\n      stream.flush(() => {\n        stream[kImpl].ready = true\n        stream.emit('ready')\n      })\n      break\n    case 'ERROR':\n      destroy(stream, msg.err)\n      break\n    case 'EVENT':\n      if (Array.isArray(msg.args)) {\n        stream.emit(msg.name, ...msg.args)\n      } else {\n        stream.emit(msg.name, msg.args)\n      }\n      break\n    case 'WARNING':\n      process.emitWarning(msg.err)\n      break\n    default:\n      destroy(stream, new Error('this should not happen: ' + msg.code))\n  }\n}\n\nfunction onWorkerExit (code) {\n  const stream = this.stream.deref()\n  if (stream === undefined) {\n    // Nothing to do, the worker already exit\n    return\n  }\n  registry.unregister(stream)\n  stream.worker.exited = true\n  stream.worker.off('exit', onWorkerExit)\n  destroy(stream, code !== 0 ? new Error('the worker thread exited') : null)\n}\n\nclass ThreadStream extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n\n    if (opts.bufferSize < 4) {\n      throw new Error('bufferSize must at least fit a 4-byte utf-8 char')\n    }\n\n    this[kImpl] = {}\n    this[kImpl].stateBuf = new SharedArrayBuffer(128)\n    this[kImpl].state = new Int32Array(this[kImpl].stateBuf)\n    this[kImpl].dataBuf = new SharedArrayBuffer(opts.bufferSize || 4 * 1024 * 1024)\n    this[kImpl].data = Buffer.from(this[kImpl].dataBuf)\n    this[kImpl].sync = opts.sync || false\n    this[kImpl].ending = false\n    this[kImpl].ended = false\n    this[kImpl].needDrain = false\n    this[kImpl].destroyed = false\n    this[kImpl].flushing = false\n    this[kImpl].ready = false\n    this[kImpl].finished = false\n    this[kImpl].errored = null\n    this[kImpl].closed = false\n    this[kImpl].buf = ''\n\n    // TODO (fix): Make private?\n    this.worker = createWorker(this, opts) // TODO (fix): make private\n    this.on('message', (message, transferList) => {\n      this.worker.postMessage(message, transferList)\n    })\n  }\n\n  write (data) {\n    if (this[kImpl].destroyed) {\n      error(this, new Error('the worker has exited'))\n      return false\n    }\n\n    if (this[kImpl].ending) {\n      error(this, new Error('the worker is ending'))\n      return false\n    }\n\n    if (this[kImpl].flushing && this[kImpl].buf.length + data.length >= MAX_STRING) {\n      try {\n        writeSync(this)\n        this[kImpl].flushing = true\n      } catch (err) {\n        destroy(this, err)\n        return false\n      }\n    }\n\n    this[kImpl].buf += data\n\n    if (this[kImpl].sync) {\n      try {\n        writeSync(this)\n        return true\n      } catch (err) {\n        destroy(this, err)\n        return false\n      }\n    }\n\n    if (!this[kImpl].flushing) {\n      this[kImpl].flushing = true\n      setImmediate(nextFlush, this)\n    }\n\n    this[kImpl].needDrain = this[kImpl].data.length - this[kImpl].buf.length - Atomics.load(this[kImpl].state, WRITE_INDEX) <= 0\n    return !this[kImpl].needDrain\n  }\n\n  end () {\n    if (this[kImpl].destroyed) {\n      return\n    }\n\n    this[kImpl].ending = true\n    end(this)\n  }\n\n  flush (cb) {\n    if (this[kImpl].destroyed) {\n      if (typeof cb === 'function') {\n        process.nextTick(cb, new Error('the worker has exited'))\n      }\n      return\n    }\n\n    // TODO write all .buf\n    const writeIndex = Atomics.load(this[kImpl].state, WRITE_INDEX)\n    // process._rawDebug(`(flush) readIndex (${Atomics.load(this.state, READ_INDEX)}) writeIndex (${Atomics.load(this.state, WRITE_INDEX)})`)\n    wait(this[kImpl].state, READ_INDEX, writeIndex, Infinity, (err, res) => {\n      if (err) {\n        destroy(this, err)\n        process.nextTick(cb, err)\n        return\n      }\n      if (res === 'not-equal') {\n        // TODO handle deadlock\n        this.flush(cb)\n        return\n      }\n      process.nextTick(cb)\n    })\n  }\n\n  flushSync () {\n    if (this[kImpl].destroyed) {\n      return\n    }\n\n    writeSync(this)\n    flushSync(this)\n  }\n\n  unref () {\n    this.worker.unref()\n  }\n\n  ref () {\n    this.worker.ref()\n  }\n\n  get ready () {\n    return this[kImpl].ready\n  }\n\n  get destroyed () {\n    return this[kImpl].destroyed\n  }\n\n  get closed () {\n    return this[kImpl].closed\n  }\n\n  get writable () {\n    return !this[kImpl].destroyed && !this[kImpl].ending\n  }\n\n  get writableEnded () {\n    return this[kImpl].ending\n  }\n\n  get writableFinished () {\n    return this[kImpl].finished\n  }\n\n  get writableNeedDrain () {\n    return this[kImpl].needDrain\n  }\n\n  get writableObjectMode () {\n    return false\n  }\n\n  get writableErrored () {\n    return this[kImpl].errored\n  }\n}\n\nfunction error (stream, err) {\n  setImmediate(() => {\n    stream.emit('error', err)\n  })\n}\n\nfunction destroy (stream, err) {\n  if (stream[kImpl].destroyed) {\n    return\n  }\n  stream[kImpl].destroyed = true\n\n  if (err) {\n    stream[kImpl].errored = err\n    error(stream, err)\n  }\n\n  if (!stream.worker.exited) {\n    stream.worker.terminate()\n      .catch(() => {})\n      .then(() => {\n        stream[kImpl].closed = true\n        stream.emit('close')\n      })\n  } else {\n    setImmediate(() => {\n      stream[kImpl].closed = true\n      stream.emit('close')\n    })\n  }\n}\n\nfunction write (stream, data, cb) {\n  // data is smaller than the shared buffer length\n  const current = Atomics.load(stream[kImpl].state, WRITE_INDEX)\n  const length = Buffer.byteLength(data)\n  stream[kImpl].data.write(data, current)\n  Atomics.store(stream[kImpl].state, WRITE_INDEX, current + length)\n  Atomics.notify(stream[kImpl].state, WRITE_INDEX)\n  cb()\n  return true\n}\n\nfunction end (stream) {\n  if (stream[kImpl].ended || !stream[kImpl].ending || stream[kImpl].flushing) {\n    return\n  }\n  stream[kImpl].ended = true\n\n  try {\n    stream.flushSync()\n\n    let readIndex = Atomics.load(stream[kImpl].state, READ_INDEX)\n\n    // process._rawDebug('writing index')\n    Atomics.store(stream[kImpl].state, WRITE_INDEX, -1)\n    // process._rawDebug(`(end) readIndex (${Atomics.load(stream.state, READ_INDEX)}) writeIndex (${Atomics.load(stream.state, WRITE_INDEX)})`)\n    Atomics.notify(stream[kImpl].state, WRITE_INDEX)\n\n    // Wait for the process to complete\n    let spins = 0\n    while (readIndex !== -1) {\n      // process._rawDebug(`read = ${read}`)\n      Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000)\n      readIndex = Atomics.load(stream[kImpl].state, READ_INDEX)\n\n      if (readIndex === -2) {\n        destroy(stream, new Error('end() failed'))\n        return\n      }\n\n      if (++spins === 10) {\n        destroy(stream, new Error('end() took too long (10s)'))\n        return\n      }\n    }\n\n    process.nextTick(() => {\n      stream[kImpl].finished = true\n      stream.emit('finish')\n    })\n  } catch (err) {\n    destroy(stream, err)\n  }\n  // process._rawDebug('end finished...')\n}\n\nfunction writeSync (stream) {\n  const cb = () => {\n    if (stream[kImpl].ending) {\n      end(stream)\n    } else if (stream[kImpl].needDrain) {\n      process.nextTick(drain, stream)\n    }\n  }\n  stream[kImpl].flushing = false\n\n  while (stream[kImpl].buf.length !== 0) {\n    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX)\n    let leftover = stream[kImpl].data.length - writeIndex\n    if (leftover === 0) {\n      flushSync(stream)\n      Atomics.store(stream[kImpl].state, READ_INDEX, 0)\n      Atomics.store(stream[kImpl].state, WRITE_INDEX, 0)\n      continue\n    } else if (leftover < 0) {\n      // stream should never happen\n      throw new Error('overwritten')\n    }\n\n    let toWrite = stream[kImpl].buf.slice(0, leftover)\n    let toWriteBytes = Buffer.byteLength(toWrite)\n    if (toWriteBytes <= leftover) {\n      stream[kImpl].buf = stream[kImpl].buf.slice(leftover)\n      // process._rawDebug('writing ' + toWrite.length)\n      write(stream, toWrite, cb)\n    } else {\n      // multi-byte utf-8\n      flushSync(stream)\n      Atomics.store(stream[kImpl].state, READ_INDEX, 0)\n      Atomics.store(stream[kImpl].state, WRITE_INDEX, 0)\n\n      // Find a toWrite length that fits the buffer\n      // it must exists as the buffer is at least 4 bytes length\n      // and the max utf-8 length for a char is 4 bytes.\n      while (toWriteBytes > stream[kImpl].buf.length) {\n        leftover = leftover / 2\n        toWrite = stream[kImpl].buf.slice(0, leftover)\n        toWriteBytes = Buffer.byteLength(toWrite)\n      }\n      stream[kImpl].buf = stream[kImpl].buf.slice(leftover)\n      write(stream, toWrite, cb)\n    }\n  }\n}\n\nfunction flushSync (stream) {\n  if (stream[kImpl].flushing) {\n    throw new Error('unable to flush while flushing')\n  }\n\n  // process._rawDebug('flushSync started')\n\n  const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX)\n\n  let spins = 0\n\n  // TODO handle deadlock\n  while (true) {\n    const readIndex = Atomics.load(stream[kImpl].state, READ_INDEX)\n\n    if (readIndex === -2) {\n      throw Error('_flushSync failed')\n    }\n\n    // process._rawDebug(`(flushSync) readIndex (${readIndex}) writeIndex (${writeIndex})`)\n    if (readIndex !== writeIndex) {\n      // TODO stream timeouts for some reason.\n      Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000)\n    } else {\n      break\n    }\n\n    if (++spins === 10) {\n      throw new Error('_flushSync took too long (10s)')\n    }\n  }\n  // process._rawDebug('flushSync finished')\n}\n\nmodule.exports = ThreadStream\n","'use strict'\n\nconst { createRequire } = require('module')\nconst getCallers = require('./caller')\nconst { join, isAbsolute, sep } = require('path')\nconst sleep = require('atomic-sleep')\nconst onExit = require('on-exit-leak-free')\nconst ThreadStream = require('thread-stream')\n\nfunction setupOnExit (stream) {\n  // This is leak free, it does not leave event handlers\n  onExit.register(stream, autoEnd)\n  onExit.registerBeforeExit(stream, flush)\n\n  stream.on('close', function () {\n    onExit.unregister(stream)\n  })\n}\n\nfunction buildStream (filename, workerData, workerOpts) {\n  const stream = new ThreadStream({\n    filename,\n    workerData,\n    workerOpts\n  })\n\n  stream.on('ready', onReady)\n  stream.on('close', function () {\n    process.removeListener('exit', onExit)\n  })\n\n  process.on('exit', onExit)\n\n  function onReady () {\n    process.removeListener('exit', onExit)\n    stream.unref()\n\n    if (workerOpts.autoEnd !== false) {\n      setupOnExit(stream)\n    }\n  }\n\n  function onExit () {\n    /* istanbul ignore next */\n    if (stream.closed) {\n      return\n    }\n    stream.flushSync()\n    // Apparently there is a very sporadic race condition\n    // that in certain OS would prevent the messages to be flushed\n    // because the thread might not have been created still.\n    // Unfortunately we need to sleep(100) in this case.\n    sleep(100)\n    stream.end()\n  }\n\n  return stream\n}\n\nfunction autoEnd (stream) {\n  stream.ref()\n  stream.flushSync()\n  stream.end()\n  stream.once('close', function () {\n    stream.unref()\n  })\n}\n\nfunction flush (stream) {\n  stream.flushSync()\n}\n\nfunction transport (fullOptions) {\n  const { pipeline, targets, levels, dedupe, options = {}, worker = {}, caller = getCallers() } = fullOptions\n\n  // Backwards compatibility\n  const callers = typeof caller === 'string' ? [caller] : caller\n\n  // This will be eventually modified by bundlers\n  const bundlerOverrides = '__bundlerPathsOverrides' in globalThis ? globalThis.__bundlerPathsOverrides : {}\n\n  let target = fullOptions.target\n\n  if (target && targets) {\n    throw new Error('only one of target or targets can be specified')\n  }\n\n  if (targets) {\n    target = bundlerOverrides['pino-worker'] || join(__dirname, 'worker.js')\n    options.targets = targets.filter(dest => dest.target).map((dest) => {\n      return {\n        ...dest,\n        target: fixTarget(dest.target)\n      }\n    })\n    options.pipelines = targets.filter(dest => dest.pipeline).map((dest) => {\n      return dest.pipeline.map((t) => {\n        return {\n          ...t,\n          level: dest.level, // duplicate the pipeline `level` property defined in the upper level\n          target: fixTarget(t.target)\n        }\n      })\n    })\n  } else if (pipeline) {\n    target = bundlerOverrides['pino-worker'] || join(__dirname, 'worker.js')\n    options.pipelines = [pipeline.map((dest) => {\n      return {\n        ...dest,\n        target: fixTarget(dest.target)\n      }\n    })]\n  }\n\n  if (levels) {\n    options.levels = levels\n  }\n\n  if (dedupe) {\n    options.dedupe = dedupe\n  }\n\n  options.pinoWillSendConfig = true\n\n  return buildStream(fixTarget(target), options, worker)\n\n  function fixTarget (origin) {\n    origin = bundlerOverrides[origin] || origin\n\n    if (isAbsolute(origin) || origin.indexOf('file://') === 0) {\n      return origin\n    }\n\n    if (origin === 'pino/file') {\n      return join(__dirname, '..', 'file.js')\n    }\n\n    let fixTarget\n\n    for (const filePath of callers) {\n      try {\n        const context = filePath === 'node:repl'\n          ? process.cwd() + sep\n          : filePath\n\n        fixTarget = createRequire(context).resolve(origin)\n        break\n      } catch (err) {\n        // Silent catch\n        continue\n      }\n    }\n\n    if (!fixTarget) {\n      throw new Error(`unable to determine transport target for \"${origin}\"`)\n    }\n\n    return fixTarget\n  }\n}\n\nmodule.exports = transport\n","'use strict'\n\n/* eslint no-prototype-builtins: 0 */\n\nconst format = require('quick-format-unescaped')\nconst { mapHttpRequest, mapHttpResponse } = require('pino-std-serializers')\nconst SonicBoom = require('sonic-boom')\nconst onExit = require('on-exit-leak-free')\nconst {\n  lsCacheSym,\n  chindingsSym,\n  writeSym,\n  serializersSym,\n  formatOptsSym,\n  endSym,\n  stringifiersSym,\n  stringifySym,\n  stringifySafeSym,\n  wildcardFirstSym,\n  nestedKeySym,\n  formattersSym,\n  messageKeySym,\n  errorKeySym,\n  nestedKeyStrSym,\n  msgPrefixSym\n} = require('./symbols')\nconst { isMainThread } = require('worker_threads')\nconst transport = require('./transport')\n\nfunction noop () {\n}\n\nfunction genLog (level, hook) {\n  if (!hook) return LOG\n\n  return function hookWrappedLog (...args) {\n    hook.call(this, args, LOG, level)\n  }\n\n  function LOG (o, ...n) {\n    if (typeof o === 'object') {\n      let msg = o\n      if (o !== null) {\n        if (o.method && o.headers && o.socket) {\n          o = mapHttpRequest(o)\n        } else if (typeof o.setHeader === 'function') {\n          o = mapHttpResponse(o)\n        }\n      }\n      let formatParams\n      if (msg === null && n.length === 0) {\n        formatParams = [null]\n      } else {\n        msg = n.shift()\n        formatParams = n\n      }\n      // We do not use a coercive check for `msg` as it is\n      // measurably slower than the explicit checks.\n      if (typeof this[msgPrefixSym] === 'string' && msg !== undefined && msg !== null) {\n        msg = this[msgPrefixSym] + msg\n      }\n      this[writeSym](o, format(msg, formatParams, this[formatOptsSym]), level)\n    } else {\n      let msg = o === undefined ? n.shift() : o\n\n      // We do not use a coercive check for `msg` as it is\n      // measurably slower than the explicit checks.\n      if (typeof this[msgPrefixSym] === 'string' && msg !== undefined && msg !== null) {\n        msg = this[msgPrefixSym] + msg\n      }\n      this[writeSym](null, format(msg, n, this[formatOptsSym]), level)\n    }\n  }\n}\n\n// magically escape strings for json\n// relying on their charCodeAt\n// everything below 32 needs JSON.stringify()\n// 34 and 92 happens all the time, so we\n// have a fast case for them\nfunction asString (str) {\n  let result = ''\n  let last = 0\n  let found = false\n  let point = 255\n  const l = str.length\n  if (l > 100) {\n    return JSON.stringify(str)\n  }\n  for (var i = 0; i < l && point >= 32; i++) {\n    point = str.charCodeAt(i)\n    if (point === 34 || point === 92) {\n      result += str.slice(last, i) + '\\\\'\n      last = i\n      found = true\n    }\n  }\n  if (!found) {\n    result = str\n  } else {\n    result += str.slice(last)\n  }\n  return point < 32 ? JSON.stringify(str) : '\"' + result + '\"'\n}\n\nfunction asJson (obj, msg, num, time) {\n  const stringify = this[stringifySym]\n  const stringifySafe = this[stringifySafeSym]\n  const stringifiers = this[stringifiersSym]\n  const end = this[endSym]\n  const chindings = this[chindingsSym]\n  const serializers = this[serializersSym]\n  const formatters = this[formattersSym]\n  const messageKey = this[messageKeySym]\n  const errorKey = this[errorKeySym]\n  let data = this[lsCacheSym][num] + time\n\n  // we need the child bindings added to the output first so instance logged\n  // objects can take precedence when JSON.parse-ing the resulting log line\n  data = data + chindings\n\n  let value\n  if (formatters.log) {\n    obj = formatters.log(obj)\n  }\n  const wildcardStringifier = stringifiers[wildcardFirstSym]\n  let propStr = ''\n  for (const key in obj) {\n    value = obj[key]\n    if (Object.prototype.hasOwnProperty.call(obj, key) && value !== undefined) {\n      if (serializers[key]) {\n        value = serializers[key](value)\n      } else if (key === errorKey && serializers.err) {\n        value = serializers.err(value)\n      }\n\n      const stringifier = stringifiers[key] || wildcardStringifier\n\n      switch (typeof value) {\n        case 'undefined':\n        case 'function':\n          continue\n        case 'number':\n          /* eslint no-fallthrough: \"off\" */\n          if (Number.isFinite(value) === false) {\n            value = null\n          }\n        // this case explicitly falls through to the next one\n        case 'boolean':\n          if (stringifier) value = stringifier(value)\n          break\n        case 'string':\n          value = (stringifier || asString)(value)\n          break\n        default:\n          value = (stringifier || stringify)(value, stringifySafe)\n      }\n      if (value === undefined) continue\n      const strKey = asString(key)\n      propStr += ',' + strKey + ':' + value\n    }\n  }\n\n  let msgStr = ''\n  if (msg !== undefined) {\n    value = serializers[messageKey] ? serializers[messageKey](msg) : msg\n    const stringifier = stringifiers[messageKey] || wildcardStringifier\n\n    switch (typeof value) {\n      case 'function':\n        break\n      case 'number':\n        /* eslint no-fallthrough: \"off\" */\n        if (Number.isFinite(value) === false) {\n          value = null\n        }\n      // this case explicitly falls through to the next one\n      case 'boolean':\n        if (stringifier) value = stringifier(value)\n        msgStr = ',\"' + messageKey + '\":' + value\n        break\n      case 'string':\n        value = (stringifier || asString)(value)\n        msgStr = ',\"' + messageKey + '\":' + value\n        break\n      default:\n        value = (stringifier || stringify)(value, stringifySafe)\n        msgStr = ',\"' + messageKey + '\":' + value\n    }\n  }\n\n  if (this[nestedKeySym] && propStr) {\n    // place all the obj properties under the specified key\n    // the nested key is already formatted from the constructor\n    return data + this[nestedKeyStrSym] + propStr.slice(1) + '}' + msgStr + end\n  } else {\n    return data + propStr + msgStr + end\n  }\n}\n\nfunction asChindings (instance, bindings) {\n  let value\n  let data = instance[chindingsSym]\n  const stringify = instance[stringifySym]\n  const stringifySafe = instance[stringifySafeSym]\n  const stringifiers = instance[stringifiersSym]\n  const wildcardStringifier = stringifiers[wildcardFirstSym]\n  const serializers = instance[serializersSym]\n  const formatter = instance[formattersSym].bindings\n  bindings = formatter(bindings)\n\n  for (const key in bindings) {\n    value = bindings[key]\n    const valid = key !== 'level' &&\n      key !== 'serializers' &&\n      key !== 'formatters' &&\n      key !== 'customLevels' &&\n      bindings.hasOwnProperty(key) &&\n      value !== undefined\n    if (valid === true) {\n      value = serializers[key] ? serializers[key](value) : value\n      value = (stringifiers[key] || wildcardStringifier || stringify)(value, stringifySafe)\n      if (value === undefined) continue\n      data += ',\"' + key + '\":' + value\n    }\n  }\n  return data\n}\n\nfunction hasBeenTampered (stream) {\n  return stream.write !== stream.constructor.prototype.write\n}\n\nconst hasNodeCodeCoverage = process.env.NODE_V8_COVERAGE || process.env.V8_COVERAGE\n\nfunction buildSafeSonicBoom (opts) {\n  const stream = new SonicBoom(opts)\n  stream.on('error', filterBrokenPipe)\n  // If we are sync: false, we must flush on exit\n  // We must disable this if there is node code coverage due to\n  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308.\n  if (!hasNodeCodeCoverage && !opts.sync && isMainThread) {\n    onExit.register(stream, autoEnd)\n\n    stream.on('close', function () {\n      onExit.unregister(stream)\n    })\n  }\n  return stream\n\n  function filterBrokenPipe (err) {\n    // Impossible to replicate across all operating systems\n    /* istanbul ignore next */\n    if (err.code === 'EPIPE') {\n      // If we get EPIPE, we should stop logging here\n      // however we have no control to the consumer of\n      // SonicBoom, so we just overwrite the write method\n      stream.write = noop\n      stream.end = noop\n      stream.flushSync = noop\n      stream.destroy = noop\n      return\n    }\n    stream.removeListener('error', filterBrokenPipe)\n    stream.emit('error', err)\n  }\n}\n\nfunction autoEnd (stream, eventName) {\n  // This check is needed only on some platforms\n  /* istanbul ignore next */\n  if (stream.destroyed) {\n    return\n  }\n\n  if (eventName === 'beforeExit') {\n    // We still have an event loop, let's use it\n    stream.flush()\n    stream.on('drain', function () {\n      stream.end()\n    })\n  } else {\n    // For some reason istanbul is not detecting this, but it's there\n    /* istanbul ignore next */\n    // We do not have an event loop, so flush synchronously\n    stream.flushSync()\n  }\n}\n\nfunction createArgsNormalizer (defaultOptions) {\n  return function normalizeArgs (instance, caller, opts = {}, stream) {\n    // support stream as a string\n    if (typeof opts === 'string') {\n      stream = buildSafeSonicBoom({ dest: opts })\n      opts = {}\n    } else if (typeof stream === 'string') {\n      if (opts && opts.transport) {\n        throw Error('only one of option.transport or stream can be specified')\n      }\n      stream = buildSafeSonicBoom({ dest: stream })\n    } else if (opts instanceof SonicBoom || opts.writable || opts._writableState) {\n      stream = opts\n      opts = {}\n    } else if (opts.transport) {\n      if (opts.transport instanceof SonicBoom || opts.transport.writable || opts.transport._writableState) {\n        throw Error('option.transport do not allow stream, please pass to option directly. e.g. pino(transport)')\n      }\n      if (opts.transport.targets && opts.transport.targets.length && opts.formatters && typeof opts.formatters.level === 'function') {\n        throw Error('option.transport.targets do not allow custom level formatters')\n      }\n\n      let customLevels\n      if (opts.customLevels) {\n        customLevels = opts.useOnlyCustomLevels ? opts.customLevels : Object.assign({}, opts.levels, opts.customLevels)\n      }\n      stream = transport({ caller, ...opts.transport, levels: customLevels })\n    }\n    opts = Object.assign({}, defaultOptions, opts)\n    opts.serializers = Object.assign({}, defaultOptions.serializers, opts.serializers)\n    opts.formatters = Object.assign({}, defaultOptions.formatters, opts.formatters)\n\n    if (opts.prettyPrint) {\n      throw new Error('prettyPrint option is no longer supported, see the pino-pretty package (https://github.com/pinojs/pino-pretty)')\n    }\n\n    const { enabled, onChild } = opts\n    if (enabled === false) opts.level = 'silent'\n    if (!onChild) opts.onChild = noop\n    if (!stream) {\n      if (!hasBeenTampered(process.stdout)) {\n        // If process.stdout.fd is undefined, it means that we are running\n        // in a worker thread. Let's assume we are logging to file descriptor 1.\n        stream = buildSafeSonicBoom({ fd: process.stdout.fd || 1 })\n      } else {\n        stream = process.stdout\n      }\n    }\n    return { opts, stream }\n  }\n}\n\nfunction stringify (obj, stringifySafeFn) {\n  try {\n    return JSON.stringify(obj)\n  } catch (_) {\n    try {\n      const stringify = stringifySafeFn || this[stringifySafeSym]\n      return stringify(obj)\n    } catch (_) {\n      return '\"[unable to serialize, circular reference is too complex to analyze]\"'\n    }\n  }\n}\n\nfunction buildFormatters (level, bindings, log) {\n  return {\n    level,\n    bindings,\n    log\n  }\n}\n\n/**\n * Convert a string integer file descriptor to a proper native integer\n * file descriptor.\n *\n * @param {string} destination The file descriptor string to attempt to convert.\n *\n * @returns {Number}\n */\nfunction normalizeDestFileDescriptor (destination) {\n  const fd = Number(destination)\n  if (typeof destination === 'string' && Number.isFinite(fd)) {\n    return fd\n  }\n  // destination could be undefined if we are in a worker\n  if (destination === undefined) {\n    // This is stdout in UNIX systems\n    return 1\n  }\n  return destination\n}\n\nmodule.exports = {\n  noop,\n  buildSafeSonicBoom,\n  asChindings,\n  asJson,\n  genLog,\n  createArgsNormalizer,\n  stringify,\n  buildFormatters,\n  normalizeDestFileDescriptor\n}\n","/**\n * Represents default log level values\n *\n * @enum {number}\n */\nconst DEFAULT_LEVELS = {\n  trace: 10,\n  debug: 20,\n  info: 30,\n  warn: 40,\n  error: 50,\n  fatal: 60\n}\n\n/**\n * Represents sort order direction: `ascending` or `descending`\n *\n * @enum {string}\n */\nconst SORTING_ORDER = {\n  ASC: 'ASC',\n  DESC: 'DESC'\n}\n\nmodule.exports = {\n  DEFAULT_LEVELS,\n  SORTING_ORDER\n}\n","'use strict'\n/* eslint no-prototype-builtins: 0 */\nconst {\n  lsCacheSym,\n  levelValSym,\n  useOnlyCustomLevelsSym,\n  streamSym,\n  formattersSym,\n  hooksSym,\n  levelCompSym\n} = require('./symbols')\nconst { noop, genLog } = require('./tools')\nconst { DEFAULT_LEVELS, SORTING_ORDER } = require('./constants')\n\nconst levelMethods = {\n  fatal: (hook) => {\n    const logFatal = genLog(DEFAULT_LEVELS.fatal, hook)\n    return function (...args) {\n      const stream = this[streamSym]\n      logFatal.call(this, ...args)\n      if (typeof stream.flushSync === 'function') {\n        try {\n          stream.flushSync()\n        } catch (e) {\n          // https://github.com/pinojs/pino/pull/740#discussion_r346788313\n        }\n      }\n    }\n  },\n  error: (hook) => genLog(DEFAULT_LEVELS.error, hook),\n  warn: (hook) => genLog(DEFAULT_LEVELS.warn, hook),\n  info: (hook) => genLog(DEFAULT_LEVELS.info, hook),\n  debug: (hook) => genLog(DEFAULT_LEVELS.debug, hook),\n  trace: (hook) => genLog(DEFAULT_LEVELS.trace, hook)\n}\n\nconst nums = Object.keys(DEFAULT_LEVELS).reduce((o, k) => {\n  o[DEFAULT_LEVELS[k]] = k\n  return o\n}, {})\n\nconst initialLsCache = Object.keys(nums).reduce((o, k) => {\n  o[k] = '{\"level\":' + Number(k)\n  return o\n}, {})\n\nfunction genLsCache (instance) {\n  const formatter = instance[formattersSym].level\n  const { labels } = instance.levels\n  const cache = {}\n  for (const label in labels) {\n    const level = formatter(labels[label], Number(label))\n    cache[label] = JSON.stringify(level).slice(0, -1)\n  }\n  instance[lsCacheSym] = cache\n  return instance\n}\n\nfunction isStandardLevel (level, useOnlyCustomLevels) {\n  if (useOnlyCustomLevels) {\n    return false\n  }\n\n  switch (level) {\n    case 'fatal':\n    case 'error':\n    case 'warn':\n    case 'info':\n    case 'debug':\n    case 'trace':\n      return true\n    default:\n      return false\n  }\n}\n\nfunction setLevel (level) {\n  const { labels, values } = this.levels\n  if (typeof level === 'number') {\n    if (labels[level] === undefined) throw Error('unknown level value' + level)\n    level = labels[level]\n  }\n  if (values[level] === undefined) throw Error('unknown level ' + level)\n  const preLevelVal = this[levelValSym]\n  const levelVal = this[levelValSym] = values[level]\n  const useOnlyCustomLevelsVal = this[useOnlyCustomLevelsSym]\n  const levelComparison = this[levelCompSym]\n  const hook = this[hooksSym].logMethod\n\n  for (const key in values) {\n    if (levelComparison(values[key], levelVal) === false) {\n      this[key] = noop\n      continue\n    }\n    this[key] = isStandardLevel(key, useOnlyCustomLevelsVal) ? levelMethods[key](hook) : genLog(values[key], hook)\n  }\n\n  this.emit(\n    'level-change',\n    level,\n    levelVal,\n    labels[preLevelVal],\n    preLevelVal,\n    this\n  )\n}\n\nfunction getLevel (level) {\n  const { levels, levelVal } = this\n  // protection against potential loss of Pino scope from serializers (edge case with circular refs - https://github.com/pinojs/pino/issues/833)\n  return (levels && levels.labels) ? levels.labels[levelVal] : ''\n}\n\nfunction isLevelEnabled (logLevel) {\n  const { values } = this.levels\n  const logLevelVal = values[logLevel]\n  return logLevelVal !== undefined && this[levelCompSym](logLevelVal, this[levelValSym])\n}\n\n/**\n * Determine if the given `current` level is enabled by comparing it\n * against the current threshold (`expected`).\n *\n * @param {SORTING_ORDER} direction comparison direction \"ASC\" or \"DESC\"\n * @param {number} current current log level number representation\n * @param {number} expected threshold value to compare with\n * @returns {boolean}\n */\nfunction compareLevel (direction, current, expected) {\n  if (direction === SORTING_ORDER.DESC) {\n    return current <= expected\n  }\n\n  return current >= expected\n}\n\n/**\n * Create a level comparison function based on `levelComparison`\n * it could a default function which compares levels either in \"ascending\" or \"descending\" order or custom comparison function\n *\n * @param {SORTING_ORDER | Function} levelComparison sort levels order direction or custom comparison function\n * @returns Function\n */\nfunction genLevelComparison (levelComparison) {\n  if (typeof levelComparison === 'string') {\n    return compareLevel.bind(null, levelComparison)\n  }\n\n  return levelComparison\n}\n\nfunction mappings (customLevels = null, useOnlyCustomLevels = false) {\n  const customNums = customLevels\n    /* eslint-disable */\n    ? Object.keys(customLevels).reduce((o, k) => {\n        o[customLevels[k]] = k\n        return o\n      }, {})\n    : null\n    /* eslint-enable */\n\n  const labels = Object.assign(\n    Object.create(Object.prototype, { Infinity: { value: 'silent' } }),\n    useOnlyCustomLevels ? null : nums,\n    customNums\n  )\n  const values = Object.assign(\n    Object.create(Object.prototype, { silent: { value: Infinity } }),\n    useOnlyCustomLevels ? null : DEFAULT_LEVELS,\n    customLevels\n  )\n  return { labels, values }\n}\n\nfunction assertDefaultLevelFound (defaultLevel, customLevels, useOnlyCustomLevels) {\n  if (typeof defaultLevel === 'number') {\n    const values = [].concat(\n      Object.keys(customLevels || {}).map(key => customLevels[key]),\n      useOnlyCustomLevels ? [] : Object.keys(nums).map(level => +level),\n      Infinity\n    )\n    if (!values.includes(defaultLevel)) {\n      throw Error(`default level:${defaultLevel} must be included in custom levels`)\n    }\n    return\n  }\n\n  const labels = Object.assign(\n    Object.create(Object.prototype, { silent: { value: Infinity } }),\n    useOnlyCustomLevels ? null : DEFAULT_LEVELS,\n    customLevels\n  )\n  if (!(defaultLevel in labels)) {\n    throw Error(`default level:${defaultLevel} must be included in custom levels`)\n  }\n}\n\nfunction assertNoLevelCollisions (levels, customLevels) {\n  const { labels, values } = levels\n  for (const k in customLevels) {\n    if (k in values) {\n      throw Error('levels cannot be overridden')\n    }\n    if (customLevels[k] in labels) {\n      throw Error('pre-existing level values cannot be used for new levels')\n    }\n  }\n}\n\n/**\n * Validates whether `levelComparison` is correct\n *\n * @throws Error\n * @param {SORTING_ORDER | Function} levelComparison - value to validate\n * @returns\n */\nfunction assertLevelComparison (levelComparison) {\n  if (typeof levelComparison === 'function') {\n    return\n  }\n\n  if (typeof levelComparison === 'string' && Object.values(SORTING_ORDER).includes(levelComparison)) {\n    return\n  }\n\n  throw new Error('Levels comparison should be one of \"ASC\", \"DESC\" or \"function\" type')\n}\n\nmodule.exports = {\n  initialLsCache,\n  genLsCache,\n  levelMethods,\n  getLevel,\n  setLevel,\n  isLevelEnabled,\n  mappings,\n  assertNoLevelCollisions,\n  assertDefaultLevelFound,\n  genLevelComparison,\n  assertLevelComparison\n}\n","'use strict'\n\nmodule.exports = { version: '9.1.0' }\n","'use strict'\n\n/* eslint no-prototype-builtins: 0 */\n\nconst { EventEmitter } = require('events')\nconst {\n  lsCacheSym,\n  levelValSym,\n  setLevelSym,\n  getLevelSym,\n  chindingsSym,\n  parsedChindingsSym,\n  mixinSym,\n  asJsonSym,\n  writeSym,\n  mixinMergeStrategySym,\n  timeSym,\n  timeSliceIndexSym,\n  streamSym,\n  serializersSym,\n  formattersSym,\n  errorKeySym,\n  messageKeySym,\n  useOnlyCustomLevelsSym,\n  needsMetadataGsym,\n  redactFmtSym,\n  stringifySym,\n  formatOptsSym,\n  stringifiersSym,\n  msgPrefixSym\n} = require('./symbols')\nconst {\n  getLevel,\n  setLevel,\n  isLevelEnabled,\n  mappings,\n  initialLsCache,\n  genLsCache,\n  assertNoLevelCollisions\n} = require('./levels')\nconst {\n  asChindings,\n  asJson,\n  buildFormatters,\n  stringify\n} = require('./tools')\nconst {\n  version\n} = require('./meta')\nconst redaction = require('./redaction')\n\n// note: use of class is satirical\n// https://github.com/pinojs/pino/pull/433#pullrequestreview-127703127\nconst constructor = class Pino {}\nconst prototype = {\n  constructor,\n  child,\n  bindings,\n  setBindings,\n  flush,\n  isLevelEnabled,\n  version,\n  get level () { return this[getLevelSym]() },\n  set level (lvl) { this[setLevelSym](lvl) },\n  get levelVal () { return this[levelValSym] },\n  set levelVal (n) { throw Error('levelVal is read-only') },\n  [lsCacheSym]: initialLsCache,\n  [writeSym]: write,\n  [asJsonSym]: asJson,\n  [getLevelSym]: getLevel,\n  [setLevelSym]: setLevel\n}\n\nObject.setPrototypeOf(prototype, EventEmitter.prototype)\n\n// exporting and consuming the prototype object using factory pattern fixes scoping issues with getters when serializing\nmodule.exports = function () {\n  return Object.create(prototype)\n}\n\nconst resetChildingsFormatter = bindings => bindings\nfunction child (bindings, options) {\n  if (!bindings) {\n    throw Error('missing bindings for child Pino')\n  }\n  options = options || {} // default options to empty object\n  const serializers = this[serializersSym]\n  const formatters = this[formattersSym]\n  const instance = Object.create(this)\n\n  if (options.hasOwnProperty('serializers') === true) {\n    instance[serializersSym] = Object.create(null)\n\n    for (const k in serializers) {\n      instance[serializersSym][k] = serializers[k]\n    }\n    const parentSymbols = Object.getOwnPropertySymbols(serializers)\n    /* eslint no-var: off */\n    for (var i = 0; i < parentSymbols.length; i++) {\n      const ks = parentSymbols[i]\n      instance[serializersSym][ks] = serializers[ks]\n    }\n\n    for (const bk in options.serializers) {\n      instance[serializersSym][bk] = options.serializers[bk]\n    }\n    const bindingsSymbols = Object.getOwnPropertySymbols(options.serializers)\n    for (var bi = 0; bi < bindingsSymbols.length; bi++) {\n      const bks = bindingsSymbols[bi]\n      instance[serializersSym][bks] = options.serializers[bks]\n    }\n  } else instance[serializersSym] = serializers\n  if (options.hasOwnProperty('formatters')) {\n    const { level, bindings: chindings, log } = options.formatters\n    instance[formattersSym] = buildFormatters(\n      level || formatters.level,\n      chindings || resetChildingsFormatter,\n      log || formatters.log\n    )\n  } else {\n    instance[formattersSym] = buildFormatters(\n      formatters.level,\n      resetChildingsFormatter,\n      formatters.log\n    )\n  }\n  if (options.hasOwnProperty('customLevels') === true) {\n    assertNoLevelCollisions(this.levels, options.customLevels)\n    instance.levels = mappings(options.customLevels, instance[useOnlyCustomLevelsSym])\n    genLsCache(instance)\n  }\n\n  // redact must place before asChindings and only replace if exist\n  if ((typeof options.redact === 'object' && options.redact !== null) || Array.isArray(options.redact)) {\n    instance.redact = options.redact // replace redact directly\n    const stringifiers = redaction(instance.redact, stringify)\n    const formatOpts = { stringify: stringifiers[redactFmtSym] }\n    instance[stringifySym] = stringify\n    instance[stringifiersSym] = stringifiers\n    instance[formatOptsSym] = formatOpts\n  }\n\n  if (typeof options.msgPrefix === 'string') {\n    instance[msgPrefixSym] = (this[msgPrefixSym] || '') + options.msgPrefix\n  }\n\n  instance[chindingsSym] = asChindings(instance, bindings)\n  const childLevel = options.level || this.level\n  instance[setLevelSym](childLevel)\n  this.onChild(instance)\n  return instance\n}\n\nfunction bindings () {\n  const chindings = this[chindingsSym]\n  const chindingsJson = `{${chindings.substr(1)}}` // at least contains ,\"pid\":7068,\"hostname\":\"myMac\"\n  const bindingsFromJson = JSON.parse(chindingsJson)\n  delete bindingsFromJson.pid\n  delete bindingsFromJson.hostname\n  return bindingsFromJson\n}\n\nfunction setBindings (newBindings) {\n  const chindings = asChindings(this, newBindings)\n  this[chindingsSym] = chindings\n  delete this[parsedChindingsSym]\n}\n\n/**\n * Default strategy for creating `mergeObject` from arguments and the result from `mixin()`.\n * Fields from `mergeObject` have higher priority in this strategy.\n *\n * @param {Object} mergeObject The object a user has supplied to the logging function.\n * @param {Object} mixinObject The result of the `mixin` method.\n * @return {Object}\n */\nfunction defaultMixinMergeStrategy (mergeObject, mixinObject) {\n  return Object.assign(mixinObject, mergeObject)\n}\n\nfunction write (_obj, msg, num) {\n  const t = this[timeSym]()\n  const mixin = this[mixinSym]\n  const errorKey = this[errorKeySym]\n  const messageKey = this[messageKeySym]\n  const mixinMergeStrategy = this[mixinMergeStrategySym] || defaultMixinMergeStrategy\n  let obj\n\n  if (_obj === undefined || _obj === null) {\n    obj = {}\n  } else if (_obj instanceof Error) {\n    obj = { [errorKey]: _obj }\n    if (msg === undefined) {\n      msg = _obj.message\n    }\n  } else {\n    obj = _obj\n    if (msg === undefined && _obj[messageKey] === undefined && _obj[errorKey]) {\n      msg = _obj[errorKey].message\n    }\n  }\n\n  if (mixin) {\n    obj = mixinMergeStrategy(obj, mixin(obj, num, this))\n  }\n\n  const s = this[asJsonSym](obj, msg, num, t)\n\n  const stream = this[streamSym]\n  if (stream[needsMetadataGsym] === true) {\n    stream.lastLevel = num\n    stream.lastObj = obj\n    stream.lastMsg = msg\n    stream.lastTime = t.slice(this[timeSliceIndexSym])\n    stream.lastLogger = this // for child loggers\n  }\n  stream.write(s)\n}\n\nfunction noop () {}\n\nfunction flush (cb) {\n  if (cb != null && typeof cb !== 'function') {\n    throw Error('callback must be a function')\n  }\n\n  const stream = this[streamSym]\n\n  if (typeof stream.flush === 'function') {\n    stream.flush(cb || noop)\n  } else if (cb) cb()\n}\n","'use strict'\n\nconst { hasOwnProperty } = Object.prototype\n\nconst stringify = configure()\n\n// @ts-expect-error\nstringify.configure = configure\n// @ts-expect-error\nstringify.stringify = stringify\n\n// @ts-expect-error\nstringify.default = stringify\n\n// @ts-expect-error used for named export\nexports.stringify = stringify\n// @ts-expect-error used for named export\nexports.configure = configure\n\nmodule.exports = stringify\n\n// eslint-disable-next-line no-control-regex\nconst strEscapeSequencesRegExp = /[\\u0000-\\u001f\\u0022\\u005c\\ud800-\\udfff]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?:[^\\ud800-\\udbff]|^)[\\udc00-\\udfff]/\n\n// Escape C0 control characters, double quotes, the backslash and every code\n// unit with a numeric value in the inclusive range 0xD800 to 0xDFFF.\nfunction strEscape (str) {\n  // Some magic numbers that worked out fine while benchmarking with v8 8.0\n  if (str.length < 5000 && !strEscapeSequencesRegExp.test(str)) {\n    return `\"${str}\"`\n  }\n  return JSON.stringify(str)\n}\n\nfunction insertSort (array) {\n  // Insertion sort is very efficient for small input sizes but it has a bad\n  // worst case complexity. Thus, use native array sort for bigger values.\n  if (array.length > 2e2) {\n    return array.sort()\n  }\n  for (let i = 1; i < array.length; i++) {\n    const currentValue = array[i]\n    let position = i\n    while (position !== 0 && array[position - 1] > currentValue) {\n      array[position] = array[position - 1]\n      position--\n    }\n    array[position] = currentValue\n  }\n  return array\n}\n\nconst typedArrayPrototypeGetSymbolToStringTag =\n  Object.getOwnPropertyDescriptor(\n    Object.getPrototypeOf(\n      Object.getPrototypeOf(\n        new Int8Array()\n      )\n    ),\n    Symbol.toStringTag\n  ).get\n\nfunction isTypedArrayWithEntries (value) {\n  return typedArrayPrototypeGetSymbolToStringTag.call(value) !== undefined && value.length !== 0\n}\n\nfunction stringifyTypedArray (array, separator, maximumBreadth) {\n  if (array.length < maximumBreadth) {\n    maximumBreadth = array.length\n  }\n  const whitespace = separator === ',' ? '' : ' '\n  let res = `\"0\":${whitespace}${array[0]}`\n  for (let i = 1; i < maximumBreadth; i++) {\n    res += `${separator}\"${i}\":${whitespace}${array[i]}`\n  }\n  return res\n}\n\nfunction getCircularValueOption (options) {\n  if (hasOwnProperty.call(options, 'circularValue')) {\n    const circularValue = options.circularValue\n    if (typeof circularValue === 'string') {\n      return `\"${circularValue}\"`\n    }\n    if (circularValue == null) {\n      return circularValue\n    }\n    if (circularValue === Error || circularValue === TypeError) {\n      return {\n        toString () {\n          throw new TypeError('Converting circular structure to JSON')\n        }\n      }\n    }\n    throw new TypeError('The \"circularValue\" argument must be of type string or the value null or undefined')\n  }\n  return '\"[Circular]\"'\n}\n\nfunction getBooleanOption (options, key) {\n  let value\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key]\n    if (typeof value !== 'boolean') {\n      throw new TypeError(`The \"${key}\" argument must be of type boolean`)\n    }\n  }\n  return value === undefined ? true : value\n}\n\nfunction getPositiveIntegerOption (options, key) {\n  let value\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key]\n    if (typeof value !== 'number') {\n      throw new TypeError(`The \"${key}\" argument must be of type number`)\n    }\n    if (!Number.isInteger(value)) {\n      throw new TypeError(`The \"${key}\" argument must be an integer`)\n    }\n    if (value < 1) {\n      throw new RangeError(`The \"${key}\" argument must be >= 1`)\n    }\n  }\n  return value === undefined ? Infinity : value\n}\n\nfunction getItemCount (number) {\n  if (number === 1) {\n    return '1 item'\n  }\n  return `${number} items`\n}\n\nfunction getUniqueReplacerSet (replacerArray) {\n  const replacerSet = new Set()\n  for (const value of replacerArray) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      replacerSet.add(String(value))\n    }\n  }\n  return replacerSet\n}\n\nfunction getStrictOption (options) {\n  if (hasOwnProperty.call(options, 'strict')) {\n    const value = options.strict\n    if (typeof value !== 'boolean') {\n      throw new TypeError('The \"strict\" argument must be of type boolean')\n    }\n    if (value) {\n      return (value) => {\n        let message = `Object can not safely be stringified. Received type ${typeof value}`\n        if (typeof value !== 'function') message += ` (${value.toString()})`\n        throw new Error(message)\n      }\n    }\n  }\n}\n\nfunction configure (options) {\n  options = { ...options }\n  const fail = getStrictOption(options)\n  if (fail) {\n    if (options.bigint === undefined) {\n      options.bigint = false\n    }\n    if (!('circularValue' in options)) {\n      options.circularValue = Error\n    }\n  }\n  const circularValue = getCircularValueOption(options)\n  const bigint = getBooleanOption(options, 'bigint')\n  const deterministic = getBooleanOption(options, 'deterministic')\n  const maximumDepth = getPositiveIntegerOption(options, 'maximumDepth')\n  const maximumBreadth = getPositiveIntegerOption(options, 'maximumBreadth')\n\n  function stringifyFnReplacer (key, parent, stack, replacer, spacer, indentation) {\n    let value = parent[key]\n\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key)\n    }\n    value = replacer.call(parent, key, value)\n\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        let res = ''\n        let join = ','\n        const originalIndentation = indentation\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          if (spacer !== '') {\n            indentation += spacer\n            res += `\\n${indentation}`\n            join = `,\\n${indentation}`\n          }\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          if (spacer !== '') {\n            res += `\\n${originalIndentation}`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        let whitespace = ''\n        let separator = ''\n        if (spacer !== '') {\n          indentation += spacer\n          join = `,\\n${indentation}`\n          whitespace = ' '\n        }\n        const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (deterministic && !isTypedArrayWithEntries(value)) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifyFnReplacer(key, value, stack, replacer, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}:${whitespace}${tmp}`\n            separator = join\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\":${whitespace}\"${getItemCount(removedKeys)} not stringified\"`\n          separator = join\n        }\n        if (spacer !== '' && separator.length > 1) {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifyArrayReplacer (key, value, stack, replacer, spacer, indentation) {\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key)\n    }\n\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        const originalIndentation = indentation\n        let res = ''\n        let join = ','\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          if (spacer !== '') {\n            indentation += spacer\n            res += `\\n${indentation}`\n            join = `,\\n${indentation}`\n          }\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          if (spacer !== '') {\n            res += `\\n${originalIndentation}`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n        stack.push(value)\n        let whitespace = ''\n        if (spacer !== '') {\n          indentation += spacer\n          join = `,\\n${indentation}`\n          whitespace = ' '\n        }\n        let separator = ''\n        for (const key of replacer) {\n          const tmp = stringifyArrayReplacer(key, value[key], stack, replacer, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}:${whitespace}${tmp}`\n            separator = join\n          }\n        }\n        if (spacer !== '' && separator.length > 1) {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifyIndent (key, value, stack, spacer, indentation) {\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (typeof value.toJSON === 'function') {\n          value = value.toJSON(key)\n          // Prevent calling `toJSON` again.\n          if (typeof value !== 'object') {\n            return stringifyIndent(key, value, stack, spacer, indentation)\n          }\n          if (value === null) {\n            return 'null'\n          }\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n        const originalIndentation = indentation\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          indentation += spacer\n          let res = `\\n${indentation}`\n          const join = `,\\n${indentation}`\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          res += `\\n${originalIndentation}`\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        indentation += spacer\n        const join = `,\\n${indentation}`\n        let res = ''\n        let separator = ''\n        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (isTypedArrayWithEntries(value)) {\n          res += stringifyTypedArray(value, join, maximumBreadth)\n          keys = keys.slice(value.length)\n          maximumPropertiesToStringify -= value.length\n          separator = join\n        }\n        if (deterministic) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifyIndent(key, value[key], stack, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}: ${tmp}`\n            separator = join\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\": \"${getItemCount(removedKeys)} not stringified\"`\n          separator = join\n        }\n        if (separator !== '') {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifySimple (key, value, stack) {\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (typeof value.toJSON === 'function') {\n          value = value.toJSON(key)\n          // Prevent calling `toJSON` again\n          if (typeof value !== 'object') {\n            return stringifySimple(key, value, stack)\n          }\n          if (value === null) {\n            return 'null'\n          }\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        let res = ''\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifySimple(String(i), value[i], stack)\n            res += tmp !== undefined ? tmp : 'null'\n            res += ','\n          }\n          const tmp = stringifySimple(String(i), value[i], stack)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `,\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        let separator = ''\n        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (isTypedArrayWithEntries(value)) {\n          res += stringifyTypedArray(value, ',', maximumBreadth)\n          keys = keys.slice(value.length)\n          maximumPropertiesToStringify -= value.length\n          separator = ','\n        }\n        if (deterministic) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifySimple(key, value[key], stack)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}:${tmp}`\n            separator = ','\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\":\"${getItemCount(removedKeys)} not stringified\"`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringify (value, replacer, space) {\n    if (arguments.length > 1) {\n      let spacer = ''\n      if (typeof space === 'number') {\n        spacer = ' '.repeat(Math.min(space, 10))\n      } else if (typeof space === 'string') {\n        spacer = space.slice(0, 10)\n      }\n      if (replacer != null) {\n        if (typeof replacer === 'function') {\n          return stringifyFnReplacer('', { '': value }, [], replacer, spacer, '')\n        }\n        if (Array.isArray(replacer)) {\n          return stringifyArrayReplacer('', value, [], getUniqueReplacerSet(replacer), spacer, '')\n        }\n      }\n      if (spacer.length !== 0) {\n        return stringifyIndent('', value, [], spacer, '')\n      }\n    }\n    return stringifySimple('', value, [])\n  }\n\n  return stringify\n}\n","'use strict'\n\nconst metadata = Symbol.for('pino.metadata')\nconst { DEFAULT_LEVELS } = require('./constants')\n\nconst DEFAULT_INFO_LEVEL = DEFAULT_LEVELS.info\n\nfunction multistream (streamsArray, opts) {\n  let counter = 0\n  streamsArray = streamsArray || []\n  opts = opts || { dedupe: false }\n\n  const streamLevels = Object.create(DEFAULT_LEVELS)\n  streamLevels.silent = Infinity\n  if (opts.levels && typeof opts.levels === 'object') {\n    Object.keys(opts.levels).forEach(i => {\n      streamLevels[i] = opts.levels[i]\n    })\n  }\n\n  const res = {\n    write,\n    add,\n    emit,\n    flushSync,\n    end,\n    minLevel: 0,\n    streams: [],\n    clone,\n    [metadata]: true,\n    streamLevels\n  }\n\n  if (Array.isArray(streamsArray)) {\n    streamsArray.forEach(add, res)\n  } else {\n    add.call(res, streamsArray)\n  }\n\n  // clean this object up\n  // or it will stay allocated forever\n  // as it is closed on the following closures\n  streamsArray = null\n\n  return res\n\n  // we can exit early because the streams are ordered by level\n  function write (data) {\n    let dest\n    const level = this.lastLevel\n    const { streams } = this\n    // for handling situation when several streams has the same level\n    let recordedLevel = 0\n    let stream\n\n    // if dedupe set to true we send logs to the stream with the highest level\n    // therefore, we have to change sorting order\n    for (let i = initLoopVar(streams.length, opts.dedupe); checkLoopVar(i, streams.length, opts.dedupe); i = adjustLoopVar(i, opts.dedupe)) {\n      dest = streams[i]\n      if (dest.level <= level) {\n        if (recordedLevel !== 0 && recordedLevel !== dest.level) {\n          break\n        }\n        stream = dest.stream\n        if (stream[metadata]) {\n          const { lastTime, lastMsg, lastObj, lastLogger } = this\n          stream.lastLevel = level\n          stream.lastTime = lastTime\n          stream.lastMsg = lastMsg\n          stream.lastObj = lastObj\n          stream.lastLogger = lastLogger\n        }\n        stream.write(data)\n        if (opts.dedupe) {\n          recordedLevel = dest.level\n        }\n      } else if (!opts.dedupe) {\n        break\n      }\n    }\n  }\n\n  function emit (...args) {\n    for (const { stream } of this.streams) {\n      if (typeof stream.emit === 'function') {\n        stream.emit(...args)\n      }\n    }\n  }\n\n  function flushSync () {\n    for (const { stream } of this.streams) {\n      if (typeof stream.flushSync === 'function') {\n        stream.flushSync()\n      }\n    }\n  }\n\n  function add (dest) {\n    if (!dest) {\n      return res\n    }\n\n    // Check that dest implements either StreamEntry or DestinationStream\n    const isStream = typeof dest.write === 'function' || dest.stream\n    const stream_ = dest.write ? dest : dest.stream\n    // This is necessary to provide a meaningful error message, otherwise it throws somewhere inside write()\n    if (!isStream) {\n      throw Error('stream object needs to implement either StreamEntry or DestinationStream interface')\n    }\n\n    const { streams, streamLevels } = this\n\n    let level\n    if (typeof dest.levelVal === 'number') {\n      level = dest.levelVal\n    } else if (typeof dest.level === 'string') {\n      level = streamLevels[dest.level]\n    } else if (typeof dest.level === 'number') {\n      level = dest.level\n    } else {\n      level = DEFAULT_INFO_LEVEL\n    }\n\n    const dest_ = {\n      stream: stream_,\n      level,\n      levelVal: undefined,\n      id: counter++\n    }\n\n    streams.unshift(dest_)\n    streams.sort(compareByLevel)\n\n    this.minLevel = streams[0].level\n\n    return res\n  }\n\n  function end () {\n    for (const { stream } of this.streams) {\n      if (typeof stream.flushSync === 'function') {\n        stream.flushSync()\n      }\n      stream.end()\n    }\n  }\n\n  function clone (level) {\n    const streams = new Array(this.streams.length)\n\n    for (let i = 0; i < streams.length; i++) {\n      streams[i] = {\n        level,\n        stream: this.streams[i].stream\n      }\n    }\n\n    return {\n      write,\n      add,\n      minLevel: level,\n      streams,\n      clone,\n      emit,\n      flushSync,\n      [metadata]: true\n    }\n  }\n}\n\nfunction compareByLevel (a, b) {\n  return a.level - b.level\n}\n\nfunction initLoopVar (length, dedupe) {\n  return dedupe ? length - 1 : 0\n}\n\nfunction adjustLoopVar (i, dedupe) {\n  return dedupe ? i - 1 : i + 1\n}\n\nfunction checkLoopVar (i, length, dedupe) {\n  return dedupe ? i >= 0 : i < length\n}\n\nmodule.exports = multistream\n","'use strict'\n/* eslint no-prototype-builtins: 0 */\nconst os = require('os')\nconst stdSerializers = require('pino-std-serializers')\nconst caller = require('./lib/caller')\nconst redaction = require('./lib/redaction')\nconst time = require('./lib/time')\nconst proto = require('./lib/proto')\nconst symbols = require('./lib/symbols')\nconst { configure } = require('safe-stable-stringify')\nconst { assertDefaultLevelFound, mappings, genLsCache, genLevelComparison, assertLevelComparison } = require('./lib/levels')\nconst { DEFAULT_LEVELS, SORTING_ORDER } = require('./lib/constants')\nconst {\n  createArgsNormalizer,\n  asChindings,\n  buildSafeSonicBoom,\n  buildFormatters,\n  stringify,\n  normalizeDestFileDescriptor,\n  noop\n} = require('./lib/tools')\nconst { version } = require('./lib/meta')\nconst {\n  chindingsSym,\n  redactFmtSym,\n  serializersSym,\n  timeSym,\n  timeSliceIndexSym,\n  streamSym,\n  stringifySym,\n  stringifySafeSym,\n  stringifiersSym,\n  setLevelSym,\n  endSym,\n  formatOptsSym,\n  messageKeySym,\n  errorKeySym,\n  nestedKeySym,\n  mixinSym,\n  levelCompSym,\n  useOnlyCustomLevelsSym,\n  formattersSym,\n  hooksSym,\n  nestedKeyStrSym,\n  mixinMergeStrategySym,\n  msgPrefixSym\n} = symbols\nconst { epochTime, nullTime } = time\nconst { pid } = process\nconst hostname = os.hostname()\nconst defaultErrorSerializer = stdSerializers.err\nconst defaultOptions = {\n  level: 'info',\n  levelComparison: SORTING_ORDER.ASC,\n  levels: DEFAULT_LEVELS,\n  messageKey: 'msg',\n  errorKey: 'err',\n  nestedKey: null,\n  enabled: true,\n  base: { pid, hostname },\n  serializers: Object.assign(Object.create(null), {\n    err: defaultErrorSerializer\n  }),\n  formatters: Object.assign(Object.create(null), {\n    bindings (bindings) {\n      return bindings\n    },\n    level (label, number) {\n      return { level: number }\n    }\n  }),\n  hooks: {\n    logMethod: undefined\n  },\n  timestamp: epochTime,\n  name: undefined,\n  redact: null,\n  customLevels: null,\n  useOnlyCustomLevels: false,\n  depthLimit: 5,\n  edgeLimit: 100\n}\n\nconst normalize = createArgsNormalizer(defaultOptions)\n\nconst serializers = Object.assign(Object.create(null), stdSerializers)\n\nfunction pino (...args) {\n  const instance = {}\n  const { opts, stream } = normalize(instance, caller(), ...args)\n  const {\n    redact,\n    crlf,\n    serializers,\n    timestamp,\n    messageKey,\n    errorKey,\n    nestedKey,\n    base,\n    name,\n    level,\n    customLevels,\n    levelComparison,\n    mixin,\n    mixinMergeStrategy,\n    useOnlyCustomLevels,\n    formatters,\n    hooks,\n    depthLimit,\n    edgeLimit,\n    onChild,\n    msgPrefix\n  } = opts\n\n  const stringifySafe = configure({\n    maximumDepth: depthLimit,\n    maximumBreadth: edgeLimit\n  })\n\n  const allFormatters = buildFormatters(\n    formatters.level,\n    formatters.bindings,\n    formatters.log\n  )\n\n  const stringifyFn = stringify.bind({\n    [stringifySafeSym]: stringifySafe\n  })\n  const stringifiers = redact ? redaction(redact, stringifyFn) : {}\n  const formatOpts = redact\n    ? { stringify: stringifiers[redactFmtSym] }\n    : { stringify: stringifyFn }\n  const end = '}' + (crlf ? '\\r\\n' : '\\n')\n  const coreChindings = asChindings.bind(null, {\n    [chindingsSym]: '',\n    [serializersSym]: serializers,\n    [stringifiersSym]: stringifiers,\n    [stringifySym]: stringify,\n    [stringifySafeSym]: stringifySafe,\n    [formattersSym]: allFormatters\n  })\n\n  let chindings = ''\n  if (base !== null) {\n    if (name === undefined) {\n      chindings = coreChindings(base)\n    } else {\n      chindings = coreChindings(Object.assign({}, base, { name }))\n    }\n  }\n\n  const time = (timestamp instanceof Function)\n    ? timestamp\n    : (timestamp ? epochTime : nullTime)\n  const timeSliceIndex = time().indexOf(':') + 1\n\n  if (useOnlyCustomLevels && !customLevels) throw Error('customLevels is required if useOnlyCustomLevels is set true')\n  if (mixin && typeof mixin !== 'function') throw Error(`Unknown mixin type \"${typeof mixin}\" - expected \"function\"`)\n  if (msgPrefix && typeof msgPrefix !== 'string') throw Error(`Unknown msgPrefix type \"${typeof msgPrefix}\" - expected \"string\"`)\n\n  assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels)\n  const levels = mappings(customLevels, useOnlyCustomLevels)\n\n  if (typeof stream.emit === 'function') {\n    stream.emit('message', { code: 'PINO_CONFIG', config: { levels, messageKey, errorKey } })\n  }\n\n  assertLevelComparison(levelComparison)\n  const levelCompFunc = genLevelComparison(levelComparison)\n\n  Object.assign(instance, {\n    levels,\n    [levelCompSym]: levelCompFunc,\n    [useOnlyCustomLevelsSym]: useOnlyCustomLevels,\n    [streamSym]: stream,\n    [timeSym]: time,\n    [timeSliceIndexSym]: timeSliceIndex,\n    [stringifySym]: stringify,\n    [stringifySafeSym]: stringifySafe,\n    [stringifiersSym]: stringifiers,\n    [endSym]: end,\n    [formatOptsSym]: formatOpts,\n    [messageKeySym]: messageKey,\n    [errorKeySym]: errorKey,\n    [nestedKeySym]: nestedKey,\n    // protect against injection\n    [nestedKeyStrSym]: nestedKey ? `,${JSON.stringify(nestedKey)}:{` : '',\n    [serializersSym]: serializers,\n    [mixinSym]: mixin,\n    [mixinMergeStrategySym]: mixinMergeStrategy,\n    [chindingsSym]: chindings,\n    [formattersSym]: allFormatters,\n    [hooksSym]: hooks,\n    silent: noop,\n    onChild,\n    [msgPrefixSym]: msgPrefix\n  })\n\n  Object.setPrototypeOf(instance, proto())\n\n  genLsCache(instance)\n\n  instance[setLevelSym](level)\n\n  return instance\n}\n\nmodule.exports = pino\n\nmodule.exports.destination = (dest = process.stdout.fd) => {\n  if (typeof dest === 'object') {\n    dest.dest = normalizeDestFileDescriptor(dest.dest || process.stdout.fd)\n    return buildSafeSonicBoom(dest)\n  } else {\n    return buildSafeSonicBoom({ dest: normalizeDestFileDescriptor(dest), minLength: 0 })\n  }\n}\n\nmodule.exports.transport = require('./lib/transport')\nmodule.exports.multistream = require('./lib/multistream')\n\nmodule.exports.levels = mappings()\nmodule.exports.stdSerializers = serializers\nmodule.exports.stdTimeFunctions = Object.assign({}, time)\nmodule.exports.symbols = symbols\nmodule.exports.version = version\n\n// Enables default and name export with TypeScript and Babel\nmodule.exports.default = pino\nmodule.exports.pino = pino\n","import OpenAI from 'openai';\nimport { FunctionJson } from 'function-json-schema';\nexport * from 'function-json-schema';\n\nimport { deconstructedPromise, poll, setTimeoutPromise } from './utils.js';\nimport { ChatFunctionReturn, ChatText, ChatTurn } from './types/chat-types.js';\nimport { createFunctionClient } from './clients/function-client.js';\nimport { createWorkflowClient } from './clients/workflow-client.js';\nimport { Task, TaskSequenced, TaskStatus, TaskStatusesToType } from './types/task-types.js';\n\nexport * from './clients/function-client.js';\nexport * from './clients/workflow-client.js';\nexport * from './clients/workflow-schemas.js';\nexport * from './types/task-types.js';\nexport * from './types/workflow-types.js';\nexport * from './types/chat-types.js';\nexport * from './instrumentation/index.js';\n\nexport const DEFAULT_BASE_URL = 'https://api.iudex.ai';\n\nexport type IudexMessage = ChatTurn;\n\nexport type ChatCompletionMessageWithIudex = OpenAI.ChatCompletionMessageParam & ({\n  tool_call_id?: string;\n  workflowId?: string;\n} | {\n  tool_call_id: string;\n  workflowId: string;\n});\n\nexport type ChatCompletionWithIudex = OpenAI.ChatCompletion & {\n  choices: Array<OpenAI.ChatCompletion.Choice & {\n    message: OpenAI.ChatCompletionMessage & { workflowId: string; };\n  }>\n};\n\nexport function createClient(baseUrl: string, apiKey: string) {\n  return {\n    ...createFunctionClient(baseUrl, apiKey),\n    ...createWorkflowClient(baseUrl, apiKey),\n  };\n}\n\n/**\n * Iudex api client.\n */\nexport class Iudex {\n  baseUrl: string;\n  apiKey: string;\n  maxTries: number;\n  client: ReturnType<typeof createClient>;\n  currentWorkflowId?: Promise<string>;\n\n  functionLinker?: (fnName: string) => (...args: any[]) => unknown;\n\n  constructor({\n    apiKey = process.env.IUDEX_API_KEY,\n    baseUrl = process.env.IUDEX_BASE_URL || DEFAULT_BASE_URL,\n    maxTries = process.env.IUDEX_MAX_TRIES ? parseInt(process.env.IUDEX_MAX_TRIES) : 60,\n  }: {\n    apiKey?: string;\n    baseUrl?: string;\n    maxTries?: number;\n  } = {}) {\n    if (!apiKey) {\n      throw Error(\n        `The IUDEX_API_KEY environment variable is missing or empty.` +\n        ` Provide IUDEX_API_KEY to the environment on load` +\n        ` OR instantiate the Iudex client with the apiKey option.` +\n        ` Example: \\`new Iudex({ apiKey: 'My API Key' })\\``,\n      );\n    }\n    this.apiKey = apiKey;\n    this.baseUrl = baseUrl;\n    this.maxTries = maxTries;\n    this.client = createClient(this.baseUrl, this.apiKey);\n\n    // Need it for generator function\n    this.streamCurrentTask = this.streamCurrentTask.bind(this);\n  }\n\n  uploadFunctions = (\n    jsons: Array<OpenAI.ChatCompletionCreateParams.Function | FunctionJson>,\n    modules?: string,\n  ): Promise<void> => {\n    return this.client.putFunctionJsons(jsons, modules);\n  };\n\n  linkFunctions = (functionLinker: (fnName: string) => (...args: any[]) => unknown): void => {\n    this.functionLinker = functionLinker;\n  };\n\n  /**\n   * @param message message to send\n   * @returns response as a chat object\n   */\n  sendChatTurn = async (\n    message: string,\n    opts: {\n      onChatTurn?: (c: ChatTurn) => void,\n      initAuth?: string,\n      modules?: string[],\n    } = {},\n  ): Promise<ChatText> => {\n    const { onChatTurn, modules } = opts;\n    const {\n      promise: currentWorkflowId,\n      resolve: setCurrentWorkflowId,\n      reject: rejectCurrentWorkflowId,\n    } = deconstructedPromise<string>();\n    this.currentWorkflowId = currentWorkflowId;\n\n    const userTurn: ChatText = {\n      id: 'msg_ephemeral_' + new Date().toISOString(),\n      type: 'text',\n      sender: 'you',\n      timestamp: new Date().toISOString(),\n      text: message,\n    };\n    onChatTurn?.(userTurn);\n    const { workflowId } = await this.client.startWorkflow(userTurn.text, modules)\n      .catch(e => {\n        rejectCurrentWorkflowId(e);\n        throw e;\n      });\n    setCurrentWorkflowId(workflowId);\n\n    let nextMessage = await poll(\n      this.client.nextMessage,\n      [workflowId],\n      { maxTries: 60, tries: 0, waitMs: 1000 },\n    );\n    onChatTurn?.(nextMessage);\n\n    while (nextMessage.type === 'functionCall') {\n      if (!this.functionLinker) {\n        throw Error(\n          'Establish a way to call functions using `.linkFunctions` before' +\n          ' sending a message that might require your functions to answer.',\n        );\n      }\n      const fn = this.functionLinker(nextMessage.functionName);\n      const fnReturn = await fn(nextMessage.functionArgs);\n\n      const fnReturnTurn: ChatFunctionReturn = {\n        id: 'msg_ephemeral_' + new Date().toISOString(),\n        type: 'functionReturn',\n        sender: nextMessage.functionName,\n        timestamp: new Date().toISOString(),\n        functionCallId: nextMessage.functionCallId,\n        functionReturn: JSON.stringify(fnReturn),\n      };\n      onChatTurn?.(fnReturnTurn);\n      await this.client.returnFunctionCall(\n        fnReturnTurn.functionCallId,\n        fnReturnTurn.functionReturn,\n      );\n\n      nextMessage = await poll(\n        this.client.nextMessage,\n        [workflowId],\n        { maxTries: 60, tries: 0, waitMs: 1000 },\n      );\n      onChatTurn?.(nextMessage);\n    }\n\n    return nextMessage;\n  };\n\n  /**\n   * @param message message to send\n   * @returns response message as a string\n   */\n  sendMessage = async (\n    message: string,\n    opts: {\n      onChatTurn?: (c: ChatTurn) => void,\n      initAuth?: string,\n      modules?: string[],\n    } = {},\n  ): Promise<string> => {\n    const chatTurn = await this.sendChatTurn(message, opts);\n    return chatTurn.text;\n  };\n\n  async *streamCurrentTask(): AsyncGenerator<Task> {\n    if (!this.currentWorkflowId) {\n      throw Error('No current workflow id. Send a message first.');\n    }\n    const workflowId = await this.currentWorkflowId;\n\n    // Start from root\n    let rootTask = await this.client.fetchGetWorkflowById({ workflowId }).then(r => r.workflow);\n    // Get processing task\n    let processingTask = getFirstTaskByStatus(rootTask, [\n      'Pending',\n      'Planning',\n      'Executing',\n      'Sequencing',\n    ]);\n    let oldProcessingTask: typeof processingTask;\n\n    while (processingTask) {\n      // Only yield when theres a new processing task\n      if (oldProcessingTask?.id !== processingTask.id\n        || oldProcessingTask?.status !== processingTask.status\n      ) {\n        yield processingTask;\n        oldProcessingTask = processingTask;\n      }\n      // Wait\n      await setTimeoutPromise(1000);\n      // Fetch\n      rootTask = await this.client.fetchGetWorkflowById({ workflowId }).then(r => r.workflow);\n      // Error escape hatch\n      const maybeErroredTask = getLastTaskByStatus(rootTask, 'Errored');\n      if (maybeErroredTask) {\n        yield maybeErroredTask;\n        return;\n      }\n      // Set\n      processingTask = getFirstTaskByStatus(rootTask, [\n        'Pending',\n        'Planning',\n        'Executing',\n        'Sequencing',\n      ]);\n    }\n\n    // Get the resolved task\n    const resolvedTask = getLastTaskByStatus(rootTask, 'Resolved');\n    if (!resolvedTask) {\n      throw Error('No processing nor resolved task found.');\n    }\n    yield resolvedTask;\n    return;\n  }\n\n  // ======================= OpenAI interface shim ======================\n  chatCompletionsCreate = (body: OpenAI.ChatCompletionCreateParamsNonStreaming & {\n    messages: Array<ChatCompletionMessageWithIudex>\n  }): Promise<ChatCompletionWithIudex>  => {\n    const lastMessage = body.messages[body.messages.length - 1];\n    if (!lastMessage) {\n      throw Error(`The messages array is empty.`);\n    }\n\n    // Expecting the last message to be the function result or a new query.\n    // So, the second to last message is the previous Iudex message with\n    // the function to call + callId or is undefined.\n    const penUltMessage = body.messages[body.messages.length - 2];\n\n    // If there is a tool_call_id, we use it to continue the execution in Iudex\n    if (lastMessage?.tool_call_id && penUltMessage?.workflowId) {\n      const workflowId = penUltMessage.workflowId;\n      const callId = lastMessage.tool_call_id;\n      const functionReturn = lastMessage.content || '';\n\n      // Put data\n      const functionCallRes =\n        this.client.returnFunctionCall(callId, String(functionReturn));\n\n      // Wait for new message\n      const nextMessageRes = functionCallRes.then(() => poll(\n        this.client.nextMessage,\n        [workflowId],\n        { maxTries: 60, tries: 0, waitMs: 1000 },\n      ));\n\n      // Return result as OpenAI.ChatCompletion\n      return nextMessageRes.then((r) => {\n        return {\n          model: body.model,\n          ...mapIudexToOpenAi(r, workflowId),\n        };\n      });\n    }\n\n    if (!lastMessage.content) {\n      throw Error(`The message content is empty.`);\n    }\n\n    // Else create new workflow\n    const {\n      promise: currentWorkflowId,\n      resolve: setCurrentWorkflowId,\n      reject: rejectCurrentWorkflowId,\n    } = deconstructedPromise<string>();\n    this.currentWorkflowId = currentWorkflowId;\n    const messageContent = extractMessageTextContent(lastMessage.content);\n    return this.client.startWorkflow(messageContent)\n      .then(({ workflowId }) => {\n        setCurrentWorkflowId(workflowId);\n        return poll(\n          this.client.nextMessage,\n          [workflowId],\n          { maxTries: 60, tries: 0, waitMs: 1000 },\n        ).then((r) => {\n          return {\n            model: body.model,\n            ...mapIudexToOpenAi(r, workflowId),\n          };\n        });\n      })\n      .catch(e => {\n        rejectCurrentWorkflowId(e);\n        throw e;\n      });\n  };\n\n  chat = {\n    completions: {\n      create: this.chatCompletionsCreate,\n    },\n  };\n}\n\n/**\n * Maps IudexMessage to OpenAI.ChatCompletion.\n */\nexport function mapIudexToOpenAi(\n  m: IudexMessage,\n  workflowId: string,\n): Omit<ChatCompletionWithIudex, 'model'> {\n  // If the result is a function_call, we return the function call\n  if (m.type === 'functionCall') {\n    const message = {\n      content: null,\n      role: 'assistant' as const,\n      tool_calls: [{\n        id: m.functionCallId,\n        function: { name: m.functionName, arguments: JSON.stringify(m.functionArgs) },\n        type: 'function' as const,\n      }],\n      workflowId,\n    };\n    return {\n      id: m.id,\n      choices: [{\n        index: 0,\n        finish_reason: 'tool_calls',\n        logprobs: null,\n        message,\n      }],\n      created: new Date(m.timestamp).valueOf(),\n      object: 'chat.completion',\n    };\n  }\n\n  // Else assume it's the final result\n  if (m.type === 'text') {\n    const message = {\n      content: m.text,\n      role: 'assistant' as const,\n      workflowId,\n    };\n    return {\n      id: m.id,\n      choices: [{\n        index: 0,\n        finish_reason: 'stop',\n        logprobs: null,\n        message,\n      }],\n      created: new Date(m.timestamp).valueOf(),\n      object: 'chat.completion',\n    };\n  }\n\n  throw Error('Unsupported message type: ' + m.type);\n}\n\n/**\n * Extracts OpenAI message content as a string.\n */\nexport function extractMessageTextContent(\n  content: OpenAI.ChatCompletionUserMessageParam['content'],\n): string {\n  if (typeof content === 'string') {\n    return content;\n  }\n  // Else content is array containing PartImage or PartText\n  return content.map(c => c.type === 'text' ? c.text : '').join('');\n}\n\n// ======================= Task traversal ======================\nexport function getLastTaskByStatus<Statuses extends TaskStatus | TaskStatus[]>(\n  root: Task,\n  status: Statuses,\n): TaskStatusesToType<Statuses> | undefined {\n  const arrayStatus = !Array.isArray(status) ? [status] : status;\n\n  const traverse = reversePreOrderTraversal<Task>(\n    t => (t as TaskSequenced).subtasks || [],\n    t => (arrayStatus as TaskStatus[]).includes(t.status),\n  );\n\n  return traverse(root) as TaskStatusesToType<Statuses> | undefined;\n}\n\n\nexport function getFirstTaskByStatus<S extends TaskStatus | TaskStatus[]>(\n  root: Task,\n  status: S | S[],\n): TaskStatusesToType<S | S[]> | undefined {\n  const arrayStatus = !Array.isArray(status) ? [status] : status;\n\n  const traverse = preOrderTraversal<Task>(\n    t => (t as TaskSequenced).subtasks || [],\n    t => (arrayStatus as TaskStatus[]).includes(t.status),\n  );\n\n  return traverse(root) as TaskStatusesToType<S | S[]> | undefined;\n}\n\n\nexport function reversePreOrderTraversal<T>(\n  // Gets children from node\n  getChildren: (node: T) => T[],\n  // If true, stops traversal and returns value\n  predicate: (node: T) => boolean,\n) {\n  return function traverse(node: T): T | undefined {\n    if (predicate(node)) {\n      return node;\n    }\n\n    const reversedChildren = getChildren(node).reverse();\n    for (const child of reversedChildren) {\n      const maybeFound = traverse(child);\n      if (maybeFound !== undefined) {\n        return maybeFound;\n      }\n    }\n\n    return undefined;\n  };\n}\n\nexport function preOrderTraversal<T>(\n  // Gets children from node\n  getChildren: (node: T) => T[],\n  // If true, stops traversal and returns value\n  predicate: (node: T) => boolean,\n) {\n  return function traverse(node: T): T | undefined {\n    if (predicate(node)) {\n      return node;\n    }\n\n    const children = getChildren(node);\n    for (const child of children) {\n      const maybeFound = traverse(child);\n      if (maybeFound !== undefined) {\n        return maybeFound;\n      }\n    }\n\n    return undefined;\n  };\n}\n","export function setTimeoutPromise(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function poll<Args extends any[], Ret>(\n  fn: (...args: Args) => Promise<Ret>,\n  args: Args,\n  {\n    maxTries,\n    tries,\n    waitMs,\n  }: {\n    maxTries: number;\n    tries: number;\n    waitMs: number;\n  } = { maxTries: 60, tries: 0, waitMs: 1000 },\n): Promise<NonNullable<Ret>> {\n  if (tries >= maxTries) {\n    throw Error(\n      `Polling failed after ${maxTries} tries for function ${fn.name}.`,\n    );\n  }\n  return fn(...args).then(res => {\n    if (res == null) {\n      return setTimeoutPromise(waitMs)\n        .then(() => poll(fn, args, { maxTries, tries: tries + 1, waitMs }));\n    }\n    return res;\n  });\n}\n\nexport type DeconstructedPromise<T> = {\n  promise: Promise<T>;\n  resolve: (value: T | PromiseLike<T>) => void;\n  reject: (reason?: any) => void;\n};\nexport function deconstructedPromise<T>(): DeconstructedPromise<T> {\n  // Need the ! because TS doesnt know that\n  // the function inside the promise immediately resolves.\n  let promiseResolve!: (value: T | PromiseLike<T>) => void;\n  let promiseReject!: (reason?: any) => void;\n  const promise = new Promise<T>((resolve, reject) => {\n    promiseResolve = resolve;\n    promiseReject = reject;\n  });\n  return {\n    promise,\n    resolve: promiseResolve,\n    reject: promiseReject,\n  };\n}","export default function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from \"./_isPlaceholder.js\";\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from \"./_curry1.js\";\nimport _isPlaceholder from \"./_isPlaceholder.js\";\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nexport default Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n};","export default function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","import _has from \"./_has.js\";\nvar toString = Object.prototype.toString;\n\nvar _isArguments =\n/*#__PURE__*/\nfunction () {\n  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n    return toString.call(x) === '[object Arguments]';\n  } : function _isArguments(x) {\n    return _has('callee', x);\n  };\n}();\n\nexport default _isArguments;","import _curry1 from \"./internal/_curry1.js\";\nimport _has from \"./internal/_has.js\";\nimport _isArguments from \"./internal/_isArguments.js\"; // cover IE < 9 keys issues\n\nvar hasEnumBug = !\n/*#__PURE__*/\n{\n  toString: null\n}.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug\n\nvar hasArgsEnumBug =\n/*#__PURE__*/\nfunction () {\n  'use strict';\n\n  return arguments.propertyIsEnumerable('length');\n}();\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n};\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values, R.toPairs\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\n\n\nvar keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?\n/*#__PURE__*/\n_curry1(function keys(obj) {\n  return Object(obj) !== obj ? [] : Object.keys(obj);\n}) :\n/*#__PURE__*/\n_curry1(function keys(obj) {\n  if (Object(obj) !== obj) {\n    return [];\n  }\n\n  var prop, nIdx;\n  var ks = [];\n\n  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n\n  for (prop in obj) {\n    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n      ks[ks.length] = prop;\n    }\n  }\n\n  if (hasEnumBug) {\n    nIdx = nonEnumerableProps.length - 1;\n\n    while (nIdx >= 0) {\n      prop = nonEnumerableProps[nIdx];\n\n      if (_has(prop, obj) && !contains(ks, prop)) {\n        ks[ks.length] = prop;\n      }\n\n      nIdx -= 1;\n    }\n  }\n\n  return ks;\n});\nexport default keys;","/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) {\n  return (n < 10 ? '0' : '') + n;\n};\n\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n  return d.toISOString();\n} : function _toISOString(d) {\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n};\n\nexport default _toISOString;","export default function _arrayReduce(reducer, acc, list) {\n  var index = 0;\n  var length = list.length;\n\n  while (index < length) {\n    acc = reducer(acc, list[index]);\n    index += 1;\n  }\n\n  return acc;\n}","/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nexport default Number.isInteger || function _isInteger(n) {\n  return n << 0 === n;\n};","import _has from \"./_has.js\"; // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\nfunction _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n\n  while (idx < length) {\n    var source = arguments[idx];\n\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n\n    idx += 1;\n  }\n\n  return output;\n}\n\nexport default typeof Object.assign === 'function' ? Object.assign : _objectAssign;","import _arrayReduce from \"./internal/_arrayReduce.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport keys from \"./keys.js\";\n/**\n * An Object-specific version of [`map`](#map). The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * [`map`](#map) instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      const xyz = { x: 1, y: 2, z: 3 };\n *      const prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, xyz); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */\n\nvar mapObjIndexed =\n/*#__PURE__*/\n_curry2(function mapObjIndexed(fn, obj) {\n  return _arrayReduce(function (acc, key) {\n    acc[key] = fn(obj[key], key, obj);\n    return acc;\n  }, {}, keys(obj));\n});\n\nexport default mapObjIndexed;","import _objectAssign from \"./internal/_objectAssign.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n/**\n * Creates one new object with the own properties from a list of objects.\n * If a key exists in more than one object, the value from the last\n * object it exists in will be used.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */\n\nvar mergeAll =\n/*#__PURE__*/\n_curry1(function mergeAll(list) {\n  return _objectAssign.apply(null, [{}].concat(list));\n});\n\nexport default mergeAll;","import _curry1 from \"./internal/_curry1.js\";\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar hasProtoTrim = typeof String.prototype.trim === 'function';\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\n\nvar trim = !hasProtoTrim ||\n/*#__PURE__*/\nws.trim() || !\n/*#__PURE__*/\nzeroWidth.trim() ?\n/*#__PURE__*/\n_curry1(function trim(str) {\n  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n  return str.replace(beginRx, '').replace(endRx, '');\n}) :\n/*#__PURE__*/\n_curry1(function trim(str) {\n  return str.trim();\n});\nexport default trim;","import * as R from 'ramda';\nimport { ChatFunctionCall, ChatText, ChatFunctionReturn } from '../types/chat-types.js';\nimport { MappedReturnType } from '../types/utility-types.js';\n\nfunction checkResponse(r: Response): Promise<unknown> {\n  if (!r.ok) {\n    throw Error(`Request ${r.url} failed with ${r.status}: ${r.statusText}`);\n  }\n  if (r.status === 204) {\n    return Promise.resolve();\n  }\n  return r.json();\n}\n\nfunction throwOnApiError<T>(json: T): T {\n  // Check service unavailable message\n  if ((json as any)?.message === 'Service Unavailable') {\n    throw Error((json as any).message);\n  }\n  // Pass through otherwise\n  return json;\n}\n\nfunction unwrapApi(json: any): unknown {\n  // If there is a body, return that instead\n  if (json?.body\n    && typeof json.body === 'string'\n    && json.body.startsWith('{')\n    && json.body.endsWith('}')\n  ) {\n    return JSON.parse(json.body);\n  }\n  return json;\n}\n\nfunction parseIudexResponse(r: Response): Promise<any> {\n  return checkResponse(r)\n    .then(throwOnApiError)\n    .then(unwrapApi)\n    .then(v => {\n      if (process.env.DEBUG_MODE) {\n        console.log(new Date().toISOString(), 'Response:', v);\n      }\n      return v;\n    })\n    .catch((e) => {\n      throw Error(`Request ${r.url} failed with ${r.status}: ${e.message}`);\n    });\n}\n\nexport function createFunctionClient(baseUrl: string, apiKey: string) {\n  const fns = {\n    returnFunctionCall,\n    nextMessage,\n    startWorkflow,\n    putFunctionJsons,\n  };\n  return R.mapObjIndexed((fn) => fn(baseUrl, apiKey), fns) as MappedReturnType<\n    typeof fns\n  >;\n}\n\n// TODO change to putFunctionCallReturn to better match api def name\nexport type ReturnFunctionCallBody = Pick<ChatFunctionReturn, 'functionCallId'|'functionReturn'>;\nexport type ReturnFunctionCallRes = { workflowId: string; message: string; };\nexport function returnFunctionCall(baseUrl: string, apiKey: string) {\n  return function (functionCallId: string, functionReturn: string): Promise<void> {\n    const bodyJson: ReturnFunctionCallBody = {\n      functionCallId,\n      functionReturn,\n    };\n    return fetch(baseUrl + '/function_calls/' + functionCallId + '/return', {\n      method: 'PUT',\n      headers: { 'x-api-key': `${apiKey}` },\n      body: JSON.stringify(bodyJson),\n    }).then(parseIudexResponse);\n  };\n}\n\nexport type NextMessageRes = ChatFunctionCall | ChatText | undefined;\nexport function nextMessage(baseUrl: string, apiKey: string) {\n  return function (workflowId: string): Promise<NextMessageRes> {\n    return fetch(baseUrl + '/workflows/' + workflowId + '/next_message', {\n      method: 'GET',\n      headers: { 'x-api-key': `${apiKey}` },\n    }).then(parseIudexResponse);\n  };\n}\n\n// TODO change to postWorkflows to better match api def name\nexport type StartWorkflowRes = { workflowId: string; message: string; };\nexport function startWorkflow(baseUrl: string, apiKey: string) {\n  return function (query: string, modules?: string[]): Promise<StartWorkflowRes> {\n    return fetch(baseUrl + '/workflows', {\n      method: 'POST',\n      headers: { 'x-api-key': `${apiKey}` },\n      body: JSON.stringify({ query, modules }),\n    }).then(parseIudexResponse);\n  };\n}\n\n\ntype FunctionJson = {\n  name: string;\n  description?: string;\n  parameters?: Record<string, any>;\n  returns?: Record<string, any>;\n  usageExample?: string;\n  returnsExample?: string;\n};\nexport type putFunctionJsonsReq = { jsons: FunctionJson[]; module?: string; };\nexport function putFunctionJsons(baseUrl: string, apiKey: string) {\n  return function (jsons: FunctionJson[], module?: string): Promise<void> {\n    const bodyJson: putFunctionJsonsReq = { jsons, module };\n    return fetch(baseUrl + '/function_jsons', {\n      method: 'PUT',\n      headers: { 'x-api-key': `${apiKey}` },\n      body: JSON.stringify(bodyJson),\n    }).then(parseIudexResponse);\n  };\n}\n","import * as R from 'ramda';\n\nimport {\n  GetWorkflowsRes,\n  GetWorkflowByIdReq,\n  GetWorkflowByIdRes,\n  PostWorkflowsReq,\n  PostWorkflowsRes,\n} from './workflow-schemas.js';\nimport { MappedReturnType } from '../types/utility-types.js';\n\n/**\n * Main client\n */\nexport function createWorkflowClient(baseUrl: string, apiKey: string) {\n  const fns = {\n    fetchGetWorkflows,\n    fetchGetWorkflowById,\n    fetchPostWorkflows,\n  };\n  return R.mapObjIndexed((fn) => fn(baseUrl, apiKey), fns) as MappedReturnType<\n    typeof fns\n  >;\n}\n\nexport type WorkflowClient = ReturnType<typeof createWorkflowClient>;\n\nasync function checkResponseStatus(res: Response) {\n  const body = await res.json();\n  if (!res.ok) {\n    // Unwrap error\n    const error = body.error || res.statusText || body.message;\n    throw new Error(`Request failed with: ${error}`);\n  }\n  return body;\n}\n\nexport function fetchGetWorkflows(baseUrl: string, apiKey: string) {\n  return function (): Promise<GetWorkflowsRes> {\n    return fetch(`${baseUrl}/workflows`, {\n      method: 'GET',\n      headers: { 'x-api-key': apiKey },\n    }).then(checkResponseStatus);\n  };\n}\n\nexport function fetchGetWorkflowById(baseUrl: string, apiKey: string) {\n  return function (req: GetWorkflowByIdReq): Promise<GetWorkflowByIdRes> {\n    return fetch(`${baseUrl}/workflows/${req.workflowId}`, {\n      method: 'GET',\n      headers: { 'x-api-key': apiKey },\n    }).then(checkResponseStatus);\n  };\n}\n\nexport function fetchPostWorkflows(baseUrl: string, apiKey: string) {\n  return function (req: PostWorkflowsReq): Promise<PostWorkflowsRes> {\n    return fetch(`${baseUrl}/workflows`, {\n      method: 'POST',\n      body: JSON.stringify(req),\n      headers: { 'x-api-key': apiKey },\n    }).then(checkResponseStatus);\n  };\n}\n","import z from 'zod';\n\nimport { taskSchema } from '../types/task-types.js';\nimport { workflowInfoSchema } from '../types/workflow-types.js';\n\nexport const getWorkflowsResSchema = z.object({\n  workflowInfos: z.array(workflowInfoSchema),\n});\nexport type GetWorkflowsRes = z.infer<typeof getWorkflowsResSchema>;\n\nexport const getWorkflowByIdReqSchema = z.object({\n  workflowId: z.string(),\n});\nexport const getWorkflowByIdResSchema = z.object({\n  workflow: taskSchema, // root task\n});\nexport type GetWorkflowByIdReq = z.infer<typeof getWorkflowByIdReqSchema>;\nexport type GetWorkflowByIdRes = z.infer<typeof getWorkflowByIdResSchema>;\n\nexport const postWorkflowsReqSchema = z.object({\n  query: z.string(),\n  // Undefined means use all org modules. [] means use all modules.\n  modules: z.array(z.string()).optional(),\n  opts: z.object({\n    maxFunctionMatches: z.number().optional(),\n  }).optional(),\n});\nexport const postWorkflowsResSchema = z.object({\n  message: z.string(),\n  workflowId: z.string(),\n});\nexport type PostWorkflowsReq = z.infer<typeof postWorkflowsReqSchema>;\nexport type PostWorkflowsRes = z.infer<typeof postWorkflowsResSchema>;\n","import z from 'zod';\n\nexport const TaskStatus = {\n  // Queued state\n  Pending: 'Pending', // awaiting processing\n  // Processing states\n  Planning: 'Planning', // in programmer\n  Executing: 'Executing', // in executor\n  Sequencing: 'Sequencing', // in sequencer\n  // Terminal states\n  Resolved: 'Resolved', // execution resolved task\n  Sequenced: 'Sequenced', // no resolution; sequuencer created subtasks\n  Errored: 'Errored', // unrecoverable error during processing\n} as const;\nexport type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus];\n\nexport const TerminalTaskStatuses = [\n  TaskStatus.Resolved,\n  TaskStatus.Sequenced,\n  TaskStatus.Errored,\n] as const;\n\nexport const baseTaskSchema = z.object({\n  id: z.string(),\n  description: z.string(),\n  status: z.nativeEnum(TaskStatus),\n  stepIndex: z.number(),\n  depth: z.number(),\n  numRewrites: z.number(),\n});\nexport type BaseTask = z.infer<typeof baseTaskSchema>;\n\n// Task judgement types\n\nexport const Feasibility = {\n  Feasible: 'Feasible',\n  Rewritable: 'Rewritable',\n  Infeasible: 'Infeasible',\n} as const;\nexport type Feasibility = (typeof Feasibility)[keyof typeof Feasibility];\n\nexport const feasibilityCheckSchema = z.object({\n  feasibility: z.nativeEnum(Feasibility),\n  reason: z.coerce.string(),\n  fix: z.string().optional(),\n});\nexport type FeasibilityCheck = z.infer<typeof feasibilityCheckSchema>;\n\nexport const Resolution = {\n  Resolved: 'Resolved',\n  Rewritable: 'Rewritable',\n  Infeasible: 'Infeasible',\n} as const;\nexport type Resolution = (typeof Resolution)[keyof typeof Resolution];\n\nexport const resolutionCheckSchema = z.object({\n  resolution: z.nativeEnum(Resolution),\n  reason: z.coerce.string(),\n  fix: z.string().optional(),\n});\nexport type ResolutionCheck = z.infer<typeof resolutionCheckSchema>;\n\n// Disambiguation of task statuses and required data\n\nexport const taskPendingSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Pending),\n});\nexport type TaskPending = z.infer<typeof taskPendingSchema>;\n\nexport const taskPlanningSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Planning),\n  // present if rewriting\n  program: z.string().optional(),\n  feasibilityCheck: feasibilityCheckSchema.optional(),\n  // present if rewriting from executor\n  resolutionCheck: resolutionCheckSchema.optional(),\n});\nexport type TaskPlanning = z.infer<typeof taskPlanningSchema>;\n\nexport const taskExecutingSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Executing),\n  program: z.string(),\n  usedFunctionNames: z.array(z.string()),\n  feasibilityCheck: feasibilityCheckSchema,\n});\nexport type TaskExecuting = z.infer<typeof taskExecutingSchema>;\n\nexport const taskResolvedSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Resolved),\n  program: z.string(),\n  usedFunctionNames: z.array(z.string()),\n  feasibilityCheck: feasibilityCheckSchema,\n  resolutionCheck: resolutionCheckSchema,\n});\nexport type TaskResolved = z.infer<typeof taskResolvedSchema>;\n\nexport const taskSequencingSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Sequencing),\n  program: z.string(),\n  feasibilityCheck: feasibilityCheckSchema,\n  // present if sequencing from executor\n  usedFunctionNames: z.array(z.string()).optional(),\n  resolutionCheck: resolutionCheckSchema.optional(),\n});\nexport type TaskSequencing = z.infer<typeof taskSequencingSchema>;\n\nexport type TaskSequenced = z.infer<typeof baseTaskSchema> & {\n  status: 'Sequenced'; // NOTE: should use TaskStatus but compiler thinks it's the type\n  program: string;\n  subtasks: Task[];\n  feasibilityCheck: FeasibilityCheck;\n  usedFunctionNames?: string[];\n  resolutionCheck?: ResolutionCheck;\n};\nexport const taskSequencedSchema: z.ZodType<TaskSequenced> = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Sequenced),\n  program: z.string(),\n  subtasks: z.lazy(() => taskSchema.array()),\n  feasibilityCheck: feasibilityCheckSchema,\n  usedFunctionNames: z.array(z.string()).optional(),\n  resolutionCheck: resolutionCheckSchema.optional(),\n});\n\nexport const taskErroredSchema = baseTaskSchema.extend({\n  status: z.literal(TaskStatus.Errored),\n  errorMsg: z.string(),\n  errorName: z.string(),\n  errorStack: z.string().optional(),\n});\nexport type TaskErrored = z.infer<typeof taskErroredSchema>;\n\n// Task union types\n\nexport type Task =\n  | TaskPending\n  | TaskPlanning\n  | TaskExecuting\n  | TaskSequencing\n  | TaskSequenced\n  | TaskResolved\n  | TaskErrored;\nexport const taskSchema: z.ZodType<Task> = z.union([\n  taskPendingSchema,\n  taskPlanningSchema,\n  taskExecutingSchema,\n  taskResolvedSchema,\n  taskSequencingSchema,\n  taskSequencedSchema,\n  taskErroredSchema,\n]);\n\nexport type TaskStatusToType = {\n  [TaskStatus.Pending]: TaskPending;\n  [TaskStatus.Planning]: TaskPlanning;\n  [TaskStatus.Executing]: TaskExecuting;\n  [TaskStatus.Sequencing]: TaskSequencing;\n  [TaskStatus.Sequenced]: TaskSequenced;\n  [TaskStatus.Resolved]: TaskResolved;\n  [TaskStatus.Errored]: TaskErrored;\n};\n\nexport type TaskStatusesToType<Statuses> =\n  Statuses extends TaskStatus[]\n    ? Statuses[number] extends TaskStatus\n      ? TaskStatusToType[Statuses[number]]\n      : never\n    : Statuses extends TaskStatus\n      ? TaskStatusToType[Statuses]\n      : never;\n","import z from 'zod';\nimport { taskSchema } from './task-types.js';\n\nexport const WorkflowStatus = {\n  Running: 'Running',\n  Completed: 'Completed',\n  Failed: 'Failed',\n  Paused: 'Paused',\n  TimedOut: 'TimedOut',\n} as const;\nexport type WorkflowStatus = (typeof WorkflowStatus)[keyof typeof WorkflowStatus];\n\nexport const workflowMetadataSchema = z.object({\n  maxFunctionMatches: z.number().optional(),\n});\nexport type WorkflowMetadata = z.infer<typeof workflowMetadataSchema>;\n\nexport const workflowSchema = z.object({\n  workflowId: z.string(),\n  root: taskSchema,\n  modules: z.array(z.string()).optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  metadata: workflowMetadataSchema.optional(),\n  orgId: z.string(),\n});\nexport type Workflow = z.infer<typeof workflowSchema>;\n\nexport const workflowInfoSchema = z.object({\n  workflowId: z.string(),\n  modules: z.array(z.string()).optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  // Task summary\n  description: z.string(),\n  status: z.nativeEnum(WorkflowStatus),\n  numLeafTasks: z.number(),\n});\nexport type WorkflowInfo = z.infer<typeof workflowInfoSchema>;\n","import { z } from 'zod';\n\nconst chatTurnBaseSchema = z.object({\n  id: z.string(),\n  type: z.string(),\n  sender: z.string(),\n  timestamp: z.string(),\n});\ntype ChatTurnBase = z.infer<typeof chatTurnBaseSchema>;\n\n/**\n * For simple text responses\n */\nexport const chatTextSchema = chatTurnBaseSchema.extend({\n  type: z.literal('text'),\n  text: z.string(),\n});\nexport type ChatText = z.infer<typeof chatTextSchema>;\n\nexport const chatErrorSchema = chatTurnBaseSchema.extend({\n  type: z.literal('error'),\n  name: z.string(),\n  message: z.string(),\n  cause: z.string().optional(),\n  stack: z.string().optional(),\n});\nexport type ChatError = z.infer<typeof chatErrorSchema>;\n\n/**\n * For image message.\n * Inspired by https://ogp.me/\n */\nexport const chatImageSchema = chatTurnBaseSchema.extend({\n  type: z.literal('image'),\n  image: z.string(),\n  description: z.string(),\n});\nexport type ChatImage = z.infer<typeof chatImageSchema>;\n\n\nexport const chatListSchema = chatTurnBaseSchema.extend({\n  type: z.literal('list'),\n  list: z.array(z.string()),\n});\nexport type ChatList = z.infer<typeof chatListSchema>;\n\n// TODO: add more types for documents, graphs, etc\n\nexport const chatFunctionCallSchema = chatTurnBaseSchema.extend({\n  type: z.literal('functionCall'),\n  functionCallId: z.string(),\n  functionName: z.string(),\n  functionArgs: z.record(z.unknown()),\n});\nexport type ChatFunctionCall = z.infer<typeof chatFunctionCallSchema>;\n\n\nexport const chatFunctionReturnSchema = chatTurnBaseSchema.extend({\n  type: z.literal('functionReturn'),\n  functionCallId: z.string(),\n  functionReturn: z.string(),\n});\nexport type ChatFunctionReturn = z.infer<typeof chatFunctionReturnSchema>;\n\n/**\n * All chat turn types. Put new chat turn types here.\n */\nexport const chatTurnSchema = z.discriminatedUnion('type', [\n  chatTextSchema,\n  chatErrorSchema,\n  chatImageSchema,\n  chatListSchema,\n  chatFunctionCallSchema,\n  chatFunctionReturnSchema,\n]);\nexport type ChatTurn = z.infer<typeof chatTurnSchema>;\n\n/**\n * String union for all chat turn types.\n */\nexport type ChatTurnType = ChatTurn['type'];\n\n/**\n * ChatTurn base type with unioned type field. The most generic, \"all\" type.\n */\nexport type ChatTurnUnion = ChatTurnBase & { type: ChatTurnType };\n","import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { BatchSpanProcessor, NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { Resource } from '@opentelemetry/resources';\nimport {\n  SEMRESATTRS_SERVICE_INSTANCE_ID,\n  SEMRESATTRS_SERVICE_NAME,\n} from '@opentelemetry/semantic-conventions';\nimport { logs } from '@opentelemetry/api-logs';\nimport {\n  LoggerProvider,\n  BatchLogRecordProcessor,\n} from '@opentelemetry/sdk-logs';\nimport { OTLPLogExporter } from '@opentelemetry/exporter-logs-otlp-proto';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport _ from 'lodash';\nimport { config } from './utils.js';\nimport {\n  DiagConsoleLogger,\n  DiagLogLevel,\n  Span,\n  SpanStatusCode,\n  diag,\n  trace,\n} from '@opentelemetry/api';\nimport { instrumentConsole } from './console.js';\nimport { PinoHttpInstrumentation } from './pino-http.js';\nimport { traceloopInstrumentations } from './traceloop.js';\nimport { nativeConsole } from './utils.js';\n\nexport * from './utils.js';\nexport * from './trace.js';\nexport * as iudexPino from './pino.js';\nexport * as iudexPinoHttp from './pino-http.js';\nexport * as iudexFastify from './fastify.js';\nexport * as iudexConsole from './console.js';\nexport * as iudexTrpc from './trpc.js';\nexport * as iudexAwsApiGateway from './aws-api-gateway.js';\nexport * as iudexAwsLambda from './aws-lambda.js';\n\n/**\n * Native console, if you want to use it without logging\n * and without turning off console instrumentation.\n */\nexport const console = nativeConsole;\n\nif (process.env.IUDEX_DEBUG) {\n  console.log('IUDEX_DEBUG on. Setting diag logger to console.');\n  diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);\n}\n\nexport function instrument({\n  baseUrl = process.env.IUDEX_EXPORTER_OTLP_ENDPOINT\n    || process.env.OTEL_EXPORTER_OTLP_ENDPOINT\n    || 'https://api.iudex.ai',\n  iudexApiKey = process.env.IUDEX_API_KEY,\n  serviceName = process.env.OTEL_SERVICE_NAME || 'unknown-service',\n  instanceId,\n  gitCommit = process.env.GIT_COMMIT,\n  githubUrl = process.env.GITHUB_URL,\n  env = process.env.NODE_ENV,\n  headers: configHeaders = {},\n  settings = {},\n}: {\n  baseUrl?: string;\n  iudexApiKey?: string;\n  serviceName?: string;\n  instanceId?: string;\n  gitCommit?: string;\n  githubUrl?: string;\n  env?: string;\n  headers?: Record<string, string>;\n  settings?: Partial<{ instrumentConsole: boolean }>;\n} = {}) {\n  if (config.isInstrumented) return;\n\n  if (!iudexApiKey) {\n    console.warn(\n      `The IUDEX_API_KEY environment variable is missing or empty.` +\n      ` Provide IUDEX_API_KEY to the environment on load` +\n      ` OR instrument with the iudexApiKey option.` +\n      ` Example: \\`instrument{ iudexApiKey: 'My_API_Key' })\\``,\n    );\n    return;\n  }\n\n  const headers: Record<string, string> = {\n    'x-api-key': iudexApiKey,\n    ...configHeaders,\n  };\n\n  if (!gitCommit) {\n    try {\n      const { execSync } = require('child_process');\n      gitCommit = execSync('git rev-parse HEAD').toString().trim();\n    } catch (e) {\n      // Swallow the error\n    }\n  }\n\n  const resource = new Resource(_.omitBy({\n    [SEMRESATTRS_SERVICE_NAME]: serviceName,\n    [SEMRESATTRS_SERVICE_INSTANCE_ID]: instanceId,\n    'git.commit': gitCommit,\n    'github.url': githubUrl,\n    'env': env,\n  }, _.isNil));\n\n  // Configure logger\n  const logExporter = new OTLPLogExporter({ url: baseUrl + '/v1/logs', headers });\n  const logRecordProcessor = new BatchLogRecordProcessor(logExporter);\n  const loggerProvider = new LoggerProvider({ resource });\n  loggerProvider.addLogRecordProcessor(logRecordProcessor);\n  logs.setGlobalLoggerProvider(loggerProvider);\n\n  // Configure tracer\n  const traceExporter = new OTLPTraceExporter({ url: baseUrl + '/v1/traces', headers });\n  const spanProcessors = [new BatchSpanProcessor(traceExporter)];\n\n  // Instrument\n  const sdk = new NodeSDK({\n    serviceName,\n    resource,\n    logRecordProcessor,\n    spanProcessors,\n    instrumentations: [\n      // Instrument OTel auto\n      getNodeAutoInstrumentations({\n        '@opentelemetry/instrumentation-fs': { enabled: false },\n        '@opentelemetry/instrumentation-net': { enabled: false},\n        '@opentelemetry/instrumentation-express': {\n          spanNameHook(info) {\n            return `${info.request.method} ${info.route}`;\n          },\n        },\n      }),\n      // new PinoHttpInstrumentation(),\n      // Instrument ai stuff\n      traceloopInstrumentations(),\n    ],\n    autoDetectResources: true,\n  });\n  sdk.start();\n\n  // Instrument console\n  if (settings.instrumentConsole || settings.instrumentConsole == undefined) {\n    instrumentConsole();\n  }\n\n\n  // Set global flag\n  config.isInstrumented = true;\n\n  return {\n    updateResource(newResource: Record<string, any>) {\n      const mergedResource = resource.merge(new Resource(newResource));\n\n      const loggerProvider = new LoggerProvider({ resource: mergedResource });\n      loggerProvider.addLogRecordProcessor(logRecordProcessor);\n      logs.setGlobalLoggerProvider(loggerProvider);\n\n      const tracerProvider = new NodeTracerProvider({ resource: mergedResource });\n      tracerProvider.register();\n      tracerProvider.addSpanProcessor(spanProcessors[0]);\n      trace.setGlobalTracerProvider(tracerProvider);\n    },\n  };\n}\n\nexport function trackAttribute(key: string, value: any) {\n  const activeSpan = trace.getActiveSpan();\n  activeSpan?.setAttribute(key, value);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport {\n  OTLPExporterConfigBase,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n  parseHeaders,\n} from '@opentelemetry/otlp-exporter-base';\nimport {\n  OTLPProtoExporterNodeBase,\n  ServiceClientType,\n} from '@opentelemetry/otlp-proto-exporter-base';\nimport {\n  createExportLogsServiceRequest,\n  IExportLogsServiceRequest,\n} from '@opentelemetry/otlp-transformer';\n\nimport { ReadableLogRecord, LogRecordExporter } from '@opentelemetry/sdk-logs';\nimport { VERSION } from '../../version';\n\nconst USER_AGENT = {\n  'User-Agent': `OTel-OTLP-Exporter-JavaScript/${VERSION}`,\n};\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/logs';\nconst DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n\n/**\n * Collector Trace Exporter for Node\n */\nexport class OTLPLogExporter\n  extends OTLPProtoExporterNodeBase<\n    ReadableLogRecord,\n    IExportLogsServiceRequest\n  >\n  implements LogRecordExporter\n{\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n    this.headers = {\n      ...this.headers,\n      ...USER_AGENT,\n      ...baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_LOGS_HEADERS\n      ),\n      ...parseHeaders(config?.headers),\n    };\n  }\n  convert(logs: ReadableLogRecord[]): IExportLogsServiceRequest {\n    return createExportLogsServiceRequest(logs);\n  }\n\n  getDefaultUrl(config: OTLPExporterConfigBase): string {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_LOGS_ENDPOINT.length > 0\n      ? appendRootPathToUrlIfNeeded(getEnv().OTEL_EXPORTER_OTLP_LOGS_ENDPOINT)\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrl(\n          getEnv().OTEL_EXPORTER_OTLP_ENDPOINT,\n          DEFAULT_COLLECTOR_RESOURCE_PATH\n        )\n      : DEFAULT_COLLECTOR_URL;\n  }\n\n  getServiceClientType() {\n    return ServiceClientType.LOGS;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { ServiceClientType } from '../types';\nimport {\n  OTLPExporterNodeBase as OTLPExporterBaseMain,\n  CompressionAlgorithm,\n  OTLPExporterError,\n  OTLPExporterNodeConfigBase,\n} from '@opentelemetry/otlp-exporter-base';\n\ntype SendFn = <ExportItem, ServiceRequest>(\n  collector: OTLPProtoExporterNodeBase<ExportItem, ServiceRequest>,\n  objects: ExportItem[],\n  compression: CompressionAlgorithm,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n) => void;\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPProtoExporterNodeBase<\n  ExportItem,\n  ServiceRequest,\n> extends OTLPExporterBaseMain<ExportItem, ServiceRequest> {\n  private _send!: SendFn;\n\n  constructor(config: OTLPExporterNodeConfigBase = {}) {\n    super(config);\n  }\n\n  private _sendPromise(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void {\n    const promise = new Promise<void>((resolve, reject) => {\n      this._send(this, objects, this.compression, resolve, reject);\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n\n  override send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    if (!this._send) {\n      // defer to next tick and lazy load to avoid loading protobufjs too early\n      // and making this impossible to be instrumented\n      setImmediate(() => {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { send } = require('./util');\n        this._send = send;\n        this._sendPromise(objects, onSuccess, onError);\n      });\n    } else {\n      this._sendPromise(objects, onSuccess, onError);\n    }\n  }\n\n  abstract getServiceClientType(): ServiceClientType;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPProtoExporterNodeBase, send } from './node';\nexport { OTLPProtoExporterBrowserBase } from './browser';\nexport { ServiceClientType } from './types';\nexport { ExportRequestType, getExportRequestProto } from './util';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { OtlpEncodingOptions, Fixed64, LongBits } from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { hexToBinary, hrTimeToNanoseconds } from '@opentelemetry/core';\n\nexport function hrTimeToNanos(hrTime: HrTime): bigint {\n  const NANOSECONDS = BigInt(1_000_000_000);\n  return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);\n}\n\nexport function toLongBits(value: bigint): LongBits {\n  const low = Number(BigInt.asUintN(32, value));\n  const high = Number(BigInt.asUintN(32, value >> BigInt(32)));\n  return { low, high };\n}\n\nexport function encodeAsLongBits(hrTime: HrTime): LongBits {\n  const nanos = hrTimeToNanos(hrTime);\n  return toLongBits(nanos);\n}\n\nexport function encodeAsString(hrTime: HrTime): string {\n  const nanos = hrTimeToNanos(hrTime);\n  return nanos.toString();\n}\n\nconst encodeTimestamp =\n  typeof BigInt !== 'undefined' ? encodeAsString : hrTimeToNanoseconds;\n\nexport type HrTimeEncodeFunction = (hrTime: HrTime) => Fixed64;\nexport type SpanContextEncodeFunction = (\n  spanContext: string\n) => string | Uint8Array;\nexport type OptionalSpanContextEncodeFunction = (\n  spanContext: string | undefined\n) => string | Uint8Array | undefined;\n\nexport interface Encoder {\n  encodeHrTime: HrTimeEncodeFunction;\n  encodeSpanContext: SpanContextEncodeFunction;\n  encodeOptionalSpanContext: OptionalSpanContextEncodeFunction;\n}\n\nfunction identity<T>(value: T): T {\n  return value;\n}\n\nfunction optionalHexToBinary(str: string | undefined): Uint8Array | undefined {\n  if (str === undefined) return undefined;\n  return hexToBinary(str);\n}\n\nconst DEFAULT_ENCODER: Encoder = {\n  encodeHrTime: encodeAsLongBits,\n  encodeSpanContext: hexToBinary,\n  encodeOptionalSpanContext: optionalHexToBinary,\n};\n\nexport function getOtlpEncoder(options?: OtlpEncodingOptions): Encoder {\n  if (options === undefined) {\n    return DEFAULT_ENCODER;\n  }\n\n  const useLongBits = options.useLongBits ?? true;\n  const useHex = options.useHex ?? false;\n  return {\n    encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,\n    encodeSpanContext: useHex ? identity : hexToBinary,\n    encodeOptionalSpanContext: useHex ? identity : optionalHexToBinary,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IAnyValue, IInstrumentationScope, IKeyValue } from './types';\nimport { Attributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\n\nexport function createInstrumentationScope(\n  scope: InstrumentationScope\n): IInstrumentationScope {\n  return {\n    name: scope.name,\n    version: scope.version,\n  };\n}\n\nexport function toAttributes(attributes: Attributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n\nexport function toKeyValue(key: string, value: unknown): IKeyValue {\n  return {\n    key: key,\n    value: toAnyValue(value),\n  };\n}\n\nexport function toAnyValue(value: unknown): IAnyValue {\n  const t = typeof value;\n  if (t === 'string') return { stringValue: value as string };\n  if (t === 'number') {\n    if (!Number.isInteger(value)) return { doubleValue: value as number };\n    return { intValue: value as number };\n  }\n  if (t === 'boolean') return { boolValue: value as boolean };\n  if (value instanceof Uint8Array) return { bytesValue: value };\n  if (Array.isArray(value))\n    return { arrayValue: { values: value.map(toAnyValue) } };\n  if (t === 'object' && value != null)\n    return {\n      kvlistValue: {\n        values: Object.entries(value as object).map(([k, v]) =>\n          toKeyValue(k, v)\n        ),\n      },\n    };\n\n  return {};\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { IResource as ISdkResource } from '@opentelemetry/resources';\nimport { toAttributes } from '../common/internal';\nimport { IResource } from './types';\n\nexport function createResource(resource: ISdkResource): IResource {\n  return {\n    attributes: toAttributes(resource.attributes),\n    droppedAttributesCount: 0,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ReadableLogRecord } from '@opentelemetry/sdk-logs';\nimport {\n  ESeverityNumber,\n  IExportLogsServiceRequest,\n  ILogRecord,\n  IResourceLogs,\n} from './types';\nimport { IResource } from '@opentelemetry/resources';\nimport { Encoder, getOtlpEncoder } from '../common';\nimport {\n  createInstrumentationScope,\n  toAnyValue,\n  toKeyValue,\n} from '../common/internal';\nimport { SeverityNumber } from '@opentelemetry/api-logs';\nimport { OtlpEncodingOptions, IKeyValue } from '../common/types';\nimport { LogAttributes } from '@opentelemetry/api-logs';\nimport { createResource } from '../resource/internal';\n\nexport function createExportLogsServiceRequest(\n  logRecords: ReadableLogRecord[],\n  options?: OtlpEncodingOptions\n): IExportLogsServiceRequest {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resourceLogs: logRecordsToResourceLogs(logRecords, encoder),\n  };\n}\n\nfunction createResourceMap(\n  logRecords: ReadableLogRecord[]\n): Map<IResource, Map<string, ReadableLogRecord[]>> {\n  const resourceMap: Map<\n    IResource,\n    Map<string, ReadableLogRecord[]>\n  > = new Map();\n\n  for (const record of logRecords) {\n    const {\n      resource,\n      instrumentationScope: { name, version = '', schemaUrl = '' },\n    } = record;\n\n    let ismMap = resourceMap.get(resource);\n    if (!ismMap) {\n      ismMap = new Map();\n      resourceMap.set(resource, ismMap);\n    }\n\n    const ismKey = `${name}@${version}:${schemaUrl}`;\n    let records = ismMap.get(ismKey);\n    if (!records) {\n      records = [];\n      ismMap.set(ismKey, records);\n    }\n    records.push(record);\n  }\n  return resourceMap;\n}\n\nfunction logRecordsToResourceLogs(\n  logRecords: ReadableLogRecord[],\n  encoder: Encoder\n): IResourceLogs[] {\n  const resourceMap = createResourceMap(logRecords);\n  return Array.from(resourceMap, ([resource, ismMap]) => ({\n    resource: createResource(resource),\n    scopeLogs: Array.from(ismMap, ([, scopeLogs]) => {\n      return {\n        scope: createInstrumentationScope(scopeLogs[0].instrumentationScope),\n        logRecords: scopeLogs.map(log => toLogRecord(log, encoder)),\n        schemaUrl: scopeLogs[0].instrumentationScope.schemaUrl,\n      };\n    }),\n    schemaUrl: undefined,\n  }));\n}\n\nfunction toLogRecord(log: ReadableLogRecord, encoder: Encoder): ILogRecord {\n  return {\n    timeUnixNano: encoder.encodeHrTime(log.hrTime),\n    observedTimeUnixNano: encoder.encodeHrTime(log.hrTimeObserved),\n    severityNumber: toSeverityNumber(log.severityNumber),\n    severityText: log.severityText,\n    body: toAnyValue(log.body),\n    attributes: toLogAttributes(log.attributes),\n    droppedAttributesCount: log.droppedAttributesCount,\n    flags: log.spanContext?.traceFlags,\n    traceId: encoder.encodeOptionalSpanContext(log.spanContext?.traceId),\n    spanId: encoder.encodeOptionalSpanContext(log.spanContext?.spanId),\n  };\n}\n\nfunction toSeverityNumber(\n  severityNumber: SeverityNumber | undefined\n): ESeverityNumber | undefined {\n  return severityNumber as number | undefined as ESeverityNumber | undefined;\n}\n\nexport function toLogAttributes(attributes: LogAttributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.51.1';\n","import {\n  SEMATTRS_CODE_FILEPATH,\n  SEMATTRS_CODE_FUNCTION,\n  SEMATTRS_CODE_LINENO,\n} from '@opentelemetry/semantic-conventions';\nimport { logs } from '@opentelemetry/api-logs';\n\nimport _ from 'lodash';\n\nexport const config = { isInstrumented: false, nativeConsole: { ...console } };\n\n// Native console\nexport const nativeConsole = config.nativeConsole;\n\nexport function convertSeverityTextToNumber(severityText: string | undefined) {\n  if (severityText == undefined) {\n    // should be UNSPECIFIED=0 but we pass through undefined for convenience\n    return;\n  }\n  switch (severityText) {\n    case 'TRACE':\n      return 1;\n    case 'DEBUG':\n      return 5;\n    case 'INFO':\n      return 9;\n    case 'WARN':\n      return 13;\n    case 'ERROR':\n      return 17;\n    case 'FATAL':\n      return 21;\n    default:\n      // should be UNRECOGNIZED=-1 but we pass through undefined for convenience\n      return;\n  }\n}\n\nexport function convertSeverityValuesToLevel(\n  severityNumber: number | undefined,\n  severityText?: string | undefined,\n): string {\n  // Default to out of scope number.\n  severityNumber ||= convertSeverityTextToNumber(severityText) || 0;\n\n  if (severityNumber >= 1 && severityNumber <= 4) {\n    return 'TRACE';\n  } else if (severityNumber >= 5 && severityNumber <= 8) {\n    return 'DEBUG';\n  } else if (severityNumber >= 9 && severityNumber <= 12) {\n    return 'INFO';\n  } else if (severityNumber >= 13 && severityNumber <= 16) {\n    return 'WARN';\n  } else if (severityNumber >= 17 && severityNumber <= 20) {\n    return 'ERROR';\n  } else if (severityNumber >= 21 && severityNumber <= 24) {\n    return 'FATAL';\n  } else {\n    return 'INFO';\n  }\n}\n\nexport function getCallerInfo(frameDepth: number): {\n  filePath?: string;\n  lineNum?: number;\n  caller?: string;\n} {\n  const stack = new Error().stack;\n  if (!stack) return {};\n\n  /*\n  Structure looks like:\n    Error\n      at /iudex-node-module/test/express_instrumentation.test.ts:49:10\n      at Layer.handle [as handle_request] (/Users/arnogau/.pnpm/express@4.19.2/layer.js:95:5)\n      at Pino.write (/modules/.pnpm/pino@9.1.0/node_modules/pino/lib/proto.js:204:35)\n  */\n  const stackLines = stack.split('\\n');\n  const callerStackLine = stackLines[frameDepth + 1];\n\n  const callerAndPathRegex =\n    /at (?<caller>.+?) \\((?<filePath>[^:()]+(?::[^:()]+)*):(?<lineNum>\\d+):\\d+\\)/;\n  const capMatch = callerStackLine.match(callerAndPathRegex);\n  if (capMatch) {\n    const { filePath, lineNum, caller } = capMatch.groups as Record<string, string>;\n    return { filePath, lineNum: Number(lineNum), caller };\n  }\n\n  const pathOnlyRegex =\n    /at (?<filePath>[^:()]+(?::[^:()]+)*):(?<lineNum>\\d+):\\d+/;\n  const poMatch = callerStackLine.match(pathOnlyRegex);\n  if (poMatch) {\n    const { filePath, lineNum } = poMatch.groups as Record<string, string>;\n    return { filePath, lineNum: Number(lineNum) };\n  }\n\n  return {};\n}\n/*\nREGEX test cases\nat getCallerInfo (/Users/username/.../instrumentation.ts:96:15)\nat Object.<anonymous> (/Users/username/instrumentation.ts:21:1)\nat /iudex-node-module/test/express_instrumentation.test.ts:49:10\nat Layer.handle [as handle_request] (/Users/arnogau/.pnpm/express@4.19.2/layer.js:95:5)\nat Layer.handle (/Users/arnogau/.pnpm/express@4.19.2/layer.js:95:5)\nat <anonymous>:1:43\nat f (<anonymous>:1:29)\nat process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n*/\n\nexport function emitOtelLog({\n  level,\n  body,\n  severityNumber,\n  attributes,\n  stackDepth,\n}: {\n  level: string;\n  body: any;\n  severityNumber?: number;\n  attributes?: Record<string, any>;\n  stackDepth?: number,\n}) {\n  if (!config.isInstrumented) return;\n\n  const attrs = { ...attributes };\n\n  if (stackDepth != null) {\n    const { filePath, lineNum, caller } = getCallerInfo(stackDepth + 1);\n    Object.assign(attrs, {\n      [SEMATTRS_CODE_FILEPATH]: filePath,\n      [SEMATTRS_CODE_LINENO]: lineNum,\n      [SEMATTRS_CODE_FUNCTION]: caller,\n    });\n  }\n\n  // TODO: cache named logger\n  const otelLogger = logs.getLogger('default');\n  otelLogger.emit({\n    severityNumber: severityNumber || convertSeverityTextToNumber(level.toUpperCase()),\n    severityText: level.toUpperCase(),\n    body,\n    attributes: _.omitBy(attrs, _.isNil),\n  });\n}\n\n","import * as R from 'ramda';\nimport util from 'util';\n\nimport { emitOtelLog, nativeConsole } from './utils.js';\n\n\nexport function instrumentConsole() {\n  const { log, error, warn, info, debug, timeLog, timeEnd } = console;\n  ([\n    { name: 'log', logger: log, level: 'INFO' },\n    { name: 'error', logger: error, level: 'ERROR' },\n    { name: 'warn', logger: warn, level: 'WARN' },\n    { name: 'info', logger: info, level: 'INFO' },\n    { name: 'debug', logger: debug, level: 'DEBUG'},\n    { name: 'timeLog', logger: timeLog, level: 'INFO' },\n    { name: 'timeEnd', logger: timeEnd, level: 'INFO' },\n  ] as const).forEach(({ name, logger, level }) => {\n\n    console[name] = function (...content: any[]) {\n      // Log to console\n      logger(...content);\n\n      // Separate out context (attributes) from content\n      const contentWoCtx = content\n        .filter((c) => !isObject(c) || !('ctx' in c || 'authCtx' in c));\n      const contentCtx = R.mergeAll(content\n        .filter((c) => isObject(c) && ('ctx' in c || 'authCtx' in c))\n        .map(c => {\n          if (c.ctx) return c.ctx;\n          if (c.authCtx) return c.authCtx;\n          return {};\n        }),\n      );\n\n      // Pretty print pobjects\n      const prettyContentWoCtx = contentWoCtx.map((c) => {\n        if (typeof c === 'object') {\n          try {\n            return util.inspect(c);\n          } catch {/* ignore */}\n        }\n        return c;\n      });\n\n      // Emit as otel\n      emitOtelLog({ level, body: prettyContentWoCtx.join(' '), attributes: contentCtx });\n    };\n  });\n}\n\nfunction isObject(obj: any): obj is Record<string, any> {\n  return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;\n}\n","import { AnthropicInstrumentation } from '@traceloop/instrumentation-anthropic';\nimport { OpenAIInstrumentation } from '@traceloop/instrumentation-openai';\nimport { AzureOpenAIInstrumentation } from '@traceloop/instrumentation-azure';\nimport { LlamaIndexInstrumentation } from '@traceloop/instrumentation-llamaindex';\nimport {\n  AIPlatformInstrumentation,\n  VertexAIInstrumentation,\n} from '@traceloop/instrumentation-vertexai';\nimport { BedrockInstrumentation } from '@traceloop/instrumentation-bedrock';\nimport { CohereInstrumentation } from '@traceloop/instrumentation-cohere';\nimport { PineconeInstrumentation } from '@traceloop/instrumentation-pinecone';\nimport { LangChainInstrumentation } from '@traceloop/instrumentation-langchain';\nimport { ChromaDBInstrumentation } from '@traceloop/instrumentation-chromadb';\n\nexport function traceloopInstrumentations() {\n  const instrumentations = [\n    new AnthropicInstrumentation(),\n    new OpenAIInstrumentation(),\n    new AzureOpenAIInstrumentation(),\n    new LlamaIndexInstrumentation(),\n    new AIPlatformInstrumentation(),\n    new VertexAIInstrumentation(),\n    new BedrockInstrumentation(),\n    new CohereInstrumentation(),\n    new PineconeInstrumentation(),\n    new LangChainInstrumentation(),\n    new ChromaDBInstrumentation(),\n  ];\n  return instrumentations;\n}\n","import _ from 'lodash';\nimport {\n  Span,\n  SpanStatusCode,\n  diag,\n  trace,\n} from '@opentelemetry/api';\n\nimport { config, emitOtelLog } from './utils.js';\n\nexport type TraceCtx = {\n  name?: string;\n  trackArgs?: boolean;\n  attributes?: Record<string, any>;\n};\n\n/**\n * Trace decorator\n */\nexport function withTracing<T extends (...args: any) => any>(\n  fn: T,\n  ctx: {\n    name?: string;\n    trackArgs?: boolean;\n    attributes?: Record<string, any>;\n    setSpan?: (span: Span, ret: ReturnType<T>) => void;\n  } = {},\n): T {\n  if (!config.isInstrumented) {\n    return fn;\n  }\n  const { name, trackArgs = true, attributes, setSpan } = ctx;\n  const tracer = trace.getTracer('default');\n  return function (...args: Parameters<T>): ReturnType<T> {\n    return tracer.startActiveSpan(name || fn.name || '<anonymous>', (span: Span) => {\n      try {\n        if (attributes) {\n          span.setAttributes(attributes);\n        }\n        if (trackArgs) {\n          if (args.length === 1) {\n            span.setAttribute('arg', args[0]);\n          } else if (args.length > 1) {\n            span.setAttribute('args', args);\n          }\n        }\n        const ret = fn(...args);\n\n\n        // If its a promise, wait for it to resolve, follow async code path\n        if (ret.then) {\n          // If theres a setSpan handler, use that instead\n          if (setSpan) {\n            // Wait for ret to resolve, then call setSpan\n            return ret.then((res: any) => {\n              setSpan(span, ret);\n              return res;\n            });\n          }\n\n          return (ret as Promise<ReturnType<T>>)\n            .then((res) => {\n              span.setStatus({ code: SpanStatusCode.OK });\n              return res;\n            })\n            .catch((err) => {\n              span.setStatus({ code: SpanStatusCode.ERROR, message: String(err) });\n              span.recordException(err as Error);\n              emitOtelLog({ level: 'ERROR', body: err });\n              throw err;\n            })\n            .finally(() => {\n              span.end();\n            });\n        }\n\n        // If theres a setSpan handler, use that instead\n        if (setSpan) {\n          setSpan(span, ret);\n          return ret;\n        }\n\n        // If not async, just return the result\n        span.setStatus({ code: SpanStatusCode.OK });\n        span.end();\n        return ret;\n      } catch (err) {\n        span.setStatus({ code: SpanStatusCode.ERROR, message: String(err) });\n        span.recordException(err as Error);\n        emitOtelLog({ level: 'ERROR', body: err });\n        span.end();\n        throw err;\n      }\n    });\n  } as T;\n}\n","import {\n  SEMATTRS_CODE_FUNCTION,\n  SEMATTRS_CODE_FILEPATH,\n  SEMATTRS_CODE_LINENO,\n} from '@opentelemetry/semantic-conventions';\nimport type { DestinationStream, LoggerOptions } from 'pino';\nimport pino from 'pino';\nimport _ from 'lodash';\nimport {\n  convertSeverityValuesToLevel,\n  emitOtelLog,\n  getCallerInfo,\n  config as iconfig,\n} from './utils.js';\nimport { PinoInstrumentation } from '@opentelemetry/instrumentation-pino';\n\n\n/**\n * Pino write stream to send logs to OpenTelemetry and to default pino destination.\n */\nexport function write(str: string) {\n  if (iconfig.isInstrumented) {\n    try {\n      const { level, msg, time, ...rest } = JSON.parse(str);\n      const levelNumber = Number(level);\n      const severityText = convertSeverityValuesToLevel(levelNumber || undefined, level);\n\n      emitOtelLog({ level: severityText, severityNumber: level, body: msg, attributes: rest });\n    } catch {\n      emitOtelLog({ level: 'INFO', body: str });\n    }\n  }\n\n  pino.destination(1).write(str);\n}\n\nexport const config = {\n  mixinStackDepth: 4,\n};\n\n/**\n * Pino mixin stack looks like this:\n * Error\n *  at mixin\n *  options.mixin\n *  at Pino.write\n *  at Pino.LOG\n *  at ..../test/express_instrumentation.test.ts:43:10\n */\nexport function mixin(): Record<string, string | number | undefined> {\n  const { filePath, lineNum, caller } = getCallerInfo(config.mixinStackDepth);\n  return _.omitBy({\n    [SEMATTRS_CODE_FILEPATH]: filePath,\n    [SEMATTRS_CODE_LINENO]: lineNum,\n    [SEMATTRS_CODE_FUNCTION]: caller,\n  }, _.isNil);\n}\n\nexport const destination: DestinationStream = { write };\n\nexport const options: LoggerOptions<never> = { mixin };\n\nexport const args = [options, destination] as const;\n\nexport const iudexPino = {\n  write,\n  config,\n  mixin,\n  destination,\n  options,\n  args,\n};\n","import {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\n// import { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nimport { iudexTrpc } from './trpc.js';\nimport { IncomingMessage, ServerResponse } from 'http';\n\nexport const options = {\n  customSuccessMessage: (req: IncomingMessage, res: ServerResponse) => {\n    // Better TRPC logging for pino-http\n    if (iudexTrpc.isTrpcRequest(req)) {\n      try {\n        return iudexTrpc.trpcReqMessage(req, res);\n      } catch { /* Ignore */}\n    }\n    // Copied from pino-http\n    return !req.readableAborted && res.writableEnded ? 'request completed' : 'request aborted';\n  },\n};\n\nexport const iudexPinoHttp = {\n  options,\n};\n\n\nexport interface PinoHttpInstrumentationConfig extends InstrumentationConfig {\n}\n\n\n/**\n * @deprecated Experimental, don't use\n */\nexport class PinoHttpInstrumentation extends InstrumentationBase {\n  constructor(config: PinoHttpInstrumentationConfig = {}) {\n    super('pino-http', '1.0.0', config);\n  }\n  protected init() {\n    return new InstrumentationNodeModuleDefinition('pino-http', ['*'], module => {\n      const isESM = module[Symbol.toStringTag] === 'Module';\n      const moduleExports = isESM ? module.default : module;\n      const patchedPinoHttp = Object.assign((...args: unknown[]) => {\n        if (args.length === 0) {\n          return moduleExports(options);\n        }\n\n        if (args.length === 1) {\n          const optsOrStream = args[0] as any;\n          // Is stream\n          if (typeof optsOrStream?.write === 'function') {\n            return moduleExports(options, optsOrStream);\n          }\n          // Is config object\n          if (typeof optsOrStream === 'object') {\n            return moduleExports({ ...options, ...optsOrStream });\n          }\n        }\n\n        const opts = args[0] as any;\n        args[0] = { ...options, ...opts };\n        return moduleExports(...args);\n      }, moduleExports);\n\n      if (typeof patchedPinoHttp.pinoHttp === 'function') {\n        patchedPinoHttp.pinoHttp = patchedPinoHttp;\n      }\n      if (typeof patchedPinoHttp.default === 'function') {\n        patchedPinoHttp.default = patchedPinoHttp;\n      }\n      if (isESM) {\n        module.pinoHttp = patchedPinoHttp;\n        module.default = patchedPinoHttp;\n      }\n\n      return patchedPinoHttp;\n    });\n  }\n}","import { IncomingMessage, ServerResponse } from 'http';\n\nexport const config = {\n  trpcBasePath: '/trpc',\n};\n\nexport function isTrpcRequest(req: IncomingMessage): boolean {\n  const url = (req as any).originalUrl || req.url;\n  return url && url.startsWith(config.trpcBasePath);\n}\n\n/**\n * Extracts inputs from a TRPC request. Similar to TRPC's parse req\n * https://github.com/trpc/trpc/blob/84bfa8b8206570d35e1cb3a75be97d1eb3bc8aa2/packages/server/src/unstable-core-do-not-import/http/contentType.ts#L67\n * Doesnt throw if input object structure is mangled\n */\nexport function extractTrpcReqInputs(req: IncomingMessage): Record<string, any> {\n  const { url } = req;\n  if (!url) {\n    return {};\n  }\n  /* If GET, use search params */\n  if (req.method === 'GET') {\n    const [, inputStr] = url.split('?', 2);\n    const searchParams = new URLSearchParams(inputStr);\n    const queryInput = searchParams.get('input');\n    const inputs = (queryInput ? JSON.parse(queryInput) : {}) || {};\n    return isObject(inputs) ? inputs : { 0: inputs };\n  }\n\n  /* Else, use body */\n  // Pray that some middleware moved the POST body into req.body as a JSON object\n  // Express and fastify do this, for example\n  const inputs = (req as any).body;\n  return isObject(inputs) ? inputs : { 0: inputs };\n}\n\n/**\n * Creates a loggable message for a TRPC request\n */\nexport function trpcReqMessage(req: IncomingMessage, res?: ServerResponse): string {\n  const { url } = req;\n  if (!url) {\n    return 'Iudex Error: Missing URL in TRPC request';\n  }\n  // pathsStr looks like /userById,userList\n  const [pathsStr] = url.split('?', 2);\n  // paths look like ['userById', 'userList']\n  const paths = pathsStr.slice(1).split(',');\n  // inputs is an object with keys 0, 1, ... for each path if it exists\n  const inputs = extractTrpcReqInputs(req);\n\n  const calls = paths.map((path, idx)  => {\n    return {\n      path,\n      input: inputs[idx] as Record<string, any> | undefined,\n    };\n  });\n\n  return `TRPC:\\n` +\n    `${calls.map(call => {\n      // TODO add call output\n      return `  ${call.path}${call.input ? ` (${jsonStrOrEmpty(call.input)})` : ''}`;\n    }).join('\\n')}`\n  ;\n}\n\nexport const iudexTrpc = {\n  config,\n  isTrpcRequest,\n  extractTrpcReqInputs,\n  trpcReqMessage,\n};\n\n// Utilities\n\nfunction jsonStrOrEmpty(obj: Record<string, any> | undefined): string {\n  return obj ? JSON.stringify(obj, null, 4) : '';\n}\n\nexport function isObject(value: unknown): value is Record<string, unknown> {\n  return !!value && !Array.isArray(value) && typeof value === 'object';\n}\n","import {\n  SEMATTRS_CODE_FUNCTION,\n  SEMATTRS_CODE_FILEPATH,\n  SEMATTRS_CODE_LINENO,\n} from '@opentelemetry/semantic-conventions';\nimport _ from 'lodash';\nimport { getCallerInfo } from './utils.js';\nimport { iudexPino } from './pino.js';\n// import type { FastifyLoggerOptions, PinoLoggerOptions } from 'fastify/types/logger.js';\n\nexport const stream = iudexPino.destination;\n\nexport const config = {\n  mixinStackDepth: 5,\n};\n\n/**\n *\n * Error\n    at getCallerInfo (/.../instrumentation/utils.ts:65:14)\n    at mixin (/.../instrumentation/fastify.ts:2:54)\n    at write (/.../pino/lib/proto.js:79:42)\n    at LOG (/.../pino/lib/tools.js:33:23)\n    at logServerAddress (/.../fastify/lib/server.js:256:18)\n    at wrap (/.../fastify/lib/server.js:137:46)\n    at <anonymous> (node:http:29:36)\n */\nexport function mixin(): Record<string, string | number | undefined> {\n  const { filePath, lineNum, caller } = getCallerInfo(config.mixinStackDepth);\n  return _.omitBy({\n    [SEMATTRS_CODE_FILEPATH]: filePath,\n    [SEMATTRS_CODE_LINENO]: lineNum,\n    [SEMATTRS_CODE_FUNCTION]: caller,\n  }, _.isNil);\n}\n\n// type: FastifyLoggerOptions<RawServerDefault> & PinoLoggerOptions\nexport const logger = {\n  level: 'info',\n  mixin,\n  stream,\n};\n\nexport const iudexFastify = {\n  stream,\n  mixin,\n  logger,\n};\n","import { APIGatewayProxyEventV2, Context, APIGatewayProxyStructuredResultV2 } from 'aws-lambda';\nimport { SpanStatusCode } from '@opentelemetry/api';\n\nimport { withTracing as baseWithTracing } from './trace.js';\nimport { emitOtelLog } from './utils.js';\n\nexport type ApiGatewayProxyEventHandler =\n  (event: APIGatewayProxyEventV2, context: Context) => Promise<APIGatewayProxyStructuredResultV2>\n\nexport function withTracing(\n  fn: ApiGatewayProxyEventHandler,\n  ctx: { name: string },\n): ApiGatewayProxyEventHandler {\n  return baseWithTracing(fn, {\n    name: ctx.name,\n    setSpan: (span, ret) => ret\n      .then((res) => {\n        if (res.statusCode && res.statusCode >= 400) {\n          span.setStatus({ code: SpanStatusCode.ERROR, message: res.body });\n          span.setAttribute('statusCode', res.statusCode);\n          emitOtelLog({ level: 'ERROR', body: `${ctx.name} ${res.body}` });\n        } else {\n          span.setStatus({ code: SpanStatusCode.OK });\n          emitOtelLog({ level: 'INFO', body: `${ctx.name} Succeeded` });\n        }\n      })\n      .catch((err) => {\n        span.setStatus({ code: SpanStatusCode.ERROR, message: String(err) });\n        span.setAttribute('statusCode', 500);\n        span.recordException(err as Error);\n        emitOtelLog({ level: 'ERROR', body: `${ctx.name} ${String(err)}` });\n        throw err;\n      })\n      .finally(() => {\n        span.end();\n      }),\n  });\n}\n","import { Handler } from 'aws-lambda';\n\nimport { withTracing as baseWithTracing } from './trace.js';\n\n\nexport function withTracing<Event, Result>(\n  fn: Handler<Event, Result>,\n  ctx: { name: string },\n): Handler<Event, Result> {\n  return baseWithTracing(fn, {\n    name: ctx.name,\n  });\n}\n"],"mappings":"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","names":["_a","import_api","import_api","W3CBaggagePropagator","AnchoredClock","import_api","import_api","_a","TracesSamplerValues","import_api","init_environment","init_environment","ExportResultCode","import_api","CompositePropagator","config","_a","TraceState","import_api","VERSION","W3CTraceContextPropagator","import_api","RPCType","import_api","AlwaysOffSampler","import_api","AlwaysOnSampler","import_api","ParentBasedSampler","config","_a","import_api","TraceIdRatioBasedSampler","TimeoutError","Deferred","BindOnceFuture","args","_a","__read","_a","__read","url","import_api","import_api","OTLPExporterBase","config","init_types","CompressionAlgorithm","init_types","__extends","OTLPExporterError","options","request","config","Agent","import_api","init_types","import_api","init_util","__extends","OTLPExporterNodeBase","config","init_node","init_util","init_platform","init_node","init_esm","init_platform","init_types","exports","module","params","offset","exports","i","exports","module","args","exports","module","exports","exports","module","size","exports","module","util","exports","util","isObject","Buffer","keys","i","exports","module","util","create","exports","module","util","exports","module","util","create_array","create","buffer","exports","module","util","exports","module","util","request","self","err","exports","exports","module","exports","require_minimal","exports","module","exports","module","opentelemetry","keys","options","Resource","trace","Span","request","logs","init_types","ServiceClientType","init_util","init_types","init_util","init_esm","exports","module","exports","module","exports","module","toString","err","exports","module","toString","err","exports","module","exports","module","exports","module","exports","module","_","exports","module","exports","module","exports","module","exports","module","exports","module","keys","i","node","exports","module","exports","module","exports","module","exports","module","exports","module","args","exports","module","exports","module","args","exports","module","exports","module","write","err","n","releasedBufObj","exports","module","exports","module","exports","module","exports","module","exports","module","FinalizationRegistry","WeakRef","stream","write","exports","module","stream","onExit","options","fixTarget","exports","module","args","stringify","stream","_","destination","exports","module","exports","module","args","stream","exports","module","exports","module","write","bindings","options","mixin","stream","exports","module","options","value","tmp","keys","key","res","join","stringify","exports","module","write","stream","args","streamLevels","exports","module","pino","args","stream","serializers","mixin","time","console","args","_a","_isArguments","contains","keys","pad","_toISOString","mapObjIndexed","mergeAll","module","import_zod","z","import_zod","z","z","import_zod","import_semantic_conventions","import_api_logs","init_esm","import_api","init_esm","__extends","OTLPProtoExporterNodeBase","config","send","init_types","options","_a","_a","__read","options","__values","_a","__read","_b","VERSION","VERSION","__extends","OTLPLogExporter","config","__assign","logs","import_lodash","import_semantic_conventions","_","import_api","import_util","logger","util","import_api","args","config","import_semantic_conventions","import_lodash","pino","config","_","options","config","isObject","config","url","inputs","isObject","options","config","module","args","config","mixin","import_semantic_conventions","import_lodash","config","mixin","_","withTracing","import_api","withTracing","withTracing","withTracing","console","_","loggerProvider","nextMessage","root"]}